{"id":11199,"date":"2018-08-31T23:58:05","date_gmt":"2018-08-31T18:28:05","guid":{"rendered":"https:\/\/howtodoinjava.com\/?page_id=11199"},"modified":"2020-12-26T00:37:05","modified_gmt":"2020-12-25T19:07:05","slug":"java-string","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-string\/","title":{"rendered":"A Guide to Java String Class"},"content":{"rendered":"<p>A <strong>Java String<\/strong> represents an <a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-interview-question-why-strings-are-immutable\/\">immutable<\/a> sequence of characters and cannot be changed once created. Strings are of type <strong>java.lang.String<\/strong> class.  In this page, learn about creating strings with string literal and <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-constructors\/\">constructors<\/a>, string methods and various strings examples related to string conversion and formatting.<\/p>\n<h2>1. Create String in Java<\/h2>\n<p>There are two ways to create a String in Java.<\/p>\n<ol>\n<li>\n<h4>String literal<\/h4>\n<p>String literals are most easy and <strong>recommended way to create strings<\/strong> in Java. In this way, simply assign the characters in double quotes to variable of <code>java.lang.String<\/code> type.<\/p>\n<pre class=\"brush: java; title: String literal example; notranslate\" title=\"String literal example\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nString welcomeMessage = &quot;Hello World !!&quot;;\r\n<\/pre>\n<p>String literals are stored in String pool, a special memory area created by JVM. There can be only one instance of one String. Any second String with same character sequence will have the reference of first string stored in string pool. It makes efficient to work with Strings and saves lots of physical memory in runtime.<\/p>\n<pre class=\"brush: java; title: String literals in string pool; notranslate\" title=\"String literals in string pool\">\r\nString blogName1 = &quot;howtodoinjava.com&quot;;\r\nString blogName2 = &quot;howtodoinjava.com&quot;;\r\nString blogName3 = &quot;howtodoinjava.com&quot;;\r\nString blogName4 = &quot;howtodoinjava.com&quot;;\r\nString blogName5 = &quot;howtodoinjava.com&quot;;\r\n<\/pre>\n<p>In above example, we created 5 string literals with same char sequence. Inside JVM, there will be only one instance of String inside string pool. All rest 4 instances will share the reference of string literal created for first literal.\n<\/li>\n<li>\n<h4>String object<\/h4>\n<p>At times, we may wish to create separate instance for each separate string in memory. We can create one string object per string value using <strong>new<\/strong> keyword. <\/p>\n<p>String objects created using new keyword &#8211; are stored in <em>heap memory<\/em>.<\/p>\n<pre class=\"brush: java; title: String object example; notranslate\" title=\"String object example\">\r\nString blogName1 = new String(&quot;howtodoinjava.com&quot;);\r\nString blogName2 = new String(&quot;howtodoinjava.com&quot;);\r\nString blogName3 = new String(&quot;howtodoinjava.com&quot;);\r\n<\/pre>\n<p>In above example, there will be 3 separate instances of String with same value in heap memory.\n<\/li>\n<\/ol>\n<h2>2. Java String Methods<\/h2>\n<ol>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-charat-method-example\/\">char charAt(int index)<\/a><\/strong> &#8211; Returns the character at the specified index. Specified index value should be between <code>'0'<\/code> to <code>'length() -1'<\/code> both inclusive. It throws <code>IndexOutOfBoundsException<\/code> if index is invalid\/ out of range.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n        \r\nchar c = blogName.charAt(5);\t\/\/'d'\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-equals-method\/\">boolean equals(Object obj)<\/a><\/strong> &#8211; Compares the string with the specified string and returns <strong>true<\/strong> if both matches else <strong>false<\/strong>.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">String blogName = &quot;howtodoinjava.com&quot;;\r\n        \r\nblogName.equals( &quot;howtodoinjava.com&quot; );\t\t\/\/true\r\nblogName.equals( &quot;example.com&quot; );\t\t\t\/\/false<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-equalsignorecase-method\/\">boolean equalsIgnoreCase(String string)<\/a><\/strong> &#8211; Compares same as <code>equals<\/code> method but in case insensitive way.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">String blogName = &quot;howtodoinjava.com&quot;;\r\n        \r\nblogName.equalsIgnoreCase( &quot;howtodoinjava.com&quot; );\t\t\/\/true\r\nblogName.equalsIgnoreCase( &quot;HowToDoInJava.com&quot; );\t\t\/\/true<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-compareto-method\/\">int compareTo(String string)<\/a><\/strong> &#8211; Compares the two strings lexicographically based on the Unicode value of each character in the strings. You can consider it dictionary based comparison.\n<p>The return value is 0 if the argument string is equal to this string; a value less than 0 if this string is lexicographically less than the string argument; and a value greater than 0 if this string is lexicographically greater than the string argument.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">String blogName = &quot;howtodoinjava.com&quot;;\r\n        \r\nblogName.compareTo( &quot;HowToDoInJava.com&quot; );\t\t\/\/32\r\nblogName.compareTo( &quot;example.com&quot; );\t\t\t\/\/3\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-comparetoignorecase-example\/\">int compareToIgnoreCase(String string)<\/a><\/strong> &#8211; Same as <code>CompareTo<\/code> method however it ignores the case during comparison.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">String blogName = &quot;howtodoinjava.com&quot;;\r\n        \r\nblogName.compareToIgnoreCase( &quot;HowToDoInJava.com&quot; );\t\t\/\/0\r\nblogName.compareToIgnoreCase( &quot;example.com&quot; );\t\t\t\t\/\/3\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-startswith-example\/\">boolean startsWith(String prefix, int offset)<\/a><\/strong> &#8211; Checks whether the String is having the specified prefix or not &#8211; starting from the specified offset index.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.startsWith( &quot;d&quot;, 5 );\t\t\/\/true\r\nblogName.startsWith( &quot;e&quot;, 5 );\t\t\/\/false\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-startswith-example\/\">boolean startsWith(String prefix)<\/a><\/strong> &#8211; Tests whether the string is having specified <code>prefix<\/code>, if yes then it returns <code>true<\/code> else <code>false<\/code>. The offset index value is 0 in this overloaded method.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.startsWith( &quot;h&quot; );\t\t\/\/true\r\nblogName.startsWith( &quot;e&quot; );\t\t\/\/false\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-endswith-method\/\">boolean endsWith(String suffix)<\/a><\/strong> &#8211; Checks whether the string ends with the specified suffix.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.endsWith( &quot;com&quot; );\t\t\t\/\/true\r\nblogName.endsWith( &quot;java&quot; );\t\t\/\/false\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-hashcode-method\/\">int hashCode()<\/a><\/strong> &#8211; Returns the hash code of the string.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.hashCode();\t\t\t\/\/1894145264\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-indexof-method-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">int indexOf(int ch)<\/a><\/strong> &#8211; Returns the index of first occurrence of the specified character argument in the string.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.indexOf( 'o' );\t\t\t\/\/1\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-indexof-method-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">int indexOf(int ch, int fromIndex)<\/a><\/strong> &#8211; Overloaded version of <code>indexOf(char ch)<\/code> method however it starts searching in the string from the specified <code>fromIndex<\/code>.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.indexOf( 'o', 5 );\t\t\/\/6\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-indexof-method-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">int indexOf(String str)<\/a><\/strong> &#8211; Returns the index of first occurrence of specified substring <code>'str'<\/code>.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.indexOf( &quot;java&quot; );\t\t\t\/\/9\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-indexof-method-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">int indexOf(String str, int fromIndex)<\/a><\/strong> &#8211; Overloaded version of <code>indexOf(String str)<\/code> method however it starts searching in the string from the specified <code>fromIndex<\/code>.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.indexOf( &quot;java&quot; , 5);\t\t\t\/\/9\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-lastindexof-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">int lastIndexOf(int ch)<\/a><\/strong> &#8211; Returns the last occurrence of the character <code>'ch'<\/code> in the string.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.lastIndexOf( 'o' );\t\t\t\/\/15\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-lastindexof-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">int lastIndexOf(int ch, int fromIndex)<\/a><\/strong> &#8211; Overloaded version of <code>lastIndexOf(int ch)<\/code> method. It starts searching backward starting at the <code>fromIndex<\/code>.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.lastIndexOf( 'o', 5 );\t\t\t\/\/4\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-lastindexof-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">int lastIndexOf(String str)<\/a><\/strong> &#8211; Returns the index of last occurrence of string <code>'str'<\/code>. It is similar to <code>lastIndexOf(int ch)<\/code>.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.lastIndexOf( &quot;java&quot; );\t\t\t\/\/9\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-lastindexof-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">int lastIndexOf(String str, int fromIndex)<\/a><\/strong> &#8211; Overloaded version of <code>lastIndexOf(String str)<\/code> method. It starts searching backward starting at the <code>fromIndex<\/code>.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.lastIndexOf( &quot;java&quot;, 6 );\t\t\t\/\/9\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-substring-example\/\">String substring(int beginIndex)<\/a><\/strong> &#8211; Returns the substring of the string. The substring starts with the character at the specified index.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.substring( 7 );\t\t\/\/injava.com\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-substring-example\/\">String substring(int beginIndex, int endIndex)<\/a><\/strong> &#8211; Returns the substring. The substring starts with character at beginIndex and ends with the character at endIndex.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.substring( 7, 9 );\t\t\/\/in\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-concat-method-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">String concat(String str)<\/a><\/strong> &#8211; Concatenates the specified string argument at the end of the string.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.concat( &quot; Hello Visitor !!&quot; );\t\t\/\/howtodoinjava.com Hello Visitor !!\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-replace-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">String replace(char oldChar, char newChar)<\/a><\/strong> &#8211; Returns the new updated string after changing all the occurrences of oldChar with the newChar arguments.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.replace( 'o', 'O' );\t\t\/\/hOwtOdOinjava.cOm\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-replace-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">String replace(String target, String replacement)<\/a><\/strong> &#8211; Returns the new updated string after changing all the occurrences of <code>target<\/code> with the <code>replacement<\/code> argument.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.replace( &quot;com&quot;, &quot;COM&quot; );\t\t\/\/howtodoinjava.COM\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-replacefirst-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">String replaceFirst(String regex, String replacement)<\/a><\/strong> &#8211; Replaces the first occurrence of substring that matches the given <a href=\"https:\/\/howtodoinjava.com\/java-regular-expression-tutorials\/\">regular expression<\/a> argument with the specified replacement string.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.replaceFirst(&quot;how&quot;, &quot;HOW&quot;);\t\t\/\/HOWtodoinjava.com\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-replaceall-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">String replaceAll(String regex, String replacement)<\/a><\/strong> &#8211;  Replaces all the occurrences of substrings that matches the regular expression argument with the replacement string.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-split-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">String[] split(String regex, int limit)<\/a><\/strong> &#8211; Splits the string and returns the array of sub-strings that matches the given regular expression. <code>'limit'<\/code> is a maximum number of elements in array.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.split(&quot;o&quot;, 3);\t\t\/\/[h, wt, doinjava.com]\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-split-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">String[] split(String regex)<\/a><\/strong> &#8211; Overload of previous method without any threshold limit.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-contains-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">boolean contains(CharSequence s)<\/a><\/strong> &#8211; Checks whether the string contains the specified sequence of char values. If yes then it returns <code>true<\/code> else <code>false<\/code>. It throws <a href=\"https:\/\/howtodoinjava.com\/java\/exception-handling\/how-to-effectively-handle-nullpointerexception-in-java\/\">NullPointerException<\/a> if argument is null.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.contains( &quot;java&quot; );\t\t\/\/true\r\nblogName.contains( &quot;python&quot; );\t\t\/\/false\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-touppercase-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">String toUpperCase(Locale locale)<\/a><\/strong> &#8211; Converts the string to upper case string using the rules defined by specified locale.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.toUpperCase( Locale.getDefault() );\t\t\/\/HOWTODOINJAVA.COM\r\n<\/pre>\n<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-touppercase-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">String toUpperCase()<\/a><\/strong> &#8211; Overloaded version of previous <code>toUpperCase()<\/code> method with default locale.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-tolowercase-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">String toLowerCase(Locale locale)<\/a><\/strong> &#8211; Converts the string to lower case string using the rules defined by given locale.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-tolowercase-method\/\" rel=\"noopener noreferrer\" target=\"_blank\">String toLowerCase()<\/a><\/strong> &#8211; Overloaded version of previous method with default locale.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-string-intern-method-example\/\" rel=\"noopener noreferrer\" target=\"_blank\">String intern()<\/a><\/strong> &#8211; Searches the specified string in the memory pool and if it is found then it returns the reference of it. Otherwise this method allocates creates string literal in string pool and return the reference.<\/li>\n<li><strong>boolean isEmpty()<\/strong> &#8211; Returns <code>true<\/code> if the given string has 0 length else returns <strong>false<\/strong>.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString blogName = &quot;howtodoinjava.com&quot;;\r\n\r\nblogName.isEmpty();\t\t\/\/false\r\n&quot;&quot;.isEmpty();\t\t\t\/\/true\r\n<\/pre>\n<\/li>\n<li><strong>static String join()<\/strong> &#8211; Joins the given strings using the specified delimiter and returns the concatenated Java String literal.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nString.join(&quot;-&quot;, &quot;how&quot;,&quot;to&quot;, &quot;do&quot;, &quot;in&quot;, &quot;java&quot;)\t\t\/\/how-to-do-in-java\r\n<\/pre>\n<\/li>\n<li><strong>static String format()<\/strong> &#8211; Returns a formatted string.<\/li>\n<li><strong>String trim()<\/strong> &#8211; Removes leading and trailing white spaces from the Java string.<\/li>\n<li><strong>char[] toCharArray()<\/strong> &#8211; Converts the string to a character array.<\/li>\n<li>static String copyValueOf(char[] data) &#8211; Returns a string that contains the characters of the specified character array.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nchar[] chars = new char[] {'h','o','w'};\r\n\r\nString.copyValueOf(chars);\t\t\/\/how\r\n<\/pre>\n<\/li>\n<li><strong>byte[] getBytes(String charsetName)<\/strong> &#8211; Converts the String into sequence of bytes using the specified charset encoding.<\/li>\n<li><strong>byte[] getBytes()<\/strong> &#8211; Overloaded version of previous method. It uses the default charset encoding.<\/li>\n<li><strong>int length()<\/strong> &#8211; Returns the length of a String.<\/li>\n<li><strong>boolean matches(String regex)<\/strong> &#8211; Validates whether the String is matching with the specified regular expression argument.<\/li>\n<li><strong>int codePointAt(int index)<\/strong> &#8211; It is similar to the <code>charAt()<\/code> method. It returns the Unicode code point value of specified index rather than the character itself.<\/li>\n<li><strong>static String copyValueOf(char[] data, int offset, int count)<\/strong> &#8211; Overloaded version of previous method with two extra arguments \u2013 initial offset of subarray and length of subarray. It selects characters from array based on extra arguments,and then create the string.<\/li>\n<li>void getChars(int srcBegin, int srcEnd, char[] dest, int destBegin) &#8211; Copies the characters of <strong>src<\/strong> array to the <strong>dest<\/strong> array. Only the specified range is being copied(srcBegin to srcEnd) to the dest subarray(starting fromdestBegin).<\/li>\n<li><strong>static String valueOf()<\/strong> &#8211; Returns a string representation of passed arguments such as int, long, float, double, char and char array.<\/li>\n<li><strong>boolean contentEquals(StringBuffer sb)<\/strong> &#8211; Compares the string to the specified string buffer.<\/li>\n<li><strong>boolean regionMatches(int srcoffset, String dest, int destoffset, int len)<\/strong> &#8211; Compares the substring of input to the substring of specified string.<\/li>\n<li><strong>boolean regionMatches(boolean ignoreCase, int&nbsp;srcoffset, String dest, int destoffset, int len)<\/strong> &#8211; Another variation of regionMatches method with the extra boolean argument to specify whether the comparison is case sensitive or case insensitive.<\/li>\n<\/ol>\n<h2>3. String Conversion Examples<\/h2>\n<ol>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/convert-string-to-int\/\">Convert Java String to int<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/convert-int-to-string\/\">Convert int to String in Java<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/convert-string-to-long\/\">Convert String to Long<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/convert-long-to-string\/\">Convert Long to String in Java<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/date-time\/java-date-examples\/\">Convert String to Date<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/date-time\/java-date-examples\/\">Convert Date to String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/array\/string-to-string-array\/\">Convert String to String[] Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java8\/join-string-array-example\/\">Java 8 &#8211; Join String Array &#8211; Convert Array to String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/io\/convert-string-to-inputstream\/\">Convert String to InputStream Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/io\/inputstream-to-string\/\">Convert InputStream to String Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-split-csv-string-to-list\/\">Java Split CSV String &#8211; Convert String to List Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-string-join-csv-example\/\">Join CSV to String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/unescape-html-to-string\/\">Unescape HTML to String Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/escape-html-encode-string\/\">Escape HTML \u2013 Encode String to HTML Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/array\/java-convert-byte-array-to-string-example\/\">Convert byte array to String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/convert-stacktrace-to-string\/\">StackTrace to String conversion<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/float-to-string-format-decimal-points\/\">Convert float to String &#8211; Format to N decimal points<\/a><\/li>\n<\/ol>\n<h2>4. Useful String Examples<\/h2>\n<ol>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/reverse-string-using-recursion\/\">Reverse a String in Java using Recursion<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/remove-extra-whitespaces-between-words\/\">Remove extra white spaces between words<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/remove-leading-whitespaces\/\">Remove only leading spaces of a String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/trim-remove-trailing-spaces\/\">Remove only trailing spaces of a String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/puzzles\/how-to-reverse-string-in-java\/\">How to Reverse String in Java<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/reverse-words-in-string\/\">Reverse words in a string in Java<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/reverse-string-using-recursion\/\">Reverse string in Java using recursion<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/how-to-find-duplicate-words-in-a-string-in-java\/\">How to find duplicate words in String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/find-duplicate-characters\/\">How to find duplicate characters in a String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/sort\/sort-string-chars-alphabetically\/\">Java Sort String Characters Alphabetically<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/convert-string-to-titlecase\/\">Convert String to Title Case<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/split-tokenize-strings\/\">4 ways to split a String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/left-right-or-center-align-string\/\">Left, right, or center align string<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/io\/java-read-file-to-string-examples\/\">Read File to String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java8-stringjoiner-example\/\">Java 8 StringJoiner Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/left-pad-string-with-spaces-zeros\/\">Left pad a string with spaces or zeros<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/right-pad-string-with-spaces-zeros\/\">Right pad a string with spaces or zeros<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/get-first-4-characters\/\">Get first 4 characters of a string<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/get-last-4-characters\/\">Get last 4 characters of a string<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/format-phone-number\/\">Format string to (123) 456-7890 pattern<\/a><\/li>\n<\/ol>\n<h2>5. FAQs<\/h2>\n<ol>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/always-use-length-instead-of-equals-to-check-empty-string-in-java\/\">Always Use length() Instead of equals() to Check Empty String<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-interview-question-why-strings-are-immutable\/\">Why String is immutable<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/interview-questions\/string-questions\/\">Java String Interview Questions<\/a><\/li>\n<\/ol>\n<h2>6. References<\/h2>\n<p><a href=\"https:\/\/docs.oracle.com\/javase\/9\/docs\/api\/java\/lang\/String.html\">String Java Doc<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>A Java String represents an immutable sequence of characters and cannot be changed once created. Strings are of type java.lang.String class. In this page, learn about creating strings with string literal and constructors, string methods and various strings examples related to string conversion and formatting. 1. Create String in Java There are two ways to &#8230; <a title=\"A Guide to Java String Class\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-string\/\" aria-label=\"More on A Guide to Java String Class\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11302,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-String.png",400,250,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-String.png",150,94,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-String.png",300,188,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-String.png",400,250,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-String.png",400,250,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-String.png",400,250,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-String.png",400,250,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-String.png",120,75,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"A Java String represents an immutable sequence of characters and cannot be changed once created. Strings are of type java.lang.String class. In this page, learn about creating strings with string literal and constructors, string methods and various strings examples related to string conversion and formatting. 1. Create String in Java There are two ways to&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/11199"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=11199"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/11199\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11302"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=11199"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}