{"id":4305,"date":"2014-11-18T11:24:49","date_gmt":"2014-11-18T11:24:49","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=4305"},"modified":"2020-12-26T00:36:34","modified_gmt":"2020-12-25T19:06:34","slug":"java-regular-expression-tutorials","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-regular-expression-tutorials\/","title":{"rendered":"Java Regex Tutorial"},"content":{"rendered":"<p>A <strong>regex<\/strong> is used as a <strong>search pattern<\/strong> for strings. Using regex, we can find either a single match or multiple matches as well. We can look for any king of match in a string e.g. a simple character, a fixed string or any complex pattern of characters such email, SSN or domain names.<\/p>\n<h2>1. Regular expressions<\/h2>\n<p>Regular expressions are the key to powerful, flexible, and efficient text processing. It allow you to describe and parse text. Regular expressions can add, remove, isolate, and generally fold, spindle, and mutilate all kinds of text and data.<\/p>\n<h4>1.1. Metacharacters and literals<\/h4>\n<p>Full regular expressions are composed of two types of characters. <\/p>\n<ul>\n<li>The <em>special characters<\/em> (like the * from the filename analogy) are called <strong>metacharacters<\/strong>.<\/li>\n<li>The rest are called <strong>literal<\/strong>, or <em>normal text characters<\/em>. <\/li>\n<\/ul>\n<p>Regex gain usefulness from advanced expressive powers that their metacharacters provide. We can think of literal text acting as the words and metacharacters as the grammar. The words are combined with grammar according to a set of rules to create an expression that communicates an idea.<\/p>\n<h4>1.2. Java Regex Example<\/h4>\n<p>Let&#8217;s see a quick Java example to use regex for reference.<\/p>\n<pre class=\"brush: java; title: Java Regex Example; notranslate\" title=\"Java Regex Example\">\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class Main \r\n{\r\n public static void main(String[] args) \r\n {\r\n  Pattern pattern = Pattern.compile(&quot;Alex|Brian&quot;);\r\n  Matcher matcher = pattern.matcher(&quot;Generally, Alex and Brian share a great bonding.&quot;);\r\n  \r\n  while (matcher.find()) {\r\n            System.out.print(&quot;Start index: &quot; + matcher.start());\r\n            System.out.print(&quot; End index: &quot; + matcher.end() + &quot; &quot;);\r\n            System.out.println(&quot; - &quot; + matcher.group());\r\n        }\r\n }\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nStart index: 11 End index: 15  - Alex\r\nStart index: 20 End index: 25  - Brian\r\n<\/pre>\n<h2>2. Regex Metacharacters<\/h2>\n<p>Let&#8217;s explore the commonly used metacharacters to understand them better.<\/p>\n<h4>2.1. Start and End of the Line<\/h4>\n<p>The start and end are represented with  <code>'^'<\/code> (caret) and <code>'$'<\/code> (dollar) signs. The caret and dollar are special in that they <strong>match a position in the line<\/strong> rather than any actual text characters themselves.<\/p>\n<p>For example, the regular expression &#8220;cat&#8221; finds &#8216;cat&#8217; anywhere in the string, but &#8220;^cat&#8221; matches only if the &#8216;cat&#8217; is at the beginning of the line. e.g. words like &#8216;category&#8217; or &#8216;catalogue&#8217;.<\/p>\n<p>Similarly, &#8220;cat$&#8221; matches only if the &#8216;cat&#8217; is at the end of the line. e.g. words like &#8216;scat&#8217;.<\/p>\n<h4>2.2. Character Classes<\/h4>\n<p>The regular-expression construct <code>\"[\u00b7\u00b7\u00b7]\"<\/code>, usually called a character class, lets us list the characters we want to allow at that point in the match. Character classes are useful in creating spell-checkers.<\/p>\n<p>For example, while &#8220;e&#8221; matches just an e, and &#8220;a&#8221; matches just an a, the regular expression <code>[ea]<\/code> matches either. e.g. <code>sep[ea]r[ea]te<\/code> will match all the words \u201cseperate\u201d \u201cseparate\u201d and \u201cseparete\u201d. <\/p>\n<p>Another example can be to allow capitalization of a word\u2019s first letter e.g. [Ss]mith will allow the words <code>smith<\/code> and <code>Smith<\/code> both.<\/p>\n<p>Similarly, <code>&lt;[hH][123456]&gt;<\/code> will match all heading tags i.e. H1, H2, H3, H4, H5 and H6.<\/p>\n<h6>2.2.1. Range of characters<\/h6>\n<p>A dash <code>\" - \"<\/code> indicates a range of characters. <code>&lt;[hH][1-6]&gt;<\/code> is similar to <code>&lt;[hH][123456]&gt;<\/code>. Other useful character ranges are <code>[0-9]<\/code> and <code>[a-z]<\/code> which match digits and English lowercase letters.<\/p>\n<p>We can specify multiple ranges in single construct e.g. <code>[0123456789abcdefABCDEF]<\/code> can be written as <code>[0-9a-fA-F]<\/code>. Note that order in which ranges are given doesn\u2019t matter.<\/p>\n<p>Note that a dash is a metacharacter only within a character class, otherwise it matches the normal dash character. Also, if it is the first character listed in the range, it can\u2019t possibly indicate a range, so it will not be meta character in this case.<\/p>\n<h6>2.2.2. Negated character classes<\/h6>\n<p>If we use negation sign <code>( ^ )<\/code> in a character class then the class matches any character that <strong>isn\u2019t<\/strong> listed. e.g. <code>[^1-6]<\/code> matches a character that\u2019s not 1 through 6.<\/p>\n<h4>2.3. Matching Any Character with Dot<\/h4>\n<p>The metacharacter <code>' . '<\/code> is a shorthand for a character class that matches any character. Note that dots are not metacharacters when they are used within character classes. Within character class, it is a simple character only.<\/p>\n<p>For example, <code>06.24.2019<\/code> will match <code>06\/24\/2019<\/code> or <code>06-24-2019<\/code> or <code>06.24.2019<\/code>. But<br \/>\n<code>06[.]24[.]2019<\/code> will match only <code>06.24.2019<\/code>. <\/p>\n<h4>2.4. Matching Alternation &#8211; any one of several sub-expressions<\/h4>\n<p>Pipe symbol <code>'|'<\/code> allows you to combine multiple expressions into a single expression that matches any of the individual ones. <\/p>\n<p>For example, &#8220;Alex&#8221; and &#8220;Brian&#8221; are separate expressions, but <code>\"Alex|Brian\"<\/code> is one expression that matches either of both.<\/p>\n<p>Similar to dot, pipe is not metacharacter when it is used within character class. Within character class, it is a simple character only.<\/p>\n<p>For example, to match the words &#8220;First&#8221; or &#8220;1st&#8221;, we can write regex &#8211; &#8220;(First|1st)&#8221; or in shorthand <code>\"(Fir|1)st\"<\/code>.<\/p>\n<h2>3. Java Regex API<\/h2>\n<p>Java has inbuilt APIs (<code>java.util.regex<\/code>) to work with regular expressions. We do not need any 3rd party library to run regex against any string in Java.<\/p>\n<p>Java Regex API provides 1 interface and 3 classes :<\/p>\n<ul>\n<li><strong>Pattern<\/strong> &#8211; A regular expression, specified as a string, must first be compiled into an instance of this class. The resulting pattern can then be used to create a <code>Matcher<\/code> object that can match arbitrary character sequences against the regular expression.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nPattern p = Pattern.compile(&quot;abc&quot;);\r\nMatcher m = p.matcher(&quot;abcabcabcd&quot;);\r\nboolean b = m.matches(); \/\/true\r\n<\/pre>\n<\/li>\n<li><strong>Matcher<\/strong> &#8211; This class provides methods that perform match operations.<\/li>\n<li><strong>MatchResult (interface)<\/strong> &#8211; It is result of a match operation. It contains query methods used to determine the results of a match against a regular expression.<\/li>\n<li><strong>PatternSyntaxException<\/strong> &#8211; It is an unchecked exception thrown to indicate a syntax error in a regular-expression pattern.<\/li>\n<\/ul>\n<p>Look at these classes and important methods in more detail.<\/p>\n<h4>3.1. Pattern class<\/h4>\n<p>It represents the compiled representation of a regular expression. To use Java regex API, we must compile the regular expression to this class. <\/p>\n<p>After compilation, it&#8217;s instance can be used to create a <code>Matcher<\/code> object that can match lines\/strings against the regular expression.<\/p>\n<p>Note that many matchers can share the same pattern. State information during processing is kept inside <code>Matcher<\/code> instance.<\/p>\n<p>Instances of this class are <strong><a href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/\">immutable<\/a><\/strong> and are safe for use by multiple concurrent threads. <\/p>\n<ul>\n<li><strong>Predicate asPredicate()<\/strong> &#8211; Creates a <a href=\"https:\/\/howtodoinjava.com\/java8\/how-to-use-predicate-in-java-8\/\">Java 8 predicate<\/a> which can be used to match a string.<\/li>\n<li><strong>static Pattern compile(String regex)<\/strong> &#8211; It is used to compile the given regular expression into a pattern.<\/li>\n<li><strong>static Pattern compile(String regex, int flags)<\/strong> &#8211; It is used to compile the given regular expression into a pattern with the given flags.<\/li>\n<li><strong>int flags()<\/strong> &#8211; It is used to return this pattern\u2019s match flags.<\/li>\n<li><strong>Matcher matcher(CharSequence input)<\/strong> &#8211; It is used to create a matcher that will match the given input against this pattern.<\/li>\n<li><strong>static boolean matches(String regex, CharSequence input)<\/strong> &#8211; It is used to compile the given regular expression and attempts to match the given input against it.<\/li>\n<li><strong>String pattern()<\/strong> &#8211; It is used to return the regular expression from which this pattern was compiled.<\/li>\n<li><strong>static String quote(String s)<\/strong> &#8211; It is used to return a literal pattern String for the specified String.<\/li>\n<li><strong>String[] split(CharSequence input)<\/strong> &#8211; It is used to split the given input sequence around matches of this pattern.<\/li>\n<li><strong>String[] split(CharSequence input, int limit)<\/strong> &#8211; It is used to split the given input sequence around matches of this pattern.<\/li>\n<li><strong>Stream splitAsStream(CharSequence input)<\/strong> &#8211; Creates a <a href=\"https:\/\/howtodoinjava.com\/java\/stream\/java-streams-by-examples\/\">stream<\/a> from the given input sequence around matches of this pattern.<\/li>\n<\/ul>\n<h4>3.2. Matcher class<\/h4>\n<p>It is the main class that performs match operations on a string\/line by interpreting a <code>Pattern<\/code>. Once created, a matcher can be used to perform the different kinds of match operations.<\/p>\n<p>This class also defines methods for replacing matched sub-sequences with new strings whose contents can, if desired, be computed from the match result. <\/p>\n<p>Instances of the this class are <strong>not <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/what-is-thread-safety\/\">thread safe<\/a><\/strong>.<\/p>\n<ul>\n<li><strong>boolean find()<\/strong> &#8211; It is mainly used for searching multiple occurrences of the regular expressions in the text.<\/li>\n<li><strong>boolean find(int start)<\/strong> &#8211; It is used for searching occurrences of the regular expressions in the text starting from the given index.<\/li>\n<li><strong>int start()<\/strong> &#8211; It is used for getting the start index of a match that is being found using <code>find()<\/code> method.<\/li>\n<li><strong>int end()<\/strong> &#8211; It is used for getting the end index of a match that is being found using <code>find()<\/code> method. It returns index of character next to last matching character.<\/li>\n<li><strong>int groupCount()<\/strong> &#8211; It is used to find the total number of the matched subsequence.<\/li>\n<li><strong>String group()<\/strong> &#8211; It is used to find the matched subsequence.<\/li>\n<li><strong>boolean matches()<\/strong> &#8211; It is used to test whether the regular expression matches the pattern.<\/li>\n<li><strong>boolean lookingAt()<\/strong> &#8211; Attempts to match the input sequence, starting at the beginning of the region, against the pattern.<\/li>\n<li><strong>String quoteReplacement(String s)<\/strong> &#8211; Returns a literal replacement String for the specified String.<\/li>\n<li><strong>Matcher reset()<\/strong> &#8211; Resets this matcher.<\/li>\n<li><strong>MatchResult\ttoMatchResult()<\/strong> &#8211; Returns the match state of this matcher as a <code>MatchResult<\/code>.<\/li>\n<\/ul>\n<h2>4. Java Regex Examples<\/h2>\n<p>Read below given examples to understand the usage of regular expressions to solve these specific problems in applications.<\/p>\n<h4><a title=\"Java Regex : Validate Email Address\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-validate-email-address\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Email Address<\/a><\/h4>\n<p>Learn to match email addresses using regular expressions in java<\/p>\n<pre>^[a-zA-Z0-9_!#$%&amp;'*+\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$<\/pre>\n<h4><a title=\"How to build regex based password validator in java\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/how-to-build-regex-based-password-validator-in-java\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Password Validation<\/a><\/h4>\n<p>Learn to match passwords using regular expressions in java<\/p>\n<pre>((?=.*[a-z])(?=.*d)(?=.*[@#$%])(?=.*[A-Z]).{6,16})<\/pre>\n<h4><a title=\"Java Regex : Match Trademark Symbol\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-match-trademark-symbol\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Trademark Symbol<\/a><\/h4>\n<p>Learn to match trademark symbol using regular expressions in java<\/p>\n<pre>\\u2122<\/pre>\n<h4><a title=\"Java Regex : Match Any Currency Symbol\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-match-any-currency-symbol\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Any Currency Symbol<\/a><\/h4>\n<p>Learn to match currency symbol using regular expressions in java<\/p>\n<pre>\\\\p{Sc}<\/pre>\n<h4><a title=\"Java Regex : Match Any Character in \u201cGreek Extended\u201d or Greek script\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-match-any-character-in-greek-extended-or-greek-script\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Any Character in &#8220;Greek Extended&#8221; or Greek script<\/a><\/h4>\n<p>Learn to match character in greek extended and greek script using regular expressions in java<\/p>\n<pre>\\\\p{InGreek} and \\\\p{InGreekExtended}<\/pre>\n<h4><a title=\"Java Regex : Validate and Format North American Phone Numbers\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-validate-and-format-north-american-phone-numbers\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for North American Phone Numbers<\/a><\/h4>\n<p>Learn to match north american phone numbers using regular expressions in java<\/p>\n<pre>^\\\\(?([0-9]{3})\\\\)?[-.\\\\s]?([0-9]{3})[-.\\\\s]?([0-9]{4})$<\/pre>\n<h4><a title=\"Java Regex : Validate International Phone Numbers\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-validate-international-phone-numbers\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for International Phone Numbers<\/a><\/h4>\n<p>Learn to match international phone numbers using regular expressions in java<\/p>\n<pre>^\\+(?:[0-9] ?){6,14}[0-9]$<\/pre>\n<h4><a title=\"Java Regex : Date Format Validation\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-date-format-validation\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Date Formats<\/a><\/h4>\n<p>Learn to match date formats using regular expressions in java<\/p>\n<pre>^[0-3]?[0-9]\/[0-3]?[0-9]\/(?:[0-9]{2})?[0-9]{2}$<\/pre>\n<h4><a title=\"Java Regex : Validate Social Security Numbers (SSN)\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-validate-social-security-numbers-ssn\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Social Security Numbers (SSN)<\/a><\/h4>\n<p>Learn to match SSNs using regular expressions in java<\/p>\n<pre>^(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$<\/pre>\n<h4><a title=\"Java Regex : Validate International Standard Book Number (ISBNs)\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-validate-international-standard-book-number-isbns\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for International Standard Book Number (ISBNs)<\/a><\/h4>\n<p>Learn to match ISBNs using regular expressions in java<\/p>\n<pre>^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})\r\n[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)\r\n(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$<\/pre>\n<h4><a title=\"Java Regex : Validate US Postal Zip Codes\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/us-postal-zip-code-validation\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for US Postal Zip Codes<\/a><\/h4>\n<p>Learn to match US Postal Codes using regular expressions in java<\/p>\n<pre>^[0-9]{5}(?:-[0-9]{4})?$<\/pre>\n<h4><a title=\"Java Regex : Validate Canadian Postal Zip Codes\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/canada-postal-code-validation\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Canadian Postal Zip Codes<\/a><\/h4>\n<p>Learn to match Canadian Postal Codes using regular expressions in java<\/p>\n<pre>^(?!.*[DFIOQU])[A-VXY][0-9][A-Z] ?[0-9][A-Z][0-9]$<\/pre>\n<h4><a title=\"Java Regex : Validate U.K. Postal Codes (Postcodes)\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/uk-postcode-validation\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for U.K. Postal Codes (Postcodes)<\/a><\/h4>\n<p>Learn to match U.K. Postal Codes using regular expressions in java<\/p>\n<pre>^[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][ABD-HJLNP-UW-Z]{2}$<\/pre>\n<h4><a title=\"Java Regex : Validate Credit Card Numbers\" href=\"https:\/\/howtodoinjava.com\/java\/regex\/java-regex-validate-credit-card-numbers\/\" target=\"_blank\" rel=\"noopener noreferrer\">Regular Expression for Credit Card Numbers<\/a><\/h4>\n<p>Learn to match Credit Card Numbers using regular expressions in java<\/p>\n<pre>^(?:(?4[0-9]{12}(?:[0-9]{3})?)|\r\n\t\t(?5[1-5][0-9]{14})|\r\n\t\t(?6(?:011|5[0-9]{2})[0-9]{12})|\r\n\t\t(?3[47][0-9]{13})|\r\n\t\t(?3(?:0[0-5]|[68][0-9])?[0-9]{11})|\r\n\t\t(?(?:2131|1800|35[0-9]{3})[0-9]{11}))$<\/pre>\n<h4>More Regular Expression Examples<\/h4>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/regex\/start-end-of-string\/\">Match Start or End of String (Line Anchors)<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/regex\/match-any-set-of-characters\/\">Match any character or set of characters<\/a><\/p>\n<p>Drop me your questions related to this <strong>java regex tutorial<\/strong> in comments.<\/p>\n<p>Happy Learning !!<\/p>\n<p>References:<\/p>\n<p><a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/index.html?java\/util\/regex\/package-summary.html\">java.util.regex package<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>A regex is used as a search pattern for strings. Using regex, we can find either a single match or multiple matches as well. We can look for any king of match in a string e.g. a simple character, a fixed string or any complex pattern of characters such email, SSN or domain names. 1. &#8230; <a title=\"Java Regex Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-regular-expression-tutorials\/\" aria-label=\"More on Java Regex Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11413,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/regex-regular-expression.png",600,290,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/regex-regular-expression.png",150,73,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/regex-regular-expression.png",300,145,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/regex-regular-expression.png",600,290,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/regex-regular-expression.png",600,290,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/regex-regular-expression.png",600,290,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/regex-regular-expression.png",600,290,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/regex-regular-expression.png",120,58,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":3,"uagb_excerpt":"A regex is used as a search pattern for strings. Using regex, we can find either a single match or multiple matches as well. We can look for any king of match in a string e.g. a simple character, a fixed string or any complex pattern of characters such email, SSN or domain names. 1.&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/4305"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4305"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/4305\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11413"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4305"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}