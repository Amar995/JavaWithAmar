{"id":784,"date":"2018-02-20T10:11:09","date_gmt":"2018-02-20T04:41:09","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=784"},"modified":"2020-12-26T00:36:29","modified_gmt":"2020-12-25T19:06:29","slug":"junit-4","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/junit-4\/","title":{"rendered":"JUnit Tutorial"},"content":{"rendered":"<p><a title=\"junit\" href=\"https:\/\/junit.org\/junit5\/\">JUnit<\/a> is a unit testing framework for the Java programming language. JUnit has been important in the development of test-driven development, and is one of a family of unit testing frameworks. Its main use is to write repeatable tests for your application code units.<\/p>\n<h2>Installation<\/h2>\n<p>To include JUnit into your project, you need to include its dependency into classpath.<\/p>\n<ul>\n<li>\n<h4>JUnit Maven Dependency<\/h4>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;junit&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;junit&lt;\/artifactId&gt;\r\n    &lt;version&gt;4.12&lt;\/version&gt;\r\n&lt;\/dependency&gt;\r\n<\/pre>\n<\/li>\n<li>\n<h4>JUnit Gradle Dependency<\/h4>\n<\/li>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\ndependencies {\r\n  testCompile 'junit:junit:4.12'\r\n}\r\n<\/pre>\n<li>\n<h4>JUnit Jar File<\/h4>\n<p>Click the link to download <a href=\"http:\/\/central.maven.org\/maven2\/junit\/junit\/4.12\/junit-4.12.jar\">JUnit 4.12 jar file<\/a>.\n<\/li>\n<\/ul>\n<h2>JUnit Annotations<\/h2>\n<p>JUnit offers following annotations to write tests.<\/p>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th data-mtr-content=\"Annotation\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Annotation<\/div><\/th>\n<th data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Description<\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@Before<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The annotated method will be run before each test method in the test class.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@After<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The annotated method will be run after each test method in the test class.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@BeforeClass<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The annotated method will be run before all test methods in the test class. This method must be static.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@AfterClass<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The annotated method will be run after all test methods in the test class. This method must be static.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@Test<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">It is used to mark a method as junit test<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@Ignore<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">It is used to disable or ignore a test class or method from test suite.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@FixMethodOrder<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">This class allows the user to choose the order of execution of the methods within a test class.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@Rule<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Annotates fields that reference rules or methods that return a rule.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Annotation\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@ClassRule<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Annotates static fields that reference rules or methods that return them.<\/div><\/td>\n<\/tr>\n<\/table>\n<h2>Writing Tests in JUnit<\/h2>\n<p>In JUnit, test methods are marked with <code>@Test<\/code> annotation. To run the method, JUnit first constructs a fresh instance of the class then invokes the annotated method. Any exceptions thrown by the test will be reported by JUnit as a failure. If no exceptions are thrown, the test is assumed to have succeeded. <\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nimport java.util.ArrayList;\r\n\r\nimport org.junit.After;\r\nimport org.junit.AfterClass;\r\nimport org.junit.Before;\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\n\r\npublic class Example {\r\n\t@BeforeClass\r\n\tpublic static void setup() {\r\n\t}\r\n\r\n\t@Before\r\n\tpublic void setupThis() {\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void method() {\r\n\t\torg.junit.Assert.assertTrue(new ArrayList().isEmpty());\r\n\t}\r\n\r\n\t@After\r\n\tpublic void tearThis() {\r\n\t}\r\n\r\n\t@AfterClass\r\n\tpublic static void tear() {\r\n\t}\r\n}\r\n<\/pre>\n<h2>Test Suites<\/h2>\n<p>Using <strong>JUnit test suites<\/strong>, you can run tests spread into multiple test classes.  In JUnit, both <code>@RunWith<\/code> and <code>@Suite<\/code> annotations are used to run the suite tests.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.runners.Suite;\r\n\r\n@RunWith(Suite.class)\r\n\r\n@Suite.SuiteClasses({\r\n   TestJunit1.class,\r\n   TestJunit2.class\r\n})\r\n\r\npublic class JunitTestSuite {   \r\n}  \r\n<\/pre>\n<h2>Assertions<\/h2>\n<p>Assertions help in validating the expected output with actual output of a testcase. All the assertions are in the <a href=\"https:\/\/junit.org\/junit4\/javadoc\/4.12\/org\/junit\/Assert.html\">org.junit.Assert<\/a> class. All assert methods are <code>static<\/code>, it enable better readable code.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nimport static org.junit.Assert.*;\r\n\r\n@Test\r\npublic void method() {\r\n\tassertTrue(new ArrayList().isEmpty());\r\n}\r\n<\/pre>\n<h2>Assumptions<\/h2>\n<p>Assumption indicate the conditions in which a test is meaningful. A failed assumption does not mean the code is broken, but that the test provides no useful information. Assume basically means &#8220;don&#8217;t run this test if these conditions don&#8217;t apply&#8221;. The default JUnit runner skips tests with failing assumptions.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nimport org.junit.Test;\r\nimport static org.junit.Assume.*;\r\n\r\n\r\npublic class Example {\r\n\tpublic class AppTest {\r\n\t    @Test\r\n\t    void testOnDev() \r\n\t    {\r\n\t        System.setProperty(&quot;ENV&quot;, &quot;DEV&quot;);\r\n\t        assumeTrue(&quot;DEV&quot;.equals(System.getProperty(&quot;ENV&quot;)));\r\n\t    }\r\n\t     \r\n\t    @Test\r\n\t    void testOnProd() \r\n\t    {\r\n\t        System.setProperty(&quot;ENV&quot;, &quot;PROD&quot;);\r\n\t        assumeFalse(&quot;DEV&quot;.equals(System.getProperty(&quot;ENV&quot;)));  \r\n\t    }\r\n\t}\r\n}\r\n<\/pre>\n<h2>Conclusion<\/h2>\n<p>JUnit is undoubtedly most used and robust unit testing framework in java technologies. It has easy learning curve and simple to follow coding practices. Most of IDEs have in-built support for junit tests execution within IDE itself and that make it more developer friendly.<\/p>\n<p>Reference:<\/p>\n<p><a title=\"junit documentation\" href=\"http:\/\/junit.sourceforge.net\/\"><strong>JUnit Documentation<\/strong><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>JUnit is a unit testing framework for the Java programming language. JUnit has been important in the development of test-driven development, and is one of a family of unit testing frameworks. Its main use is to write repeatable tests for your application code units. Installation To include JUnit into your project, you need to include &#8230; <a title=\"JUnit Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/junit-4\/\" aria-label=\"More on JUnit Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":11,"uagb_excerpt":"JUnit is a unit testing framework for the Java programming language. JUnit has been important in the development of test-driven development, and is one of a family of unit testing frameworks. Its main use is to write repeatable tests for your application code units. Installation To include JUnit into your project, you need to include&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/784"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=784"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/784\/revisions"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=784"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}