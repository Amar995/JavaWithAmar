{"id":2654,"date":"2013-07-06T16:13:19","date_gmt":"2013-07-06T10:43:19","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=2654"},"modified":"2020-12-26T00:31:36","modified_gmt":"2020-12-25T19:01:36","slug":"java-best-practices","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-best-practices\/","title":{"rendered":"Java Best Practices Guide"},"content":{"rendered":"<p>A good programmer is one who write programs (not just code). It means writing the code units which are independent enough to be re-used in multiple ways, and still they remain robust.<\/p>\n<p>So let&#8217;s start identifying and learning some java best practices which can transform any code into the programs.<\/p>\n<h2>1. Java Design Best Practices<\/h2>\n<p>Following java best practices are mainly focused on system design time considerations. They are mainly useful for senior developers. Eventually, you will also be senior if not today. Why not better prepare?<\/p>\n<h4><a title=\"8 signs of bad unit test cases\" href=\"https:\/\/howtodoinjava.com\/best-practices\/8-signs-of-bad-unit-test-cases\/\">8 signs of bad unit test cases<\/a><\/h4>\n<p>Bad unit tests are reality and everyone who does code review, face it occasionally (may be regularly). So what constitute a bad test case? How to identify bad test cases?<\/p>\n<h4><a title=\"5 class design principles [S.O.L.I.D.] in java\" href=\"https:\/\/howtodoinjava.com\/best-practices\/solid-principles\/\">5 class design principles [S.O.L.I.D.] in java<\/a><\/h4>\n<p>5 most recommended design principles, you should keep in mind, while writing your classes. These design principles are called SOLID, in short.<\/p>\n<h4><a title=\"Unit testing best practices : Junit Reference guide\" href=\"https:\/\/howtodoinjava.com\/best-practices\/unit-testing-best-practices-junit-reference-guide\/\">Unit testing best practices<\/a><\/h4>\n<p>It\u2019s overwhelmingly easy to write bad unit tests that add very little value to a project while inflating the cost of code changes astronomically. Learn how to write them correctly.<\/p>\n<h4><a title=\"Best practices for Exception handling\" href=\"https:\/\/howtodoinjava.com\/java\/exception-handling\/best-practices-for-for-exception-handling\/\">A new approach for exception handling<\/a><\/h4>\n<p>A new approach uses static inner classes for every new exceptional scenario. Worth reading for future software designers.<\/p>\n<h4><a title=\"Java exception handling best practices\" href=\"https:\/\/howtodoinjava.com\/best-practices\/java-exception-handling-best-practices\/\">Java exception handling using inner classes<\/a><\/h4>\n<p>Covering some well-known and some little known practices which you must consider while handling exceptions in your next java programming assignment.<\/p>\n<h4><a title=\"Java executor framework tutorial and best practices\" href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/executor-framework-tutorial\/\">Java executor framework best practices<\/a><\/h4>\n<p>Some best practices which you need to keep in mind while designing your next multi-threaded application.<\/p>\n<h4><a title=\"5 Reasons You Should Consider Migrating Your Legacy Systems\" href=\"https:\/\/howtodoinjava.com\/resources\/5-reasons-you-should-consider-migrating-your-legacy-systems\/\">5 Reasons You Should Consider Migrating Your Legacy Systems<\/a><\/h4>\n<p>There are several reasons for migrating from old legacy systems to new advanced systems. Here are 5 of them.<\/p>\n<h4><a title=\"13 best practices for writing spring configuration files\" href=\"https:\/\/howtodoinjava.com\/best-practices\/13-best-practices-for-writing-spring-configuration-files\/\">13 best practices for writing spring configuration files<\/a><\/h4>\n<p>13 best practices for writing highly maintainable spring XML configurations.<\/p>\n<h2>2. Java Coding Best Practices<\/h2>\n<p>Following java best practices are focused on considerations to make while you hit the keyboard and start typing actual program. They are mainly useful for developers\/programmers at all levels.<\/p>\n<h4>Generating secure password hash (MD5\/SHA) in production<\/h4>\n<p>User provided password are generally very weak and easy to guess. There are many hashing algorithms in java, which can prove really effective for password security for your applications and your users.<\/p>\n<h4><a title=\"A mini guide for implementing serializable interface in java\" href=\"https:\/\/howtodoinjava.com\/java\/serialization\/java-serialization\/\">Serializable interface guide<\/a><\/h4>\n<p>We all know what Serializable interface does. But do we really know, what changes in your class can break your design?<\/p>\n<h4><a title=\"Object initialization best practices : Internal caching in wrapper classes\" href=\"https:\/\/howtodoinjava.com\/java-examples\/internal-cache-wrapper-classes\/\">Object initialization best practices<\/a><\/h4>\n<p>Creating new objects is always an expensive process. Let&#8217;s learn how java utilize object pooling to solve this problem.<\/p>\n<h4><a title=\"How to make a java class immutable\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/\">How to make a java class immutable<\/a><\/h4>\n<p>An immutable class is one whose state can not be changed once created. There are certain guidelines to create an class immutable. Let&#8217;s learn them.<\/p>\n<h4><a title=\"How to reload log4j levels on runtime\" href=\"https:\/\/howtodoinjava.com\/log4j\/how-to-reload-log4j-levels-on-runtime\/\">Consider reloading log4j levels on runtime<\/a><\/h4>\n<p>Learn how to use WatchService to reload your logging configuration at runtime. Use them to reload other configurations as well.<\/p>\n<h4><a title=\"How to override toString() effectively with ToStringBuilder\" href=\"https:\/\/howtodoinjava.com\/java\/library\/how-to-override-tostring-effectively-with-tostringbuilder\/\">Override toString() effectively with ToStringBuilder<\/a><\/h4>\n<p>ToStringBuilder is a utility class provided by apache commons lang library. Learn to use it to write highly customized toString() methods.<\/p>\n<h4><a title=\"Use array instead of Vector.elementAt() inside any loop for better performance\" href=\"https:\/\/howtodoinjava.com\/java\/collections\/use-array-instead-of-vector-elementat-inside-any-loop-for-better-performance\/\">Use array instead of Vector.elementAt() inside any loop<\/a><\/h4>\n<p>Vector doesn\u2019t need additional synchronization while accessed from multiple threads but it degrades its performance for the same reason. Measure it&#8217;s impact.<\/p>\n<h4><a title=\"Always use length() instead of equals() to check empty string in java\" href=\"https:\/\/howtodoinjava.com\/java\/string\/always-use-length-instead-of-equals-to-check-empty-string-in-java\/\">Always use length() instead of equals() to check empty string in java<\/a><\/h4>\n<p>Best way to check if string is empty or not is to use length() method and not equals(). Why? Let&#8217;s do some reasoning.<\/p>\n<h2>3. Java Performance Best Practices<\/h2>\n<p style=\"padding-right: 100px; text-align: left;\">Following java best practices can boost the performance of your java application and take it to next level. Learn them hard and keep in mind always.<\/p>\n<h4><a title=\"Performance comparison of different ways to iterate over HashMap\" href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/performance-comparison-of-different-ways-to-iterate-over-hashmap\/\">Performance comparison of different ways to iterate over HashMap<\/a><\/h4>\n<p>Let&#8217;s see different ways to iterate over HashMap and see the differences in terms of performance they can bring.<\/p>\n<h4><a title=\"Performance comparison of different for loops in java\" href=\"https:\/\/howtodoinjava.com\/java\/collections\/performance-comparison-of-different-for-loops-in-java\/\">Performance comparison of different for loops in java<\/a><\/h4>\n<p>Let&#8217;s compare performance of different for loops as well. They are everywhere in any program.<\/p>\n<h4><a title=\"Best practices to improve JDBC performance\" href=\"https:\/\/howtodoinjava.com\/java\/jdbc\/best-practices-to-improve-jdbc-performance\/\">Best practices to improve JDBC performance<\/a><\/h4>\n<p>Database access is major part of any application. If you are using simple JDBC then this one is for you.<\/p>\n<p>More to come &#8230;<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A good programmer is one who write programs (not just code). It means writing the code units which are independent enough to be re-used in multiple ways, and still they remain robust. So let&#8217;s start identifying and learning some java best practices which can transform any code into the programs. 1. Java Design Best Practices &#8230; <a title=\"Java Best Practices Guide\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-best-practices\/\" aria-label=\"More on Java Best Practices Guide\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":2655,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":13,"uagb_excerpt":"A good programmer is one who write programs (not just code). It means writing the code units which are independent enough to be re-used in multiple ways, and still they remain robust. So let&#8217;s start identifying and learning some java best practices which can transform any code into the programs. 1. Java Design Best Practices&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/2654"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=2654"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/2654\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=2654"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}