{"id":11383,"date":"2018-09-17T16:14:52","date_gmt":"2018-09-17T10:44:52","guid":{"rendered":"https:\/\/howtodoinjava.com\/?page_id=11383"},"modified":"2020-12-26T00:37:08","modified_gmt":"2020-12-25T19:07:08","slug":"java-arraylist","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-arraylist\/","title":{"rendered":"Java ArrayList"},"content":{"rendered":"<p>An <strong>ArrayList in Java<\/strong> represents a resizable list of objects. We can add, remove, find, sort and replace elements in this list. <\/p>\n<p><code>ArrayList<\/code> is the part of the <a href=\"https:\/\/howtodoinjava.com\/java-collections\/\">collections framework<\/a>. It extends <code>AbstractList<\/code> which implements <code>List<\/code> interface. The <code>List<\/code> extends <code>Collection<\/code> and <code>Iterable<\/code> interfaces in hierarchical order.<\/p>\n<figure id=\"attachment_11932\" aria-describedby=\"caption-attachment-11932\" style=\"width: 490px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/ArrayList.jpg\" alt=\"ArrayList Hierarchy\" width=\"500\" height=\"217\" class=\"size-full wp-image-11932\" \/><figcaption id=\"caption-attachment-11932\" class=\"wp-caption-text\">ArrayList Hierarchy<\/figcaption><\/figure>\n<h2>1. ArrayList Features<\/h2>\n<p><code>ArrayList<\/code> has the following features &#8211;<\/p>\n<ol>\n<li><strong>Ordered<\/strong> &#8211; Elements in arraylist preserve their ordering which is by default the order in which they were added to the list.<\/li>\n<li><strong>Index based<\/strong> &#8211; Elements can be randomly accessed using index positions. Index start with <code>'0'<\/code>.<\/li>\n<li><strong>Dynamic resizing<\/strong> &#8211; <code>ArrayList<\/code> grows dynamically when more elements needs to be added than it&#8217;s current size.<\/li>\n<li><strong>Non synchronized<\/strong> &#8211; <code>ArrayList<\/code> is not synchronized, by default. Programmer needs to use <code>synchronized<\/code> keyword appropiately or simply use <strong>Vector<\/strong> class.<\/li>\n<li><strong>Duplicates allowed<\/strong> &#8211; We can add duplicate elements in arraylist. It is not possible in sets.<\/li>\n<\/ol>\n<h2>2. How ArrayList Works?<\/h2>\n<p><code>ArrayList<\/code> class is implemented with a backing array. The elements added or removed from arraylist are actually modified in the backing array. All <code>ArrayList<\/code> methods access this backing array and get\/set elements in the same array.<\/p>\n<p><code>ArrayList<\/code> can be seen as <em>resizable-array implementation<\/em> in Java.<\/p>\n<pre class=\"brush: java; title: ArrayList.java; notranslate\" title=\"ArrayList.java\">\r\npublic class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;\r\n        implements List&lt;E&gt;, RandomAccess, \r\n        \t\t   Cloneable, java.io.Serializable\r\n{\r\n\ttransient Object[] elementData;\t\t\/\/backing array\r\n\tprivate int size;\t\t\t\t\t\/\/array or list size\r\n\r\n\t\/\/more code\r\n}\r\n<\/pre>\n<h3>3. Java Array vs ArrayList<\/h3>\n<p>An array is fixed size data structure where the size has to be declared during initialization. Once the size of an array is declared, it is not possible to resize the array without creating a new array.<\/p>\n<pre class=\"brush: java; title: Array; notranslate\" title=\"Array\">\r\nInteger[] numArray = new Integer[5];\r\n<\/pre>\n<p>The <code>ArrayList<\/code> offers to remove this sizing limitation. An <code>ArrayList<\/code> can be created with any initial size (default 16), and when we add more items, the size of the arraylist grows dynamically without any intervention by the programmer.<\/p>\n<pre class=\"brush: java; title: ArrayList; notranslate\" title=\"ArrayList\">\r\nArrayList&lt;Integer&gt; numList = new ArrayList&lt;&gt;();\r\n<\/pre>\n<blockquote><p>Many people refer to <code>ArrayList<\/code> as <em>dynamic array<\/em>.<\/p><\/blockquote>\n<h2>4. Creating an ArrayList<\/h2>\n<h4>4.1. How to create an <code>ArrayList<\/code><\/h4>\n<p>To create <code>ArrayList<\/code>, we can call one of its constructors. <\/p>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th data-mtr-content=\"Constructor\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Constructor<\/div><\/th>\n<th data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Description<\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Constructor\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">ArrayList()<\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">It is default constructor. It creates an empty arraylist with initial capacity 16.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Constructor\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">ArrayList(int capacity)<\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">It creates an empty arraylist with the given initial <code>capacity<\/code>.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Constructor\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">ArrayList(Collection&lt;? extends E&gt; c)<\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">It creates an arraylist that is initialized with the elements of the collection <code>c<\/code>.<\/div><\/td>\n<\/tr>\n<\/table>\n<p>Given below program shows how to declare and initialize an arraylist in Java.<\/p>\n<pre class=\"brush: java; title: Create arraylist; notranslate\" title=\"Create arraylist\">\r\nArrayList list = new ArrayList();\r\n\r\nList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(6); \r\n\r\nCollection setOfElements = ...;\r\nList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(setOfElements); \r\n<\/pre>\n<h4>4.2. Generic <code>ArrayList<\/code><\/h4>\n<p>A generic arraylist clearly mentions the type of objects, it will store. It helps in avoiding a lot of defects caused by incorrect typecasting.<\/p>\n<pre class=\"brush: java; title: Create arraylist; notranslate\" title=\"Create arraylist\">\r\n\/\/Non-generic arraylist - NOT RECOMMENDED !!\r\nArrayList list = new ArrayList();\r\n\r\n\/\/Generic Arraylist with default capacity\r\nList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(); \r\n\r\n\/\/Generic Arraylist with the given capacity\r\nList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(6); \r\n\r\n\/\/Generic Arraylist initialized with another collection\r\nList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;( Arrays.asList(1,2,3,4,5) ); \r\n<\/pre>\n<h4>4.3. <code>ArrayList<\/code> of primitive types<\/h4>\n<p>In array list, we are supposed to add only objects. But in case, we are required to add primitive data types such as <code>int<\/code>, <code>float<\/code> etc, we can use their wrapper classes for providing type information during arraylist initialization.<\/p>\n<p>When we add the <code>int<\/code> or <code>float<\/code> value to array list, values are automatically upcasted.<\/p>\n<p>In given example, we have created an array list of <code>Integer<\/code> values. When we add <code>int<\/code> value <code>1<\/code>, it is automatically converted to <code>new Integer(1)<\/code>.<\/p>\n<pre class=\"brush: java; title: Store primitives in Arraylist; notranslate\" title=\"Store primitives in Arraylist\">\r\nList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(6); \r\n\r\nnumbers.add(1); \/\/ This runs fine\r\n<\/pre>\n<h4>4.4. Create and initialize <code>ArrayList<\/code> in single line<\/h4>\n<p>Generally, creating an arraylist in multi-step process. In first step, we create empty array list. In later steps, we populate the list with elements &#8211; one by one.<\/p>\n<p>Using <code>Arrays.asList()<\/code> and constructor <code>ArrayList(collection)<\/code>, we can combine these steps in single statement.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">ArrayList&lt;String&gt; charList = new ArrayList&lt;&gt;(Arrays.asList((&quot;A&quot;, &quot;B&quot;, &quot;C&quot;));<\/pre>\n<h2>5. Get element from ArrayList<\/h2>\n<p>To get an element from the <code>ArrayList<\/code>, we have two ways.<\/p>\n<h4>5.1. get(index)<\/h4>\n<p>If we know the index location in advance, then we can call the <code>get(index)<\/code> which returns the <em>element<\/em> present at <code>index<\/code> location.<\/p>\n<p>Please remember that <code>indexes<\/code> start with zero.<\/p>\n<pre class=\"brush: java; title: get method; notranslate\" title=\"get method\">\r\nArrayList&lt;String&gt; alphabetsList = new ArrayList&lt;&gt;(Arrays.asList((&quot;A&quot;, &quot;B&quot;, &quot;C&quot;));\r\n\r\nString aChar = alphabetsList.get(0);\t\/\/ A\r\n<\/pre>\n<h4>5.2. iterator.next()<\/h4>\n<p>Use <code>iterator()<\/code> or <code>listIterator()<\/code> to get the reference of <code>Iterator<\/code> instance. This iterator can be used to iterate the elements in the arraylist.<\/p>\n<p>The <code>next()<\/code> method returns the element at current <code>index<\/code> location and increment the index count by one. Call <code>hasNext()<\/code> method to check if there are more elements in the list to iterate.<\/p>\n<pre class=\"brush: java; title: Iterate arraylist; notranslate\" title=\"Iterate arraylist\">\r\nArrayList&lt;Integer&gt; digits = new ArrayList&lt;&gt;(Arrays.asList(1,2,3,4,5,6));\r\n\r\nIterator&lt;Integer&gt; iterator = digits.iterator();\r\n\r\nwhile(iterator.hasNext()) \r\n{\r\n\tSystem.out.println(iterator.next());\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n<\/pre>\n<h2>6. Iterating over an ArrayList<\/h2>\n<h4>6.1. Iterator<\/h4>\n<p>Java example to iterate over an arraylist using the Iterator.<\/p>\n<pre class=\"brush: java; title: Iterate arraylist with Iterator interface; notranslate\" title=\"Iterate arraylist with Iterator interface\">\r\nArrayList&lt;Integer&gt; digits = new ArrayList&lt;&gt;(Arrays.asList(1,2,3,4,5,6));\r\n\r\nIterator&lt;Integer&gt; iterator = digits.iterator();\r\n\r\nwhile(iterator.hasNext()) \r\n{\r\n\tSystem.out.println(iterator.next());\r\n}\r\n<\/pre>\n<h4>6.2. For loop<\/h4>\n<p>Java example to iterate over an arraylist using for loop. When using for loop, we need to get the current element using the current index counter.<\/p>\n<pre class=\"brush: java; title: Iterate arraylist with for loop; notranslate\" title=\"Iterate arraylist with for loop\">\r\nArrayList&lt;Integer&gt; digits = new ArrayList&lt;&gt;(Arrays.asList(1,2,3,4,5,6));\r\n\r\nfor(int i = 0; i &lt; digits.size(); i++) \r\n{\r\n    System.out.print(digits.get(i));\r\n}\r\n<\/pre>\n<h4>6.3. forEach loop<\/h4>\n<p><code><a href=\"http:\/\/howtodoinjava.com\/java\/flow-control\/enhanced-for-each-loop-in-java\/\">forEach loop<\/a><\/code> works pretty much same to simple for loop. The only difference is that the JVM manages the counter initialization and increment. We get the next element in each iteration in the loop.<\/p>\n<pre class=\"brush: java; title: Iterate arraylist with forEach loop; notranslate\" title=\"Iterate arraylist with forEach loop\">\r\nArrayList&lt;Integer&gt; digits = new ArrayList&lt;&gt;(Arrays.asList(1,2,3,4,5,6));\r\n\r\nfor(Integer d : digits) \r\n{\r\n    System.out.print(d);\r\n}\r\n<\/pre>\n<h2>7. Finding the length of the ArrayList<\/h2>\n<p>To get the length of the arraylist, we use the <code>size()<\/code> method.<\/p>\n<pre class=\"brush: java; title: Size of array list; notranslate\" title=\"Size of array list\">\r\nArrayList&lt;Integer&gt; digits = new ArrayList&lt;&gt;(Arrays.asList(1,2,3,4,5,6));\r\n\r\nSystem.out.print( digits.size() );\t\t\/\/ 6\r\n<\/pre>\n<h2>8. Sorting an ArrayList<\/h2>\n<p>ArrayList <code>sort()<\/code> method sorts the list according to the order induced by the specified <code>Comparator<\/code> instance. All elements in the list must must be mutually <code>Comparable<\/code>.<\/p>\n<pre class=\"brush: java; title: AgeSorter.java; notranslate\" title=\"AgeSorter.java\">\r\npublic class AgeSorter implements Comparator&lt;Employee&gt; \r\n{\r\n    @Override\r\n    public int compare(Employee e1, Employee e2) {\r\n        \/\/comparison logic\r\n    }\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: AgeSorter.java; notranslate\" title=\"AgeSorter.java\">\r\nArrayList&lt;Employee&gt; employees = new ArrayList&lt;&gt;();\r\n\r\nemployees.add(new Employee(...));\r\nemployees.add(new Employee(...));\r\nemployees.add(new Employee(...));\r\n\r\nemployees.sort(new NameSorter());\r\n<\/pre>\n<h2>9. ArrayList Methods<\/h2>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-add-example\/\">ArrayList add() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-addall-method-example\/\">ArrayList addAll() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/clear-empty-arraylist\/\">ArrayList clear() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-clone-deep-copy\/\">ArrayList clone() &#8211; How to clone an ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-contains\/\">ArrayList contains() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-ensurecapacity-method\/\">ArrayList ensureCapacity() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-foreach\/\">ArrayList forEach() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-get-method-example\/\">ArrayList get() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-indexof-method\/\">ArrayList indexOf() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-lastindexof-example\/\">ArrayList lastIndexOf() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-listiterator\/\">ArrayList listIterator() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-remove-example\/\">ArrayList remove() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-removeall\/\">ArrayList removeAll() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-retainall-example\/\">ArrayList retainAll() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-replaceall-example\/\">ArrayList replaceAll() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-removeif\/\">ArrayList removeIf() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/sort\/comparable-comparator\/\">ArrayList sort() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-spliterator-example\/\">ArrayList spliterator() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-sublist\/\">ArrayList subList() method example<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/convert-arraylist-to-array\/\">ArrayList toArray() method example<\/a><\/p>\n<h2>10. Java ArrayList Examples<\/h2>\n<h4>10.1. Create arraylist<\/h4>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/initialize-arraylist\/\" rel=\"noopener noreferrer\" target=\"_blank\">Initialize ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/iterate-through-objects\/\" rel=\"noopener noreferrer\" target=\"_blank\">Iterate through ArrayList<\/a><\/p>\n<h4>10.2. Add elements and remove elements<\/h4>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/add-replace-element-at-index\/\" rel=\"noopener noreferrer\" target=\"_blank\">Add element at particular index of ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/remove-element-from-arraylist\/\">Remove element from ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/add-multiple-elements-arraylist\/\">Add multiple items to ArrayList<\/a><\/p>\n<h4>10.3. Sort arraylist<\/h4>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/sort\/comparable-comparator\/\">Sort ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/sort\/comparable-comparator\/\">Sort ArrayList of Objects using Comparable and Comparator<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/sort\/groupby-sort-multiple-comparators\/\">Sort ArrayList of objects by multiple fields<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/sort\/collections-sort\/\">Sort ArrayList of objects using Collections.sort() method<\/a><\/p>\n<h4>10.4. Get\/Search<\/h4>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-sublist\/\">Get Sub List of ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-lastindexof-example\/\">Find the index of last index of the element in the ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-indexof-method\/\">Get the index of the element in the ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-get-method-example\/\">Get element from ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-contains\/\">Check if element exists in ArrayList<\/a><\/p>\n<h4>10.5. Working with ArrayList<\/h4>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/compare-two-arraylists\/\">Compare two ArrayLists<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/synchronize-arraylist\/\">Synchronize ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/swap-two-elements-arraylist\/\">Swap two elements in ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/serialize-deserialize-arraylist\/\">Serialize ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/merge-arraylists\/\">Join two ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/empty-clear-arraylist\/\">Make ArrayList Empty<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/check-arraylist-empty\/\">Check whether ArrayList is empty or not<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/replace-element-arraylist\/\">Replace the value of existing element in ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/remove-duplicate-elements\/\">Remove duplicate elements in ArrayList<\/a><\/p>\n<h4>10.6. Conversions<\/h4>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/convert-linkedlist-arraylist\/\">Convert LinkedList to ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/convert-vector-to-arraylist\/\">Convert Vector to ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-to-array\/\">Convert ArrayList to String Array<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/array-to-arraylist\/\">Convert Array to ArrayList<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/hashset-to-arraylist\/\">Convert HashSet to ArrayList<\/a><\/p>\n<h4>10.7. Difference between collections<\/h4>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/arraylist-vs-vector\/\">ArrayList vs Vector<\/a><br \/>\n<a href=\"https:\/\/howtodoinjava.com\/java\/collections\/arraylist\/linkedlist-vs-arraylist\/\">ArrayList vs LinkedList<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>An ArrayList in Java represents a resizable list of objects. We can add, remove, find, sort and replace elements in this list. ArrayList is the part of the collections framework. It extends AbstractList which implements List interface. The List extends Collection and Iterable interfaces in hierarchical order. 1. ArrayList Features ArrayList has the following features &#8230; <a title=\"Java ArrayList\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-arraylist\/\" aria-label=\"More on Java ArrayList\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11660,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/09\/ArrayList.png",400,250,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/09\/ArrayList.png",150,94,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/09\/ArrayList.png",300,188,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/09\/ArrayList.png",400,250,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/09\/ArrayList.png",400,250,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/09\/ArrayList.png",400,250,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/09\/ArrayList.png",400,250,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/09\/ArrayList.png",120,75,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"An ArrayList in Java represents a resizable list of objects. We can add, remove, find, sort and replace elements in this list. ArrayList is the part of the collections framework. It extends AbstractList which implements List interface. The List extends Collection and Iterable interfaces in hierarchical order. 1. ArrayList Features ArrayList has the following features&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/11383"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=11383"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/11383\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11660"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=11383"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}