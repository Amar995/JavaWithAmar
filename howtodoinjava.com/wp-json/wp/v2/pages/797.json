{"id":797,"date":"2013-02-20T10:17:11","date_gmt":"2013-02-20T10:17:11","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=797"},"modified":"2020-12-26T00:36:32","modified_gmt":"2020-12-25T19:06:32","slug":"restful-web-service","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/restful-web-service\/","title":{"rendered":"JAX-RS 2.0 Tutorials"},"content":{"rendered":"<p><strong>JAX-RS 2.0<\/strong> is a framework designed to help you write RESTful applications both on the client and server side. Below tutorials are build using <strong>RESTEasy <\/strong>framework.<\/p>\n<p>Get more <strong>JAX-RS tutorials<\/strong> on <a href=\"https:\/\/howtodoinjava.com\/jersey-jax-rs-tutorials\/\" target=\"_blank\" rel=\"noopener noreferrer\">Jersey<\/a> and <a href=\"https:\/\/howtodoinjava.com\/dropwizard-tutorials\/\" target=\"_blank\" rel=\"noopener noreferrer\">Dropwizard<\/a> pages.<\/p>\n<h2>Hello world application<\/h2>\n<h4><a title=\"RESTEasy + JBOSS 7 Hello world application\" href=\"\/\/howtodoinjava.com\/resteasy\/resteasy-jboss-7-hello-world-application\/\">RESTEasy + JBOSS 7 Hello world application<\/a><\/h4>\n<p>Learn about most basic configuration needed to build a RESTful web application in JBOSS AS7.<\/p>\n<h4><a title=\"RESTEasy + Tomcat hello world application\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-tomcat-hello-world-application\/\">RESTEasy + Tomcat Hello world application<\/a><\/h4>\n<p>Learn about minimum configuration needed to build a RESTful web application using Tomcat server.<\/p>\n<h2>REST clients<\/h2>\n<h4><a title=\"testful client using java.net package\" href=\"https:\/\/howtodoinjava.com\/resteasy\/restful-webservices-client-using-java-net-package\/\">RESTful client using java.net package<\/a><\/h4>\n<p>Build restful client for consuming the restful apis using <code>java.net package<\/code>.<\/p>\n<h4><a title=\"RESTEasy client for consuming REST APIs\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-client-for-consuming-rest-apis\/\">RESTEasy client example<\/a><\/h4>\n<p>Build restful client for consuming the restful apis using inbuilt jax-rs capabilities.<\/p>\n<h4><a title=\"JAX-RS RESTful client using apache httpclient\" href=\"https:\/\/howtodoinjava.com\/java\/library\/jaxrs-client-httpclient-get-post\/\">Apache HttpClient example<\/a><\/h4>\n<p>Build restful client for consuming the restful apis using apache http client framework.<\/p>\n<h4><a title=\"RESTEasy javascript\/ajax client demo\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-javascriptajax-client-demo\/\">Ajax\/ JavaScript client Example<\/a><\/h4>\n<p>Learn to build resteasy ajax client<\/p>\n<h4><a title=\"JAX-RS 2.0 RESTEasy 3.0.2.Final Client API example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/jax-rs-2-0-resteasy-3-0-2-final-client-api-example\/\">JAX-RS 2.0 client API example<\/a><\/h4>\n<p>JAX-RS 2.0 has brought lots of improvement over previous version. One of major improvement is client API which was completely missing in JAX-RS 1.0. Learn to use in this tutorial.<\/p>\n<h2>XML\/JSON support<\/h2>\n<h4><a title=\"RESTEasy + JAXB xml example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-jaxb-xml-example\/\">RESTEasy + JAXB xml example<\/a><\/h4>\n<p>Learn to marshal model objects in xml documents using JAXB and send them to client as server response<\/p>\n<h4><a title=\"RESTEasy + Jettison json example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-jettison-json-example\/\">RESTEasy + Jettison json example<\/a><\/h4>\n<p>Learn to marshal model objects in json documents using Jettison and send them to client as server response<\/p>\n<h4><a title=\"RESTEasy + Jackson JSON example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-jackson-json-example\/\">RESTEasy + Jackson JSON example<\/a><\/h4>\n<p>Learn to marshal model objects in json documents using Jackson and send them to client as server response<\/p>\n<h2>File Download\/Upload<\/h2>\n<h4><a title=\"RESTEasy + File download example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-file-download-example\/\">RESTEasy + File download example<\/a><\/h4>\n<p>This example shows the configuration and code needed to download various file formats using RESTful API<\/p>\n<h4><a title=\"JAX-RS RESTEasy file upload + httpclient example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/jax-rs-resteasy-file-upload-httpclient-example\/\">RESTEasy + File Upload + HttpClient pure java client example<\/a><\/h4>\n<p>Upload the file to server using pure java client<\/p>\n<h4><a title=\"JAX-RS RESTEasy file upload + html form example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/jax-rs-resteasy-file-upload-html-form-example\/\">RESTEasy + File Upload + HTML form example<\/a><\/h4>\n<p>Upload the file to server using html form submission<\/p>\n<h2>Annotations usage and examples<\/h2>\n<h4><a title=\"@Path example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/jaxrs-path-uri-matching\/\">JAX-RS @Path Regex based URI matching<\/a><\/h4>\n<p>Example of API path matching using @Path annotation. Some regular expression examples are also included.<\/p>\n<h2>Hateoas Implementation<\/h2>\n<h4><a title=\"How to write RESTful web services using jax-rs and jaxb in java [HATEOAS\u00a0example]\" href=\"https:\/\/howtodoinjava.com\/resteasy\/writing-restful-webservices-with-hateoas-using-jax-rs-and-jaxb-in-java\/\">RESTful web services HATEOAS example<\/a><\/h4>\n<p>Learn making RESTful web services with HATEOAS links enabled<\/p>\n<h2>JAX-RS Security<\/h2>\n<h4><a title=\"JAX-RS RESTEasy basic authentication and authorization tutorial\" href=\"https:\/\/howtodoinjava.com\/resteasy\/jax-rs-resteasy-basic-authentication-and-authorization-tutorial\/\">Basic authentication and authorization example using PreProcessorInterceptor<\/a><\/h4>\n<p>Implement security using <code>PreProcessorInterceptor<\/code>.<\/p>\n<h4><a title=\"JAX-RS 2.0 RESTEasy 3.0.2.Final security tutorial\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-containerrequestfilter-example\/\">JAX-RS 2.0 RESTEasy 3.0.2.Final security example using ContainerRequestFilter<\/a><\/h4>\n<p><code>PreProcessorInterceptor<\/code> and <code>PostProcessorInterceptor<\/code> are deprecated now. So from now on, use <code>ContainerRequestFilter<\/code> and <code>ContainerReponseFilter<\/code>. Learn to use them in this tutorial.<\/p>\n<h4><a href=\"https:\/\/howtodoinjava.com\/java\/java-security\/rest-api-security-guide\/\">REST Security Guide<\/a><\/h4>\n<p>Knowledge of securing RESTful Web Services is as much important as to write them. It\u2019s very important to write secure APIs to protect the business. But before starting to secure RESTful APIs, let\u2019s understand what are our options as developers? What will be good fit for our usecase?<\/p>\n<h2>Request Validation<\/h2>\n<h4><a title=\"JAX-RS custom validation example using ajax\" href=\"https:\/\/howtodoinjava.com\/resteasy\/jax-rs-custom-validation-example-using-ajax\/\">Custom html form validation using ajax<\/a><\/h4>\n<p>Build ajax powered html form validation functionality for your web page<\/p>\n<h4><a title=\"RESTEasy bean validation using hibernate validator provider\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-bean-validation-using-hibernate-validator-provider\/\">Hibernate validator provider demo<\/a><\/h4>\n<p>Integrate hibernate bean validation capability to your RESTEasy APIs<\/p>\n<h2>Various Integrations<\/h2>\n<h4><a title=\"\" href=\"https:\/\/howtodoinjava.com\/spring-rest\/how-to-write-restful-webservices-using-spring-3-mvc\/\">RESTful web services using Spring 3 mvc<\/a><\/h4>\n<p>Learn how to write RESTful web services using Spring 3 framework<\/p>\n<h2>Logging Support<\/h2>\n<h4><a title=\"RESTEasy + Tomcat 7 + Log4j logging example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-tomcat-7-log4j-logging-example\/\">RESTEasy + Log4j example<\/a><\/h4>\n<p>Demo configuration to add log4j logging support in RESTEasy application<\/p>\n<h4><a title=\"RESTEasy + Tomcat 7 + SLF4J logging example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-tomcat-7-slf4j-logging-example\/\">RESTEasy + SLF4jexample<\/a><\/h4>\n<p>Demo configuration to add slf4j logging support in RESTEasy application<\/p>\n<h2>Best practices<\/h2>\n<h4><a title=\"Share context data with JAX-RS ResteasyProviderFactory\" href=\"https:\/\/howtodoinjava.com\/resteasy\/share-context-data-with-jax-rs-resteasyproviderfactory\/\">Share context data using ResteasyProviderFactory<\/a><\/h4>\n<p><code>ResteasyProviderFacory<\/code> can be proved very handy when you want to share some data in various layers of application without passing them as method parameters<\/p>\n<h4><a title=\"Exception handling in JAX-RS RESTEasy with ExceptionMapper\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-exceptionmapper-example\/\">Exception handling using custom exception mapper<\/a><\/h4>\n<p>Build custom exception mappers to handle application specific handling of various exceptions<\/p>\n<h4><a title=\"Enable gzip compression content encoding in RESTEasy\" href=\"https:\/\/howtodoinjava.com\/resteasy\/enable-gzip-compression-content-encoding-in-resteasy\/\">Enable gzip compression content encoding<\/a><\/h4>\n<p>JAX-RS Resteasy has automatic GZIP decompression support. Learn to use it.<\/p>\n<h4><a title=\"JAX-RS RESTEasy Cache control with ETag example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/jax-rs-resteasy-cache-control-with-etag-example\/\">JAX-RS RESTEasy Cache control with ETag example<\/a><\/h4>\n<p><strong>ETags<\/strong> or entity tags are useful HTTP headers which can help in building a super fast application by minimizing the server load on system. ETag is set to the response to the client so a client can use various control request headers such as <code>If-Match<\/code> and <code>If-None-Match<\/code> for conditional requests. <code>javax.ws.rs.core.Response.ResponseBuilder#tag(<\/code>) and <code>javax.ws.rs.core.EntityTag<\/code> are useful classes to work on <strong>ETags<\/strong>.<\/p>\n<h2>Resources for RESTful Web services<\/h2>\n<ul>\n<li><a title=\"reasteasy\" href=\"https:\/\/resteasy.github.io\/\" target=\"_blank\" rel=\"noopener noreferrer\">Jboss RESTEasy home<\/a><\/li>\n<li><a href=\"https:\/\/jbossas.jboss.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">JBoss Server<\/a><\/li>\n<li><a href=\"http:\/\/tomcat.apache.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">Tomcat Server<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/jax-rs\" target=\"_blank\" rel=\"noopener noreferrer\">JAX-RS 2 Specs<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/codehaus\/jettison\" target=\"_blank\" rel=\"noopener noreferrer\">Jettison Library<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/FasterXML\/jackson\" target=\"_blank\" rel=\"noopener noreferrer\">Jackson Library<\/a><\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>JAX-RS 2.0 is a framework designed to help you write RESTful applications both on the client and server side. Below tutorials are build using RESTEasy framework. Get more JAX-RS tutorials on Jersey and Dropwizard pages. Hello world application RESTEasy + JBOSS 7 Hello world application Learn about most basic configuration needed to build a RESTful &#8230; <a title=\"JAX-RS 2.0 Tutorials\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/restful-web-service\/\" aria-label=\"More on JAX-RS 2.0 Tutorials\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":7707,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/02\/resteasy_logo.gif",600,426,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/02\/resteasy_logo-150x150.gif",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/02\/resteasy_logo-300x213.gif",300,213,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/02\/resteasy_logo.gif",600,426,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/02\/resteasy_logo.gif",600,426,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/02\/resteasy_logo.gif",600,426,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/02\/resteasy_logo.gif",600,426,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/02\/resteasy_logo.gif",120,85,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":18,"uagb_excerpt":"JAX-RS 2.0 is a framework designed to help you write RESTful applications both on the client and server side. Below tutorials are build using RESTEasy framework. Get more JAX-RS tutorials on Jersey and Dropwizard pages. Hello world application RESTEasy + JBOSS 7 Hello world application Learn about most basic configuration needed to build a RESTful&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/797"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=797"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/797\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/7707"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=797"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}