{"id":10223,"date":"2018-04-06T18:46:28","date_gmt":"2018-04-06T13:16:28","guid":{"rendered":"https:\/\/howtodoinjava.com\/?page_id=10223"},"modified":"2021-08-09T00:01:20","modified_gmt":"2021-08-08T18:31:20","slug":"spring-boot-tutorials","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/spring-boot-tutorials\/","title":{"rendered":"Spring Boot Tutorial"},"content":{"rendered":"<p><strong>Spring Boot<\/strong> is a module that provides RAD (<strong>Rapid Application Development<\/strong>) feature to the Spring framework. Spring boot is highly dependent on the <strong>starter templates<\/strong> and <strong>auto-connfiguration<\/strong> features that are very powerful and they work flawlessly.<\/p>\n<h2>1. Spring Boot Starter Template<\/h2>\n<p>Spring Boot starters are templates that contain a <strong>collection of all the relevant transitive dependencies<\/strong> that are needed to start a particular functionality.<\/p>\n<p>For example, If we want to create a Spring Web application then in a traditional setup, we would have included all required dependencies ourselves. It leaves the chances of <strong>version conflicts<\/strong> which ultimately result in more <strong>runtime exceptions<\/strong>.<\/p>\n<p>With Spring boot, to create such an application, all we need to import is <code>spring-boot-starter-web<\/code> dependency which internally imports all the required dependencies and adds to the project.<\/p>\n<pre class=\"brush: xml; title: pom.xml; notranslate\" title=\"pom.xml\">\r\n&lt;!-- Parent pom is mandatory to control versions of child dependencies --&gt;\r\n&lt;parent&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;\/artifactId&gt;\r\n    &lt;version&gt;2.5.3.RELEASE&lt;\/version&gt;\r\n    &lt;relativePath \/&gt;\r\n&lt;\/parent&gt;\r\n\r\n&lt;!-- Spring web brings all required dependencies to build web application. --&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt;\r\n&lt;\/dependency&gt;\r\n<\/pre>\n<p>Note that some dependencies are directly included, while some dependencies further refer to other starter templates which transitively downloads more dependencies.<\/p>\n<p>Also, notice that <strong>we do not need to provide version information<\/strong> into child dependencies. All versions are resolved in relation to version of parent starter (in our example it&#8217;s <code>2.5.3.RELEASE<\/code>).<\/p>\n<pre class=\"brush: xml; title: Dependencies brought in by spring-boot-starter-web template; notranslate\" title=\"Dependencies brought in by spring-boot-starter-web template\">\r\n&lt;dependencies&gt;\r\n\t&lt;dependency&gt;\r\n\t\t&lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n\t\t&lt;artifactId&gt;spring-boot-starter&lt;\/artifactId&gt;\r\n\t&lt;\/dependency&gt;\r\n\t&lt;dependency&gt;\r\n\t\t&lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n\t\t&lt;artifactId&gt;spring-boot-starter-json&lt;\/artifactId&gt;\r\n\t&lt;\/dependency&gt;\r\n\t&lt;dependency&gt;\r\n\t\t&lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n\t\t&lt;artifactId&gt;spring-boot-starter-tomcat&lt;\/artifactId&gt;\r\n\t&lt;\/dependency&gt;\r\n\t&lt;dependency&gt;\r\n\t\t&lt;groupId&gt;org.hibernate.validator&lt;\/groupId&gt;\r\n\t\t&lt;artifactId&gt;hibernate-validator&lt;\/artifactId&gt;\r\n\t&lt;\/dependency&gt;\r\n\t&lt;dependency&gt;\r\n\t\t&lt;groupId&gt;org.springframework&lt;\/groupId&gt;\r\n\t\t&lt;artifactId&gt;spring-web&lt;\/artifactId&gt;\r\n\t&lt;\/dependency&gt;\r\n\t&lt;dependency&gt;\r\n\t\t&lt;groupId&gt;org.springframework&lt;\/groupId&gt;\r\n\t\t&lt;artifactId&gt;spring-webmvc&lt;\/artifactId&gt;\r\n\t&lt;\/dependency&gt;\r\n&lt;\/dependencies&gt;\r\n<\/pre>\n<blockquote><p>Read More : <a href=\"https:\/\/github.com\/spring-projects\/spring-boot\/tree\/master\/spring-boot-project\/spring-boot-starters\/\">Spring boot starter templates list<\/a><\/p><\/blockquote>\n<h2>2. Spring Boot Auto-Configuration<\/h2>\n<p>Spring boot auto-configuration scans the classpath, finds the libraries in the classpath, and then attempts to guess the best configuration for them, and finally configure all such beans.<\/p>\n<p>Auto-configuration tries to be as intelligent as possible and will back away as we define more of our own configuration. Auto-configuration is enabled with <strong>@EnableAutoConfiguration<\/strong> annotation.<\/p>\n<blockquote><p>Auto-configuration is always applied after user-defined beans have been registered.<\/p><\/blockquote>\n<p>Spring boot auto-configuration logic is implemented in <strong>spring-boot-autoconfigure.jar<\/strong> and works on top of <strong>@Conditional<\/strong>, <code>@ConditionalOnClass<\/code> and <strong>@ConditionalOnProperty<\/strong> annotations.<\/p>\n<figure id=\"attachment_11121\" aria-describedby=\"caption-attachment-11121\" style=\"width: 968px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Spring-boot-autoconfiguration-packages.png\" alt=\"Spring boot autoconfiguration packages\" width=\"978\" height=\"523\" class=\"size-full wp-image-11121\" \/><figcaption id=\"caption-attachment-11121\" class=\"wp-caption-text\">Spring boot autoconfiguration packages<\/figcaption><\/figure>\n<p>For example, look at <strong>auto-configuration for Spring AOP<\/strong>. It does the following-<\/p>\n<ol>\n<li><strong>Scan classpath<\/strong> to see if <code>EnableAspectJAutoProxy<\/code>, <code>Aspect<\/code>, <code>Advice<\/code> and <code>AnnotatedElement<\/code> classes are present.<\/li>\n<li>If classes are not present, no autoconfiguration will be made for Spring AOP. <\/li>\n<li>If classes are found then AOP is configured with Java config annotation <code>@EnableAspectJAutoProxy<\/code>.<\/li>\n<li>It checks for property <code>spring.aop<\/code> which value can be <code>true<\/code> or <code>false<\/code>.<\/li>\n<li>Based on the value of property, <code>proxyTargetClass<\/code> attribute is set.<\/li>\n<\/ol>\n<pre class=\"brush: java; title: AopAutoConfiguration.java; notranslate\" title=\"AopAutoConfiguration.java\">\r\n@Configuration\r\n@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class,\r\n\t\tAnnotatedElement.class })\r\n@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;auto&quot;, \r\n\t\thavingValue = &quot;true&quot;, matchIfMissing = true)\r\npublic class AopAutoConfiguration \r\n{\r\n\t@Configuration\r\n\t@EnableAspectJAutoProxy(proxyTargetClass = false)\r\n\t@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, \r\n\t\t\thavingValue = &quot;false&quot;, matchIfMissing = false)\r\n\tpublic static class JdkDynamicAutoProxyConfiguration {\r\n\r\n\t}\r\n\r\n\t@Configuration\r\n\t@EnableAspectJAutoProxy(proxyTargetClass = true)\r\n\t@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, \r\n\t\t\thavingValue = &quot;true&quot;, matchIfMissing = true)\r\n\tpublic static class CglibAutoProxyConfiguration {\r\n\r\n\t}\r\n}\r\n<\/pre>\n<h2>3. Embedded Servers<\/h2>\n<p>Spring boot applications always include <strong>tomcat<\/strong> as <strong>default embedded server<\/strong>. It enables us to run any Spring boot application from the command prompt without including any complex server infrastructure.<\/p>\n<p>We can exclude Tomcat and include any other embedded server if we want, e.g. Jetty Server. Or we can make exclude the server environment altogether. It&#8217;s all configuration-based.<\/p>\n<p>For example, below configuration <strong>excludes Tomcat and includes Jetty<\/strong> as embedded server.<\/p>\n<pre class=\"brush: xml; title: pom.xml; notranslate\" title=\"pom.xml\">\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt;\r\n    &lt;exclusions&gt;\r\n        &lt;exclusion&gt;\r\n            &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;\/artifactId&gt;\r\n        &lt;\/exclusion&gt;\r\n    &lt;\/exclusions&gt;\r\n&lt;\/dependency&gt;\r\n\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-jetty&lt;\/artifactId&gt;\r\n&lt;\/dependency&gt;\r\n<\/pre>\n<h2>4. Bootstrapping the Application<\/h2>\n<p>To <strong>run spring boot application<\/strong>, we need to use <code><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/springbootapplication-auto-configuration\/\">@SpringBootApplication<\/a><\/code> annotation. Behind the scenes, that\u2019s equivalent to <code>@Configuration<\/code>, <code>@EnableAutoConfiguration<\/code>, and <code>@ComponentScan<\/code> together.<\/p>\n<p><code>@SpringBootApplication<\/code> enables the scanning of config classes, files and load them into <strong>spring context<\/strong>. In below example, the program execution start with <code>main()<\/code> method.<\/p>\n<p>When we run the application, auto-configuration feature starts loading all the configuration files, configure them and bootstrap the application based on <a href=\"https:\/\/docs.spring.io\/spring-boot\/docs\/current\/reference\/html\/appendix-application-properties.html\">application properties<\/a> in <strong>application.properties<\/strong> file in <code>\/resources<\/code> folder.<\/p>\n<pre class=\"brush: java; title: MyApplication.java; notranslate\" title=\"MyApplication.java\">\r\n@SpringBootApplication\r\npublic class MyApplication \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: application.properties; notranslate\" title=\"application.properties\">\r\n### Server port #########\r\nserver.port=8080\r\n \r\n### Context root ########\r\nserver.contextPath=\/home\r\n<\/pre>\n<p>To execute the application, we can run the <code>main()<\/code> method from an IDE such as <strong>eclipse<\/strong>, or we can build the <code>jar<\/code> file and execute it from the command prompt.<\/p>\n<pre class=\"brush: java; title: Starting application from commpand prompt; notranslate\" title=\"Starting application from commpand prompt\">\r\n$ java -jar spring-boot-demo.jar\r\n<\/pre>\n<h2>5. Advantages of Spring Boot<\/h2>\n<ul>\n<li>Spring boot helps in <strong>resolving dependency conflict<\/strong>. It identifies required dependencies and import them for you. <\/li>\n<li>Spring boot has information of <strong>compatible version<\/strong> for all dependencies. It minimizes the runtime <strong>classloader<\/strong> issues.<\/li>\n<li>Spring boot&#8217;s &#8220;<strong>opinionated defaults configuration<\/strong>&#8221; approach helps in configuring most important pieces behind the scene. Override them only when you need. Otherwise everything just works, perfectly. It helps in avoiding <strong>boilerplate code<\/strong>, annotations and XML configurations.<\/li>\n<li>Spring boot provides embedded HTTP server Tomcat so that you can develop and test quickly.<\/li>\n<li>Spring boot has excellent integration with IDEs like eclipse and <strong>intelliJ idea<\/strong>.<\/li>\n<\/ul>\n<h2>6. Spring Boot Examples<\/h2>\n<ol>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/spring-boot-annotations\/\">Spring boot annotations<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/logging\/spring-boot-logging-configurations\/\">A Guide to Logging in Spring Boot<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/spring-boot-starter-templates\/\">Spring Boot \u2013 Spring Boot starter templates<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/spring-boot-starter-parent-dependency\/\">Spring Boot &#8211; Starter Parent Dependency<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/get-loaded-beans-class-type-information\/\">Spring Boot \u2013 Get all loaded beans<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/springbootapplication-auto-configuration\/\">Spring Boot &#8211; @SpringBootApplication and Auto Configuration<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/change-application-root-context-path\/\">Spring Boot \u2013 Change Application Root<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/configure-jetty-server\/\">Spring Boot \u2013 Configure Jetty Server<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/change-server-default-port\/\">Spring Boot \u2013 Tomcat Default Port<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/war-packaging-example\/\">Spring Boot \u2013 WAR Packaging Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/logging\/configure-logging-application-yml\/\">Spring Boot \u2013 Logging yml Config<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/logging\/logging-application-properties\/\">Spring Boot \u2013 Logging property Config<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-boot-ssl-https-example\/\">Spring Boot \u2013 SSL [https]<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/command-line-runner-interface-example\/\">Spring Boot \u2013 CommandLineRunner<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/developer-tools-module-tutorial\/\">Spring Boot \u2013 Developer Tools Module Tutorial<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/application-arguments\/\">Spring Boot \u2013 Inject Application Arguments in @Bean and @Compoment<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/logging\/embedded-server-logging-config\/\">Spring boot embedded server logs<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/embedded-tomcat-configuration\/\">Spring boot embedded tomcat configuration<\/a><\/li>\n<\/ol>\n<h2>7. Developing REST APIs and SOAP Webservices<\/h2>\n<ol>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-boot-tutorial-with-hello-world-example\/\">Spring Boot \u2013 REST APIs<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-boot-jersey-example\/\">Spring Boot \u2013 Jersey<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/rest-with-spring-hateoas-example\/\">Spring Boot &#8211; Spring HATEOAS Example<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/spring-rest-request-validation\/\">Spring Boot \u2013 Request validation of REST APIs<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/role-based-security-jaxrs-annotations\/\">Spring Boot \u2013 Role Based Security<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-boot-soap-webservice-example\/\">Spring Boot \u2013 SOAP Webservice<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-soap-client-webservicetemplate\/\">Spring Boot \u2013 SOAP Client<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/ehcache3-config-example\/\">Spring boot 2 and ehcache 3 example<\/a><\/li>\n<\/ol>\n<h2>8. Other Useful Topics<\/h2>\n<ol>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/disable-logo-banner\/\">Disable banner at startup<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-boot-jsp-view-example\/\">Spring Boot \u2013 JSP View<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/custom-property-editor-example\/\">Spring Boot \u2013 Custom PropertyEditor<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/enable-scheduling-scheduled-job-example\/\">Spring Boot \u2013 @EnableScheduling<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-boot-jmstemplate-activemq\/\">Spring Boot \u2013 JMSTemplate<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-boot-rome-rss-and-atom-feed\/\">Spring Boot \u2013 RSS \/ ATOM Feed<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/read-file-from-resources\/\">Spring boot read file from resources folder<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/interview-questions\/spring-boot-interview-questions\/\">Spring Boot Interview Questions<\/a><\/li>\n<\/ol>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Spring Boot is a module that provides RAD (Rapid Application Development) feature to the Spring framework. Spring boot is highly dependent on the starter templates and auto-connfiguration features that are very powerful and they work flawlessly. 1. Spring Boot Starter Template Spring Boot starters are templates that contain a collection of all the relevant transitive &#8230; <a title=\"Spring Boot Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/spring-boot-tutorials\/\" aria-label=\"More on Spring Boot Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11119,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",150,113,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",300,225,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",120,90,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Spring Boot is a module that provides RAD (Rapid Application Development) feature to the Spring framework. Spring boot is highly dependent on the starter templates and auto-connfiguration features that are very powerful and they work flawlessly. 1. Spring Boot Starter Template Spring Boot starters are templates that contain a collection of all the relevant transitive&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/10223"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=10223"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/10223\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11119"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=10223"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}