{"id":8092,"date":"2017-05-15T15:24:23","date_gmt":"2017-05-15T09:54:23","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=8092"},"modified":"2021-11-17T22:13:12","modified_gmt":"2021-11-17T16:43:12","slug":"java-8-tutorial","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-8-tutorial\/","title":{"rendered":"Java 8 Tutorial"},"content":{"rendered":"\n<p><strong>Java 8<\/strong> was released in early 2014. This tutorial list down important <strong>Java 8 features<\/strong> with examples such as lambda expressions, Java streams, functional interfaces, default methods and date-time API changes.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1 uagb-toc__collapse uagb-block-cd485ec8 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-lambda-expressions\">1. Lambda Expressions<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#11-syntax\">1.1. Syntax<\/a><li class=\"uagb-toc__list\"><a href=\"#12-rules-for-writing-lambda-expressions\">1.2. Rules for writing lambda expressions<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#2-functional-interfaces\">2. Functional Interfaces<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-functional-interface-example\">2.1. Functional Interface Example<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-default-methods\">3. Default Methods<\/a><li class=\"uagb-toc__list\"><a href=\"#4-java-8-streams\">4. Java 8 Streams<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-stream-api-example\">4.1. Stream API Example<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#5-java-8-datetime-api-changes\">5. Java 8 Date\/Time API Changes<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#51-date-classes\">5.1. Date Classes<\/a><li class=\"uagb-toc__list\"><a href=\"#52-timestamp-and-duration-classes\">5.2. Timestamp and Duration Classes<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. Lambda Expressions<\/h2>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\" target=\"_blank\" rel=\"noopener\">Lambda expressions<\/a> are known to many of us who have worked on other popular programming languages like Scala. In Java programming language, a Lambda expression (or function) is just an <em>anonymous function<\/em>, i.e., a <strong>function with no name<\/strong> and without being bound to an identifier.<\/p>\n\n\n\n<p>Lambda expressions are written precisely where it\u2019s needed, typically as a parameter to some other function.<\/p>\n\n\n\n<h3>1.1. Syntax<\/h3>\n\n\n\n<p>A few basic syntaxes of lambda expressions are:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">(parameters) -> expression\r\n \r\n(parameters) -> { statements; }\r\n \r\n() -> expression<\/code><\/pre>\n\n\n\n<p>A typical lambda expression example will be like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/This function takes two parameters and return their sum\r\n(x, y) -> x + y  <\/code><\/pre>\n\n\n\n<p>Please note that based on the type of <code>x<\/code> and <code>y<\/code>, we may use the method in multiple places. Parameters can match to <code>int<\/code>, or <code>Integer<\/code> or simply <code>String<\/code> also. Based on context, it will either add two integers or concatenate two strings.<\/p>\n\n\n\n<h3>1.2. Rules for writing lambda expressions<\/h3>\n\n\n\n<ol><li>A lambda expression can have zero, one or more parameters.<\/li><li>The type of the parameters can be explicitly declared or it can be inferred from the context.<\/li><li>Multiple parameters are enclosed in mandatory parentheses and separated by commas. Empty parentheses are used to represent an empty set of parameters.<\/li><li>When there is a single parameter, if its type is inferred, it is not mandatory to use parentheses.<\/li><li>The body of the lambda expressions can contain zero, one, or more statements.<\/li><li>If the body of lambda expression has a single statement, curly brackets are not mandatory and the return type of the anonymous function is the same as that of the body expression. When there is more than one statement in the body then these must be enclosed in curly brackets.<\/li><\/ol>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\">Java 8 Lambda Expressions Tutorial<\/a><\/p><\/blockquote>\n\n\n\n<h2>2. Functional Interfaces<\/h2>\n\n\n\n<p>Functional interfaces are also called <em>Single Abstract Method interfaces (SAM Interfaces)<\/em>. As the name suggests, a functional interface <strong>permits exactly one abstract method<\/strong> in it.<\/p>\n\n\n\n<p>Java 8 introduces <code>@FunctionalInterface<\/code> annotation that we can use for giving compile-time errors it a functional interface violates the contracts.<\/p>\n\n\n\n<h3>2.1. Functional Interface Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Optional annotation\r\n@FunctionalInterface\r\npublic interface MyFirstFunctionalInterface {\r\n    public void firstWork();\r\n}<\/code><\/pre>\n\n\n\n<p>Please note that a functional interface is valid even if the <code>@FunctionalInterface<\/code> annotation is omitted. It is only for informing the compiler to enforce a single abstract method inside the interface.<\/p>\n\n\n\n<p>Also, since default methods are not <code>abstract<\/code> , we can add default methods to the functional interface as many as we need.<\/p>\n\n\n\n<p>Another critical point to remember is that if a functional interface overrides one of the public methods of <code>java.lang.Object<\/code>, that also does not count toward the interface\u2019s abstract method count since any implementation of the interface will have an implementation from <code>java.lang.Object<\/code> or elsewhere.<\/p>\n\n\n\n<p>For example, given below is a perfectly valid functional interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@FunctionalInterface\r\npublic interface MyFirstFunctionalInterface \r\n{\r\n    public void firstWork();\r\n \r\n    @Override\r\n    public String toString();                \/\/Overridden from Object class\r\n \r\n    @Override\r\n    public boolean equals(Object obj);        \/\/Overridden from Object class\r\n}<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java\/stream\/functional-interface-tutorial\/\">Java 8 Functional Interface Tutorial<\/a><\/p><\/blockquote>\n\n\n\n<h2>3. Default Methods<\/h2>\n\n\n\n<p>Java 8 allows us to add non-abstract methods in the interfaces. These methods must be declared <code>default<\/code> methods. Default methods were introduced in java 8 to enable the functionality of lambda expression.<\/p>\n\n\n\n<p>Default methods enable us to introduce new functionality to the interfaces of our libraries and ensure binary compatibility with code written for older versions of those interfaces.<\/p>\n\n\n\n<p>Let\u2019s understand with an example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public interface Moveable {\r\n    default void move(){\r\n        System.out.println(\"I am moving\");\r\n    }\r\n}<\/code><\/pre>\n\n\n\n<p><code>Moveable<\/code> interface defines a method <code>move()<\/code> and provided a default implementation as well. If any class implements this interface then it need not to implement its own version of <code>move()<\/code> method. It can directly call <code>instance.move()<\/code>. e.g.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Animal implements Moveable{\r\n    public static void main(String[] args){\r\n        Animal tiger = new Animal();\r\n        tiger.move();\r\n    }\r\n}\r\n  \r\nOutput: I am moving<\/code><\/pre>\n\n\n\n<p>If the class willingly wants to customize the behavior of <code>move()<\/code> method then it can provide its own custom implementation and override the method.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Reda More: <a href=\"https:\/\/howtodoinjava.com\/java8\/default-methods-in-java-8\/\">Java 8 Default Methods Tutorial<\/a><\/p><\/blockquote>\n\n\n\n<h2>4. Java 8 Streams<\/h2>\n\n\n\n<p>Another significant change introduced <strong>Java 8 Streams API<\/strong>, which provides a mechanism for processing a set of data in various ways that can include filtering, transformation, or any other way that may be useful to an application.<\/p>\n\n\n\n<p>Streams API in Java 8 supports a different type of iteration where we define the set of items to be processed, the operation(s) to be performed on each item, and where the output of those operations is to be stored.<\/p>\n\n\n\n<h3>4.1. Stream API Example<\/h3>\n\n\n\n<p>In this example, <code>items<\/code> is collection of <code>String<\/code> values and we want to remove the entries that begin with some prefix text.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;String> items = ...; \/\/Initialize the list\r\n \r\nString prefix = \"str\";\r\n \r\nList&lt;String> filteredList = items.stream()\r\n          .filter(e -> (!e.startsWith(prefix)))\r\n          .collect(Collectors.toList());<\/code><\/pre>\n\n\n\n<p>Here <code>items.stream()<\/code> indicates that we wish to have the data in the <code>items<\/code> collection process using the Streams API.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java8\/internal-vs-external-iteration\/\">Java 8 Internal vs. External Iteration<\/a><\/p><\/blockquote>\n\n\n\n<h2>5. Java 8 Date\/Time API Changes<\/h2>\n\n\n\n<p>The new Date and Time APIs\/classes (<a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=310\" target=\"_blank\" rel=\"noreferrer noopener\">JSR-310<\/a>), also called <em>ThreeTen<\/em>, have simply changed the way we handle dates in java applications.<\/p>\n\n\n\n<h3>5.1. Date Classes<\/h3>\n\n\n\n<p><code>Date<\/code> class has even become obsolete. The new classes intended to replace Date class are <code>LocalDate<\/code>, <code>LocalTime<\/code> and <code>LocalDateTime<\/code>.<\/p>\n\n\n\n<ol><li>The <code>LocalDate<\/code> class <strong>represents a date<\/strong>. There is no information of a time or time-zone.<\/li><li>The <code>LocalTime<\/code> class <strong>represents a time<\/strong>. There is no information of a date or time-zone.<\/li><li>The <code>LocalDateTime<\/code> class <strong>represents a date and time<\/strong>. There is no information of a time-zone.<\/li><\/ol>\n\n\n\n<p>If we want to use the date functionality with timezone information, then Lambda provide us extra three classes similar to above one i.e. <code>OffsetDate<\/code>, <code>OffsetTime<\/code> and <code>OffsetDateTime<\/code>.<\/p>\n\n\n\n<p>Timezone offset can be represented in \u201c+05:30\u201d or \u201cEurope\/Paris\u201d formats. This is done via using another class i.e. <code>ZoneId<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">LocalDate localDate = LocalDate.now();\nLocalTime localTime = LocalTime.of(12, 20);\nLocalDateTime localDateTime = LocalDateTime.now(); \n\nOffsetDateTime offsetDateTime = OffsetDateTime.now();\nZonedDateTime zonedDateTime = ZonedDateTime.now(ZoneId.of(\"Europe\/Paris\"));<\/code><\/pre>\n\n\n\n<p>A good understanding of these classes will help you in date-time related <a href=\"https:\/\/java2blog.com\/java-8-interview-questions\/\" target=\"_blank\" rel=\"noreferrer noopener\">Java 8 interview questions<\/a>.<\/p>\n\n\n\n<h3>5.2. Timestamp and Duration Classes<\/h3>\n\n\n\n<p><strong>For representing the specific timestamp at any moment, the class needs to be used is <code>Instant<\/code><\/strong>. The <code>Instant<\/code> class represents an instant in time to an accuracy of nanoseconds.<\/p>\n\n\n\n<p>Operations on an <code>Instant<\/code> include comparison to another <code>Instant<\/code> and adding or subtracting a duration.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Instant instant = Instant.now();\nInstant instant1 = instant.plus(Duration.ofMillis(5000));\nInstant instant2 = instant.minus(Duration.ofMillis(5000));\nInstant instant3 = instant.minusSeconds(10);<\/code><\/pre>\n\n\n\n<p><code>Duration<\/code> class is a whole new concept brought first time in java language. It represents the time difference between two timestamps.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Duration duration = Duration.ofMillis(5000);\r\nduration = Duration.ofSeconds(60);\r\nduration = Duration.ofMinutes(10);<\/code><\/pre>\n\n\n\n<p><strong><code>Duration<\/code> deals with a small unit of time<\/strong> such as milliseconds, seconds, minutes, and hours. They are more suitable for interacting with application code.<\/p>\n\n\n\n<p>To interact with humans, we need to get <strong>bigger time durations presented with <code>Period<\/code> class<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Period period = Period.ofDays(6);\r\nperiod = Period.ofMonths(6);\r\nperiod = Period.between(LocalDate.now(), LocalDate.now().plusDays(60));<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java8\/date-and-time-api-changes-in-java-8-lambda\/\">Java 8 Date and Time API Changes<\/a><\/p><\/blockquote>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java 8 was released in early 2014. This tutorial list down important Java 8 features with examples such as lambda expressions, Java streams, functional interfaces, default methods and date-time API changes. 1. Lambda Expressions Lambda expressions are known to many of us who have worked on other popular programming languages like Scala. In Java programming &#8230; <a title=\"Java 8 Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-8-tutorial\/\" aria-label=\"More on Java 8 Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4758,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":17,"uagb_excerpt":"Java 8 was released in early 2014. This tutorial list down important Java 8 features with examples such as lambda expressions, Java streams, functional interfaces, default methods and date-time API changes. 1. Lambda Expressions Lambda expressions are known to many of us who have worked on other popular programming languages like Scala. In Java programming&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/8092"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=8092"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/8092\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4758"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=8092"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}