{"id":5251,"date":"2015-11-30T09:43:01","date_gmt":"2015-11-30T04:13:01","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=5251"},"modified":"2020-12-26T00:32:00","modified_gmt":"2020-12-25T19:02:00","slug":"java-algorithms-implementations","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-algorithms-implementations\/","title":{"rendered":"Java Algorithms and Implementations"},"content":{"rendered":"<p>This page list down all java algorithms and implementations discussed in this blog, for quick links. Feel free to suggest more algorithms you may want to learn.<\/p>\n<h2>Java Sorting Algorithms<\/h2>\n<ol>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/algorithm\/quicksort-java-example\/\">Quick Sort<\/a><\/h4>\n<p>Quicksort is a divide and conquer algorithm, which means original array is divided into two arrays, each of them is sorted individually and then sorted output is merged to produce the sorted array.<\/li>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/algorithm\/merge-sort-java-example\/\">Merge Sort<\/a><\/h4>\n<p>Merge sort is used when the data structure doesn\u2019t support random access, since it works with pure sequential access (forward iterators, rather than random access iterators). It\u2019s also widely used for external sorting, where random access can be very, very expensive compared to sequential access.<\/li>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/algorithm\/bubble-sort-java-example\/\">Bubble Sort<\/a><\/h4>\n<p>Bubble Sort is a simple and slow sorting algorithm that repeatedly steps through the collection, compares each pair of adjacent elements and swaps them if they are in the wrong order. <\/li>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/algorithm\/selection-sort-java-example\/\">Selection Sort<\/a><\/h4>\n<p>Selection Sort is a simple and slow sorting algorithm that repeatedly selects the lowest or highest element from the un-sorted section and moves it to the end of the sorted section.<\/li>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/algorithm\/insertion-sort-java-example\/\">Insertion Sort<\/a><\/h4>\n<p>Insertion Sort is a simple and slow sorting algorithm that repeatedly takes the next element from the un-sorted section and inserts it into the sorted section at the correct position. <\/li>\n<\/ol>\n<h2>More Java Algorithms<\/h2>\n<p>Below are more Java Algorithms present in the blog.<\/p>\n<ol>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/algorithm\/implement-phonetic-search-using-soundex-algorithm\/\">Phonetic search using Soundex algorithm<\/a><\/h4>\n<p>Have you ever wondered how spell checkers, in any word editor, suggest you a list of probable other words whenever you have any spelling mistake?? This is done using phonetic search. Soundex is a phonetic algorithm for indexing names by sound, as pronounced in English.<\/li>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/compare-and-swap-cas-algorithm\/\">Compare and Swap [CAS] Algorithm<\/a><\/h4>\n<p>This algorithm compares the contents of a memory location to a given value and, only if they are the same, modifies the contents of that memory location to a given new value. This is done as a single atomic operation.<\/li>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/java\/java-security\/how-to-generate-secure-password-hash-md5-sha-pbkdf2-bcrypt-examples\/\">Password encryption using MD5, SHA, PBKDF2, BCrypt etc.<\/a><\/h4>\n<p>A password hash is an encrypted sequence of characters obtained after applying certain algorithms and manipulations on user provided password, which are generally very weak and easy to guess. Let&#8217;s explore few algorithms to generate these hashes.<\/li>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/java\/puzzles\/how-to-detect-infinite-loop-in-linkedlist-in-java-with-example\/\">How to detect infinite loop in linkedlist<\/a><\/h4>\n<p>You are asked that if you have a linked list in which you can traverse only in one direction, and if that linked list has a loop in it, how you will detect it?? Let&#8217;s solve the problem.<\/li>\n<li>\n<h4><a href=\"https:\/\/howtodoinjava.com\/java\/java-security\/java-aes-encryption-example\/\">AES (Advanced Encryption Standard) Algorithm Example<\/a><\/h4>\n<p>Advanced Encryption Standard which is a symmetric encryption algorithm. AES encryption is used by U.S. for securing sensitive but unclassified material, so we can say it is enough secure.\n<\/li>\n<\/ol>\n<p><strong>Happy Learning !!<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This page list down all java algorithms and implementations discussed in this blog, for quick links. Feel free to suggest more algorithms you may want to learn. Java Sorting Algorithms Quick Sort Quicksort is a divide and conquer algorithm, which means original array is divided into two arrays, each of them is sorted individually and &#8230; <a title=\"Java Algorithms and Implementations\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-algorithms-implementations\/\" aria-label=\"More on Java Algorithms and Implementations\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":1,"uagb_excerpt":"This page list down all java algorithms and implementations discussed in this blog, for quick links. Feel free to suggest more algorithms you may want to learn. Java Sorting Algorithms Quick Sort Quicksort is a divide and conquer algorithm, which means original array is divided into two arrays, each of them is sorted individually and&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/5251"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=5251"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/5251\/revisions"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=5251"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}