{"id":7714,"date":"2016-09-05T01:20:06","date_gmt":"2016-09-04T19:50:06","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=7714"},"modified":"2020-12-26T00:49:04","modified_gmt":"2020-12-25T19:19:04","slug":"spring-aop-tutorial","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/spring-aop-tutorial\/","title":{"rendered":"Spring AOP Tutorial"},"content":{"rendered":"<p>In this <strong>Spring AOP<\/strong> tutorial, learn what is aspect-oriented programming with example. Also learn what is advice, join-point, and point-cut expressions and how to use them in Spring application with examples.<\/p>\n<h2>1. What is Spring AOP?<\/h2>\n<p>Spring AOP enables Aspect-Oriented Programming in spring applications. In AOP, aspects enable the modularization of concerns such as transaction management, logging or security that cut across multiple types and objects (often termed <strong>crosscutting concerns<\/strong>). <\/p>\n<p>AOP provides the way to dynamically add the cross-cutting concern before, after or around the actual logic using simple pluggable configurations. It makes easy to maintain code in the present and future as well. You can add\/remove concerns without recompiling complete sourcecode simply by changing configuration files (if you are applying aspects suing XML configuration).<\/p>\n<h2>2. What is advice, joinpoint or pointcut?<\/h2>\n<ol>\n<li>An important term in AOP is <strong>advice<\/strong>. It is the action taken by an <strong>aspect<\/strong> at a particular join-point.<\/li>\n<li><strong>Joinpoint<\/strong> is a point of execution of the program, such as the execution of a method or the handling of an exception. In Spring AOP, a joinpoint always represents a method execution.<\/li>\n<li><strong>Pointcut<\/strong> is a predicate or expression that matches join points.<\/li>\n<li><strong>Advice<\/strong> is associated with a pointcut expression and runs at any join point matched by the pointcut.<\/li>\n<li>Spring uses the AspectJ pointcut expression language by default.<\/li>\n<\/ol>\n<figure id=\"attachment_4517\" aria-describedby=\"caption-attachment-4517\" style=\"width: 400px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram.jpg\" alt=\"Spring AOP\" width=\"410\" height=\"372\" class=\"size-full wp-image-4517\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram.jpg 410w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram-300x272.jpg 300w\" sizes=\"(max-width: 410px) 100vw, 410px\" \/><figcaption id=\"caption-attachment-4517\" class=\"wp-caption-text\">Spring AOP<\/figcaption><\/figure>\n<h2>3. Types of AOP Advices<\/h2>\n<p>There are five types of advice in spring AOP.<\/p>\n<ol>\n<li><strong>Before advice<\/strong>: Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).<\/li>\n<li><strong>After returning advice<\/strong>: Advice to be executed after a join point completes normally: for example, if a method returns without throwing an exception.<\/li>\n<li><strong>After throwing advice<\/strong>: Advice to be executed if a method exits by throwing an exception.<\/li>\n<li><strong>After advice<\/strong>: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).<\/li>\n<li><strong>Around advice:<\/strong> Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.<\/li>\n<\/ol>\n<h2>4. Spring AOP Example<\/h2>\n<h4>4.1. Maven Dependencies<\/h4>\n<p>Before writing any code, you will need to import <em>Spring AOP dependencies<\/em> into your project.<\/p>\n<pre class=\"brush: java; title: pom.xml; notranslate\" title=\"pom.xml\">\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;spring-context&lt;\/artifactId&gt;\r\n    &lt;version&gt;5.2.7.RELEASE&lt;\/version&gt;\r\n&lt;\/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;spring-context-support&lt;\/artifactId&gt;\r\n    &lt;version&gt;5.2.7.RELEASE&lt;\/version&gt;\r\n&lt;\/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;spring-aop&lt;\/artifactId&gt;\r\n    &lt;version&gt;5.2.7.RELEASE&lt;\/version&gt;\r\n&lt;\/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.aspectj&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;aspectjrt&lt;\/artifactId&gt;\r\n    &lt;version&gt;1.9.5&lt;\/version&gt;\r\n&lt;\/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.aspectj&lt;\/groupId&gt;\r\n    &lt;artifactId&gt;aspectjweaver&lt;\/artifactId&gt;\r\n    &lt;version&gt;1.9.5&lt;\/version&gt;\r\n&lt;\/dependency&gt;\r\n<\/pre>\n<p>Enable AOP configuration in Spring applications.<\/p>\n<pre class=\"brush: java; title: AopConfig.java; notranslate\" title=\"AopConfig.java\">\r\n@Configuration\r\n@EnableAspectJAutoProxy\r\npublic class AopConfig {\r\n\r\n}\r\n<\/pre>\n<h4>4.2. Aspect and pointcut expression<\/h4>\n<p>Write aspect class annotated with <code>@Aspect<\/code> annotation and write point-cut expressions to match joint-point methods.<\/p>\n<pre class=\"brush: java; title: EmployeeCRUDAspect.java; notranslate\" title=\"EmployeeCRUDAspect.java\">\r\n@Aspect\r\npublic class EmployeeCRUDAspect {\r\n     \r\n    @Before(&quot;execution(* EmployeeManager.getEmployeeById(..))&quot;)\t\t\t\/\/point-cut expression\r\n    public void logBeforeV1(JoinPoint joinPoint)\r\n    {\r\n        System.out.println(&quot;EmployeeCRUDAspect.logBeforeV1() : &quot; + joinPoint.getSignature().getName());\r\n    }\r\n}\r\n<\/pre>\n<h4>4.3. Methods (joint points)<\/h4>\n<p>Write methods on which you want to execute advices and those match with point-cut expressions.<\/p>\n<pre class=\"brush: java; title: EmployeeManager.java; notranslate\" title=\"EmployeeManager.java\">\r\n@Component\r\npublic class EmployeeManager\r\n{\r\n    public EmployeeDTO getEmployeeById(Integer employeeId) {\r\n        System.out.println(&quot;Method getEmployeeById() called&quot;);\r\n        return new EmployeeDTO();\r\n    }\r\n}\r\n<\/pre>\n<p>In above example, <code>logBeforeV1()<\/code> will be executed <strong>before<\/strong> <code>getEmployeeById()<\/code> method because it matches the join-point expression.<\/p>\n<h4>4.4. Run the application<\/h4>\n<p>Run the application and watch the console.<\/p>\n<pre class=\"brush: java; title: TestAOP.java; notranslate\" title=\"TestAOP.java\">\r\npublic class TestAOP\r\n{\r\n    @SuppressWarnings(&quot;resource&quot;)\r\n    public static void main(String[] args) {\r\n \r\n        ApplicationContext context = new ClassPathXmlApplicationContext\r\n        \t\t\t\t\t(&quot;com\/howtodoinjava\/demo\/aop\/applicationContext.xml&quot;);\r\n\r\n        EmployeeManager manager = context.getBean(EmployeeManager.class);\r\n \r\n        manager.getEmployeeById(1);\r\n    }\r\n}\r\n<\/pre>\n<p>Program output:<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nEmployeeCRUDAspect.logBeforeV1() : getEmployeeById\r\nMethod getEmployeeById() called\r\n<\/pre>\n<p><em>Spring aop tutorial for beginners<\/em> with example.<\/p>\n<h2>5. Spring AOP XML Configuration Examples<\/h2>\n<ol>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/spring-aop-aspectj-xml-configuration-example\/\">Spring AOP AspectJ XML Configuration Example<\/a><\/strong>\n<p>Learn to configure AOP aspects using XML configuration.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-before-advice-example\/\">Spring AOP Before Advice Example<\/a><\/strong>\n<p>Learn to configure aop before advice aspect using <code>&lt;aop:before\/&gt;<\/code> configuration.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-after-returning-advice-example\/\">Spring AOP After Returning Advice Example<\/a><\/strong>\n<p>Learn to configure aop after returning advice aspect using <code>&lt;aop:after-returning\/&gt;<\/code> configuration.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-after-throwing-advice-example\/\">Spring AOP After Throwing Advice Example<\/a><\/strong>\n<p>Learn to configure aop after throwing advice aspect using <code>&lt;aop:after-throwing\/&gt;<\/code> configuration.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-after-advice-example\/\">Spring AOP After Advice Example<\/a><\/strong>\n<p>Learn to configure aop after advice aspect using <code>&lt;aop:after\/&gt;<\/code> configuration.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-around-advice-example\/\">Spring AOP Around Advice Example<\/a><\/strong>\n<p>Learn to configure aop around advice aspect using <code>&lt;aop:around\/&gt;<\/code> configuration.<\/li>\n<\/ol>\n<h2>6. Spring AOP AspectJ Annotations Examples<\/h2>\n<ol>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/spring-aop-aspectj-example-tutorial-using-annotation-config\/\">Spring AOP AspectJ Annotation Config Example<\/a><\/strong>\n<p>Learn to configure AOP aspects using aspectj annotations configuration.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-before-annotation-example\/\">Spring AOP AspectJ @Before Example<\/a><\/strong>\n<p>Learn to configure aop before advice aspect using <code>@Before<\/code> annotation.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-after-annotation-example\/\">Spring AOP AspectJ @After Example<\/a><\/strong>\n<p>Learn to configure aop after advice aspect using <code>@After<\/code> annotation.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-around-annotation-example\/\">Spring AOP AspectJ @Around Example<\/a><\/strong>\n<p>Learn to configure aop around advice aspect using <code>@Around<\/code> annotation.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-after-returning-annotation-example\/\">Spring AOP AspectJ @AfterReturning Example<\/a><\/strong>\n<p>Learn to configure aop after returning advice aspect using <code>@AfterReturning<\/code> annotation.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-afterthrowing-annotation-example\/\">Spring AOP AspectJ @AfterThrowing Example<\/a><\/strong>\n<p>Learn to configure aop after throwing advice aspect using <code>@AfterThrowing<\/code> annotation.<\/li>\n<\/ol>\n<h2>7. More Spring AOP Tutorial<\/h2>\n<ol>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/spring-aop-specifying-aspects-ordering\/\">Spring AOP Aspects Ordering<\/a><\/strong>\n<p>Learn to order the aspect execution in case of multiple aspects which need to be executed in certain order.<\/li>\n<li><strong><a href=\"https:\/\/howtodoinjava.com\/spring-aop\/aspectj-pointcut-expressions\/\">Spring AOP AspectJ Pointcut Expressions With Examples<\/a><\/strong>\n<p>Learn to write pointcut expressions to match a variety of join points.<\/li>\n<\/ol>\n<h2>8. Interview Questions<\/h2>\n<p><strong><a href=\"https:\/\/howtodoinjava.com\/interview-questions\/top-spring-aop-interview-questions-with-answers\/\">Top Spring AOP Interview Questions with Answers<\/a><\/strong><\/p>\n<p>Some most asked spring AOP interview questions in java interviews.<\/p>\n<h2>9. Spring AOP Resource(s):<\/h2>\n<p><a href=\"https:\/\/docs.spring.io\/spring-framework\/docs\/current\/reference\/html\/core.html#aop\">Spring AOP Doc<\/a><br \/>\n<a href=\"https:\/\/www.eclipse.org\/aspectj\/\">AspectJ<\/a><\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this Spring AOP tutorial, learn what is aspect-oriented programming with example. Also learn what is advice, join-point, and point-cut expressions and how to use them in Spring application with examples. 1. What is Spring AOP? Spring AOP enables Aspect-Oriented Programming in spring applications. In AOP, aspects enable the modularization of concerns such as transaction &#8230; <a title=\"Spring AOP Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/spring-aop-tutorial\/\" aria-label=\"More on Spring AOP Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4517,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram.jpg",410,372,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram-300x272.jpg",300,272,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram.jpg",410,372,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram.jpg",410,372,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram.jpg",410,372,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram.jpg",410,372,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/01\/spring-aop-diagram.jpg",120,109,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":11,"uagb_excerpt":"In this Spring AOP tutorial, learn what is aspect-oriented programming with example. Also learn what is advice, join-point, and point-cut expressions and how to use them in Spring application with examples. 1. What is Spring AOP? Spring AOP enables Aspect-Oriented Programming in spring applications. In AOP, aspects enable the modularization of concerns such as transaction&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/7714"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=7714"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/7714\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4517"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=7714"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}