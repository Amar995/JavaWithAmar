{"id":2666,"date":"2013-07-08T11:40:17","date_gmt":"2013-07-08T06:10:17","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=2666"},"modified":"2020-12-26T00:31:37","modified_gmt":"2020-12-25T19:01:37","slug":"java-nio-tutorials","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-nio-tutorials\/","title":{"rendered":"Java NIO Tutorial (with Examples)"},"content":{"rendered":"<p>Java NIO (New IO) is an alternative IO API for Java (from Java 1.4), meaning alternative to the standard <a href=\"http:\/\/tutorials.jenkov.com\/java-io\/index.html\">Java IO<\/a> API&#8217;s. Java NIO offers a different way of working with IO than the standard IO API&#8217;s. In this page, I will list down all available posts related to NIO, available in this blog.<\/p>\n<p><img loading=\"lazy\" class=\"aligncenter clearNone size-full wp-image-1827\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/nio.png\" alt=\"java nio\" width=\"147\" height=\"103\" \/><\/p>\n<h3>&nbsp;Pre-requisites for Learning NIO<\/h3>\n<h4><a title=\"How Java I\/O Works Internally at Lower Level?\" href=\"https:\/\/howtodoinjava.com\/java\/io\/how-java-io-works-internally\/\" target=\"_blank\" rel=\"noopener noreferrer\">How Java I\/O Works Internally at Lower Level?<\/a><\/h4>\n<p>This blog post mostly talks about how things related to I\/O work at the lower level. This post is intended for readers who are curious to know that how <strong><a title=\"java io\" href=\"https:\/\/howtodoinjava.com\/\" target=\"_blank\" rel=\"noopener noreferrer\">java I\/O<\/a><\/strong> operations are mapped at machine level; and what all things hardware does all the time when your application is running. I am assuming that you are familiar with basic IO operations such as reading a file, writing a file through java I\/O APIs; because that is out of scope of this post.<\/p>\n<h4><a title=\"Difference between standard IO and NIO\" href=\"https:\/\/howtodoinjava.com\/java\/io\/difference-between-io-nio\/\" target=\"_blank\" rel=\"noopener noreferrer\">Difference between standard IO and NIO<\/a><\/h4>\n<p>In this tutorial, I will focus on identifying most noticeable differences which you must know before deciding which one to use in your next project.<\/p>\n<h3><strong>NIO Basics<br \/>\n<\/strong><\/h3>\n<h4><a title=\"How to define Path in java NIO\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/how-to-define-path-in-java-nio\/\"><strong>How to define Path in java NIO<\/strong><\/a><\/h4>\n<p>If your application uses NIO, you should learn more about the powerful features available in this class. In this tutorial, I am listing 6 ways to create Path in NIO.<\/p>\n<h4><a title=\"Java NIO 2.0 : Working With Buffers\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/java-nio-2-0-working-with-buffers\/\" target=\"_blank\" rel=\"noopener noreferrer\">NIO Buffers<\/a><\/h4>\n<p><strong><a class=\"ext-link\" title=\"Buffer\" href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/nio\/Buffer.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Buffer<\/a><\/strong> classes are the foundation upon which <strong><a title=\"NIO Tutorials\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/nio-read-file\/\">java.nio<\/a><\/strong> is built. In this tutorial, we\u2019ll take a closer look at buffers, discover the various types, and learn how to use them. We\u2019ll then see how the java.nio buffers relate to the channel classes of java.nio.channels.<\/p>\n<h4><a title=\"Java NIO 2.0 : Channels\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/java-nio-2-0-channels\/\" target=\"_blank\" rel=\"noopener noreferrer\">NIO Channels<\/a><\/h4>\n<p>Channels are the second major innovation of java.nio after <strong><a title=\"Java NIO 2.0 : Working With Buffers\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/java-nio-2-0-working-with-buffers\/\">buffers<\/a><\/strong> which we have learned in my previous tutorial in detail. Channels provide direct connections to I\/O services.<strong> A Channel is a medium that transports data efficiently between byte buffers and the entity on the other end of the channel (usually a file or socket).<\/strong> Usually channels have a one-to-one relationship with operating-system file descriptors. The channel classes provide the abstraction needed to maintain platform independence but still model the native I\/O capabilities of modern operating systems. Channels are gateways through which the native I\/O services of the operating system can be accessed with a minimum of overhead, and buffers are the internal endpoints used by channels to send and receive data.<\/p>\n<h3><strong>How to Use NIO in Your Application<br \/>\n<\/strong><\/h3>\n<h4><a title=\"Read file line by line in java 8: Streams of Lines Example\" href=\"https:\/\/howtodoinjava.com\/java8\/read-file-line-by-line\/\" target=\"_blank\" rel=\"noopener noreferrer\">Read file line by line using NIO<\/a><\/h4>\n<p>In this post, I am giving example of a very useful task in day to day programming i.e. <strong>reading files line by line<\/strong> using java IO and perform some operations of lines. Before moving ahead, let me mention the file content which I will read in all examples in this post.<\/p>\n<p>I will read the content of file line by line and check if any line contains word <code>\"password\"<\/code> then print it.<\/p>\n<h4><a title=\"3 ways to read files using Java NIO\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/nio-read-file\/\"><strong>3 ways to read files using Java NIO<\/strong><\/a><\/h4>\n<p>In this post, I am showing a couple of ways to read a file from file system.<\/p>\n<h4><a title=\"Java NIO : How to transfer data between channels?\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/transfer-data-between-channels\/\" target=\"_blank\" rel=\"noopener noreferrer\">How to transfer data between channels?<\/a><\/h4>\n<p>As in normal java applications where IO happens mostly between an input source and output target, in NIO as well you may need to transfer data from one channel to another channel very frequently. Bulk transfers of file data from one place to another is so common that a couple of optimization methods have been added to the <code>FileChannel<\/code> class to make it even more efficient.<\/p>\n<p>Lets learn about these methods.<\/p>\n<h4><a title=\"Java NIO 2.0 : Memory-Mapped Files | MappedByteBuffer Tutorial\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/memory-mapped-files-mappedbytebuffer\/\" target=\"_blank\" rel=\"noopener noreferrer\">Memory-Mapped Files and MappedByteBuffer<\/a><\/h4>\n<p>Memory-mapped I\/O uses the filesystem to establish a virtual memory mapping from user space directly to the applicable filesystem pages. With a memory-mapped file, you can pretend that the entire file is in memory and that you can access it by simply treating it as a very large array. This approach greatly simplifies the code you write in order to modify the file.<\/p>\n<h4><a title=\"Java NIO 2.0 : Scatter\/Gather or Vectored IO\" href=\"https:\/\/howtodoinjava.com\/java\/nio\/nio-scatter-gather-vectored-io\/\" target=\"_blank\" rel=\"noopener noreferrer\">Scatter\/Gather or Vectored IO<\/a><\/h4>\n<p><strong>A scattering read from a channel is a read operation that reads data into more than one buffer.<\/strong> Thus, the channel \u201c<strong>scatters<\/strong>\u201d the data from the channel into multiple buffers. <strong>A gathering write to a channel is a write operation that writes data from more than one buffer into a single channel.<\/strong> Thus, the channel \u201c<strong>gathers<\/strong>\u201d the data from multiple buffers into one channel. Scatter \/ gather can be really useful in situations where you need to work with various parts of the transmitted data separately.<\/p>\n<h3><strong>References:<\/strong><\/h3>\n<h5><a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/essential\/io\/fileio.html\">http:\/\/docs.oracle.com\/javase\/tutorial\/essential\/io\/fileio.html<\/a><\/h5>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java NIO (New IO) is an alternative IO API for Java (from Java 1.4), meaning alternative to the standard Java IO API&#8217;s. Java NIO offers a different way of working with IO than the standard IO API&#8217;s. In this page, I will list down all available posts related to NIO, available in this blog. &nbsp;Pre-requisites &#8230; <a title=\"Java NIO Tutorial (with Examples)\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-nio-tutorials\/\" aria-label=\"More on Java NIO Tutorial (with Examples)\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Java NIO (New IO) is an alternative IO API for Java (from Java 1.4), meaning alternative to the standard Java IO API&#8217;s. Java NIO offers a different way of working with IO than the standard IO API&#8217;s. In this page, I will list down all available posts related to NIO, available in this blog. &nbsp;Pre-requisites&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/2666"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=2666"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/2666\/revisions"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=2666"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}