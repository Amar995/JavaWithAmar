{"id":11942,"date":"2018-10-22T16:27:25","date_gmt":"2018-10-22T10:57:25","guid":{"rendered":"https:\/\/howtodoinjava.com\/?page_id=11942"},"modified":"2022-07-09T17:29:09","modified_gmt":"2022-07-09T11:59:09","slug":"java-hashmap","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-hashmap\/","title":{"rendered":"Guide to Java HashMap"},"content":{"rendered":"<p><strong>HashMap in Java<\/strong> in a collection class which implements <strong>Map<\/strong> interface. It is used to store <strong>key &#038; value<\/strong> pairs. Each key is mapped to a single value in the map. <\/p>\n<p>Keys are unique. It means we can insert a key &#8216;K&#8217; only once in a map. Duplicate keys are not allowed. Though a value <code>'V'<\/code> can be mapped to multiple keys.<\/p>\n<h2>1. java.util.HashMap Class<\/h2>\n<h4>1.1. HashMap class declaration<\/h4>\n<p><a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/HashMap.html\" rel=\"noopener noreferrer\" target=\"_blank\">HashMap<\/a> has been declared as following:<\/p>\n<pre class=\"brush: java; title: HashMap class declaration; notranslate\" title=\"HashMap class declaration\">\r\npublic class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; \r\n\t\t\t\timplements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable  \r\n<\/pre>\n<h4>1.2. HashMap class Hierarchy<\/h4>\n<p>As shown above, HashMap implements <code>Map<\/code> interface and extends <code>AbstractMap<\/code> class.<\/p>\n<figure id=\"attachment_11943\" aria-describedby=\"caption-attachment-11943\" style=\"width: 151px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/HashMap-Hierarchy.png\" alt=\"HashMap Hierarchy\" width=\"161\" height=\"203\" class=\"size-full wp-image-11943\" \/><figcaption id=\"caption-attachment-11943\" class=\"wp-caption-text\">HashMap Hierarchy<\/figcaption><\/figure>\n<h2>2. Java HashMap Features<\/h2>\n<ul>\n<li>HashMap cannot contain duplicate keys.<\/li>\n<li>HashMap allows multiple <code>null<\/code> values but only one <code>null<\/code> key.<\/li>\n<li>HashMap is an <strong>unordered collection<\/strong>. It does not guarantee any specific order of the elements.<\/li>\n<li>HashMap is <strong>not thread-safe<\/strong>. You must explicitly synchronize concurrent modifications to the HashMap. Or you can use <strong>Collections.synchronizedMap(hashMap)<\/strong> to get the synchronized version of HashMap.<\/li>\n<li>A value can be retrieved only using the associated key.<\/li>\n<li>HashMap stores only object references. So primitives must be used with their corresponding wrapper classes. Such as <code>int<\/code>\n<li>will be stored as <code>Integer<\/code>.<\/li>\n<li>HashMap implements <strong>Cloneable<\/strong> and <strong>Serializable<\/strong> interfaces.<\/li>\n<\/ul>\n<h2>3. HashMap internal implementation<\/h2>\n<p>HashMap works on principle of hashing. Hashing is a way to assigning a unique code for any variable\/object after applying any formula\/algorithm on its properties. Each object in java has it&#8217;s <strong>hash code<\/strong> in such a way that two equal objects must produce the same hash code consistently.<\/p>\n<h4>3.1. HashMap.Entry class<\/h4>\n<p>The key-value pairs are stored as instance of inner class <code>HashMap.Entry<\/code> which has key and value mapping stored as attributes. key has been marked as <code>final<\/code>.<\/p>\n<pre class=\"brush: java; title: HashMap.Entry class; notranslate\" title=\"HashMap.Entry class\">\r\nstatic class Entry&amp;lt;K ,V&amp;gt; implements Map.Entry&amp;lt;K, V&amp;gt;\r\n{\r\n    final K key;\r\n    V value;\r\n\r\n    Entry&amp;lt;K ,V&amp;gt; next;\r\n    final int hash;\r\n\r\n    ...\/\/More code goes here\r\n}\r\n<\/pre>\n<h4>3.2. Internal working<\/h4>\n<p>All instances of Entry class are stored in an array declard as <code>'transient Entry[] table'<\/code>. For each key-value to be stored in HashMap, a hash value is calculated using the key\u2019s hash code. This hash value is used to calculate the <strong>index<\/strong> in the array for storing Entry object.<\/p>\n<p>In case of <strong>collision<\/strong>, where multiple keys are mapped to single index location, a <strong>linked list<\/strong> of formed to store all such key-value pairs which should go in single array index location.<\/p>\n<p>While retrieving the value by key, first index location is found using key&#8217;s hashcode. Then all elements are iterated in the linkedlist and correct value object is found by identifying the correct key using it&#8217;s <strong>equals()<\/strong> method.<\/p>\n<h2>4. Java HashMap Example<\/h2>\n<p>Let&#8217;s quickly go through some examples to work with HashMap in Java.<\/p>\n<h4>4.1. Add key-value &#8211; HashMap.put()<\/h4>\n<pre class=\"brush: java; title: HashMap Example; notranslate\" title=\"HashMap Example\">\r\nimport java.util.HashMap;\r\n\r\npublic class HashMapExample \r\n{\r\n    public static void main(String[] args) throws CloneNotSupportedException \r\n    {\r\n        HashMap&amp;lt;Integer, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;();\r\n        \r\n        map.put(1,  &amp;quot;A&amp;quot;);\r\n        map.put(2,  &amp;quot;B&amp;quot;);\r\n        map.put(3,  &amp;quot;C&amp;quot;);\r\n        \r\n        System.out.println(map);\r\n    }\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n{1=A, 2=B, 3=C}\r\n<\/pre>\n<h4>4.2. Get value by key &#8211; HashMap.get()<\/h4>\n<pre class=\"brush: java; title: HashMap Example; notranslate\" title=\"HashMap Example\">\r\nHashMap&amp;lt;Integer, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;();\r\n        \r\nmap.put(1,  &amp;quot;A&amp;quot;);\r\nmap.put(2,  &amp;quot;B&amp;quot;);\r\nmap.put(3,  &amp;quot;C&amp;quot;);\r\n\r\nString value = map.get(2);\r\n\r\nSystem.out.println(&amp;quot;The value is :: &amp;quot;+  value );\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nThe value is :: B\r\n<\/pre>\n<h4>4.3. Remove pair by key &#8211; HashMap.remove()<\/h4>\n<pre class=\"brush: java; title: HashMap Example; notranslate\" title=\"HashMap Example\">\r\nHashMap&amp;lt;Integer, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;();\r\n\r\nmap.put(1, &amp;quot;A&amp;quot;);\r\nmap.put(2, &amp;quot;B&amp;quot;);\r\nmap.put(3, &amp;quot;C&amp;quot;);\r\n\r\nSystem.out.println(map);\r\n\r\nmap.remove(3);\r\n\r\nSystem.out.println(map);\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n{1=A, 2=B, 3=C}\r\n{1=A, 2=B}\r\n<\/pre>\n<h4>4.4. Iterate a HashMap<\/h4>\n<p>Please note that iterators of this class are <strong>fail-fast<\/strong> and if any structure modification is done after creation of iterator, it will throw <code>ConcurrentModificationException<\/code>.<\/p>\n<pre class=\"brush: java; title: HashMap Example; notranslate\" title=\"HashMap Example\">\r\nHashMap&amp;lt;Integer, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;();\r\n\r\nmap.put(1, &amp;quot;A&amp;quot;);\r\nmap.put(2, &amp;quot;B&amp;quot;);\r\nmap.put(3, &amp;quot;C&amp;quot;);\r\n\r\nSystem.out.println(&amp;quot;\/\/Iterate over keys&amp;quot;);\r\n\r\nIterator&amp;lt;Integer&amp;gt; itr = map.keySet().iterator();\r\n\r\nwhile (itr.hasNext()) \r\n{\r\n    Integer key = itr.next();\r\n    String value = map.get(key);\r\n    \r\n    System.out.println(&amp;quot;The key is :: &amp;quot; + key + &amp;quot;, and value is :: &amp;quot; + value );\r\n}\r\n\r\nSystem.out.println(&amp;quot;\/\/Iterate over entries set&amp;quot;);\r\n\r\nIterator&amp;lt;Entry&amp;lt;Integer, String&amp;gt;&amp;gt; entryIterator = map.entrySet().iterator();\r\n\r\nwhile (entryIterator.hasNext()) \r\n{\r\n    Entry&amp;lt;Integer, String&amp;gt; entry = entryIterator.next();\r\n    \r\n    System.out.println(&amp;quot;The key is :: &amp;quot; + entry.getKey() + &amp;quot;, and value is :: &amp;quot; + entry.getValue() );\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n\/\/Iterate over keys\r\nThe key is :: 1, and value is :: A\r\nThe key is :: 2, and value is :: B\r\nThe key is :: 3, and value is :: C\r\n\r\n\/\/Iterate over entries set\r\nThe key is :: 1, and value is :: A\r\nThe key is :: 2, and value is :: B\r\nThe key is :: 3, and value is :: C\r\n<\/pre>\n<h2>5. HashMap Methods<\/h2>\n<p>List of methods in HashMap class and their short description.<\/p>\n<ol>\n<li><strong>void clear()<\/strong> : removes all the key-value pairs from the HashMap.<\/li>\n<li><strong>Object clone()<\/strong> : returns a shallow copy of the specified HashMap.<\/li>\n<li><strong>boolean containsKey(Object key)<\/strong> : returns <code>true<\/code> or <code>false<\/code> based on whether the specified key is found in the map or not.<\/li>\n<li><strong>boolean containsValue(Object Value)<\/strong> : Similar to containsKey() method, it looks for the specified value instead of key.<\/li>\n<li><strong>Object get(Object key)<\/strong> : returns the value for the specified key in the HashMap.<\/li>\n<li><strong>boolean isEmpty()<\/strong> : checks whether the map is empty.<\/li>\n<li><strong>Set keySet()<\/strong> : returns the <strong>Set<\/strong> of the all keys stored in the HashMap.<\/li>\n<li><strong>Object put(Key k, Value v)<\/strong> : Inserts key-value pair into the HashMap.<\/li>\n<li><strong>int size()<\/strong> : returns the size of the map which is equal to the number of key-value pairs stored in the HashMap.<\/li>\n<li><strong>Collection values()<\/strong> : returns a collection of all values  in the map.<\/li>\n<li><strong>Value remove(Object key)<\/strong> : removes the key-value pair for the specified key.<\/li>\n<li><strong>void putAll(Map m)<\/strong> : copies all the elements of a map to the another specified map.<\/li>\n<\/ol>\n<h2>6. HashMap tutorials and examples<\/h2>\n<ul>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/how-hashmap-works-in-java\/\">How HashMap works in Java<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/performance-comparison-of-different-ways-to-iterate-over-hashmap\/\">Performance Comparison of Different Ways to Iterate over HashMap<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/design-good-key-for-hashmap\/\">How to design good custom key object for HashMap <\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap-vs-hashtable\/\">Difference between HashMap and Hashtable in Java<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/sort\/java-sort-map-by-key\/\">Java sort Map by keys (ascending and descending orders)<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/sort\/java-sort-map-by-values\/\">Java sort Map by values (ascending and descending orders)<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/\">Java hashCode() and equals() &#8211; Contract, rules and best practices<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/interview-questions\/hashmap-concurrenthashmap-interview-questions\/\">HashMap and ConcurrentHashMap Interview Questions<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/best-practices-for-using-concurrenthashmap\/\">Java ConcurrentHashMap Best Practices<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/jackson\/jackson-json-to-from-hashmap\/\">Convert JSON to Map and Map to JSON<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/jaxb\/jaxb-example-marshalling-and-unmarshalling-hashmap-in-java\/\">Marshal and Unmarshal HashMap in Java<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/string\/how-to-find-duplicate-words-in-a-string-in-java\/\">How to Find Duplicate Words in String using HashMap<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/compare-two-hashmaps\/\">Compare two hashmaps<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/synchronize-hashmap\/\">Synchronize HashMap<\/a><\/li>\n<li><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/merge-two-hashmaps\/\">Merge two HashMaps<\/a><\/li>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/shallow-deep-copy-hashmap\/\">How to clone a HashMap<\/a><\/ul>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>HashMap in Java in a collection class which implements Map interface. It is used to store key &#038; value pairs. Each key is mapped to a single value in the map. Keys are unique. It means we can insert a key &#8216;K&#8217; only once in a map. Duplicate keys are not allowed. Though a value &#8230; <a title=\"Guide to Java HashMap\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-hashmap\/\" aria-label=\"More on Guide to Java HashMap\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11948,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Java-HashMap.png",300,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Java-HashMap.png",150,100,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Java-HashMap.png",300,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Java-HashMap.png",300,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Java-HashMap.png",300,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Java-HashMap.png",300,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Java-HashMap.png",300,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Java-HashMap.png",120,80,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"HashMap in Java in a collection class which implements Map interface. It is used to store key &#038; value pairs. Each key is mapped to a single value in the map. Keys are unique. It means we can insert a key &#8216;K&#8217; only once in a map. Duplicate keys are not allowed. Though a value&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/11942"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=11942"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/11942\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11948"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=11942"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}