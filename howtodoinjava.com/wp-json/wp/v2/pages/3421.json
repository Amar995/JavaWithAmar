{"id":3421,"date":"2014-01-22T04:12:14","date_gmt":"2014-01-22T04:12:14","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=3421"},"modified":"2022-01-14T02:10:32","modified_gmt":"2022-01-13T20:40:32","slug":"java-interview-questions","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-interview-questions\/","title":{"rendered":"Java Interview Preparation Guide"},"content":{"rendered":"\n<p>Have a planned job interview in the coming days? This guide having 200+ questions will help you revise most asked Java interview questions from beginner level to experienced and asked in small startups to big corporates.<\/p>\n\n\n\n<p>This guide starts with basic core java questions and progresses towards more advanced topics. I have tried to add answers to most questions and links to resources to read more about the subject. <\/p>\n\n\n\n<p>It is not possible to include every possible question in this guide, so I have included some good resources at the end of this interview guide.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-d05052ed \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-core-java-questions\">1. Core Java Questions<\/a><li class=\"uagb-toc__list\"><a href=\"#2-concurrency-questions\">2. Concurrency Questions<\/a><li class=\"uagb-toc__list\"><a href=\"#3-questions-on-patterns-and-practices\">3. Questions on Patterns and Practices<\/a><li class=\"uagb-toc__list\"><a href=\"#4-spring-framework-questions\">4. Spring Framework Questions<\/a><li class=\"uagb-toc__list\"><a href=\"#5-test-your-knowledge\">5. Test Your Knowledge<\/a><li class=\"uagb-toc__list\"><a href=\"#6-recommended-books\">6. Recommended Books<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. Core Java Questions<\/h2>\n\n\n\n<h4>1.1. <a href=\"https:\/\/howtodoinjava.com\/interview-questions\/core-java-interview-questions\/\">Core Java Interview Questions<\/a><\/h4>\n\n\n\n<p>Generally, each interviewer will start with core Java concepts before jumping onto more advanced topics. The reason is simply that he wants you to feel comfortable.<\/p>\n\n\n\n<p>These questions may range from simple object-oriented principles to most used Java classes such as <code>String<\/code> or <code>HashMap<\/code>. I refer to them as simple questions because they test your foundation, basic knowledge, and curiosity to go deeper into details. Try to answer all such questions. They are low-hanging fruits that you should not miss.<\/p>\n\n\n\n<p>These questions will help you quickly revise most asked core java questions in a very short period.<\/p>\n\n\n\n<h4>1.2. <a href=\"https:\/\/howtodoinjava.com\/java-examples\/internal-cache-wrapper-classes\/\">Object Initialization Best Practices<\/a><\/h4>\n\n\n\n<p>In Java, <strong>object initialization<\/strong> is considered a heavy process and you are expected to know how each newly created object affects memory and application performance. A simple example is Java wrapper classes which look very easy from the outside, just like primitives, but they are not as easy as they look. Learn how Java helps you with the internal caching of objects inside wrapper classes such as <code>Double<\/code>, <code>Long<\/code> or <code>Integer<\/code>.<\/p>\n\n\n\n<h4>1.3. <a title=\"How hashmap works in java\" href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/how-hashmap-works-in-java\/\">How HashMap Works in Java<\/a><\/h4>\n\n\n\n<p><code><a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/HashMap.html\">HashMap<\/a><\/code> is probably the most discussed and controversial topic if you are appearing in any junior or mid-level interview. You can face any interview question related to <code>HashMap<\/code> if you know how hashmap works internally? This post will help you in answering some good questions like &#8211;<\/p>\n\n\n\n<ul><li>How HashMap store key-value pairs?<\/li><li>How HashMap resolve conflicts?<\/li><li>How hashCode() and equals() method are used in HashMap?<\/li><li>Impact of random\/fixed hashCode() value for key?<\/li><li>Using HashMap in multi-threaded environment?<\/li><\/ul>\n\n\n\n<h4>1.4. <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/design-good-key-for-hashmap\/\">Design a Good Key for HashMap<\/a><\/h4>\n\n\n\n<p>So you know now how <code>HashMap<\/code> works? Now learn about designing a good key for <code>HashMap<\/code>. This question is an excellent way to test if you correctly understood HashMap&#8217;s internal working. This will help you in answering questions like &#8211;<\/p>\n\n\n\n<ul><li>Why <code>String<\/code> is a good key for HashMap?<\/li><li>How you will design a class to be used as key?<\/li><li>Will you override hashCode() method in Key class? What will be impacts?<\/li><li>Write the syntax for a class which can be HashMap key object?<\/li><\/ul>\n\n\n\n<h4>1.5. <a title=\"concurrenthashmap\" href=\"https:\/\/howtodoinjava.com\/tag\/concurrenthashmap\/\">Questions on ConcurrentHashMap<\/a><\/h4>\n\n\n\n<p>HashMap is not thread-safe. We can use <strong>HashTable<\/strong> in concurrent applications, but it impacts the application performance. So we have <code>ConcurrentHashMap<\/code>. It is the concurrent version of <code>HashMap<\/code> which gives the same performance as HashMap and it is also thread-safe at the same time.<\/p>\n\n\n\n<p>You are expected to know ConcurrentHashMap in more depth. There are plenty of concepts in this single class alone. <\/p>\n\n\n\n<h4>1.6. <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/useful-java-collection-interview-questions\/\">Java Collections Interview Questions<\/a><\/h4>\n\n\n\n<p>Should I recommend you to prepare the <strong>Collection framework<\/strong> and all of its main classes? I guess you are already intelligent enough.<\/p>\n\n\n\n<p>Any interview (junior and mid-level) will be incomplete if there are no questions related to the Collections framework. It truly tests your programming skills and your knowledge of core Java APIs. Questions may be as simple as Collections hierarchy to difficult ones such as Queue and Stacks. Here is a list of such commonly asked collections interview questions &#8211;<\/p>\n\n\n\n<ul><li>Explain Collections hierarchy?<\/li><li>Difference between <strong>Set<\/strong> and <strong>List<\/strong>?<\/li><li>Difference between <strong>Vector<\/strong> and <strong>ArrayList<\/strong>?<\/li><li>Difference between HashMap and HashTable?<\/li><li>Difference between <strong>Iterator<\/strong> and <strong>ListIterator<\/strong>?<\/li><li>Why Map interface does not extend Collection interface?<\/li><li>How to convert an array of String to ArrayList?<\/li><li>How to reverse the list?<\/li><li>How HashSet store elements?<\/li><li>Can a null element added to a <strong>TreeSet<\/strong> or <strong>HashSet<\/strong>?<\/li><li>What are <strong>IdentityHashMap<\/strong> and <strong>WeakHashMap<\/strong>?<\/li><li>When to use HashMap or TreeMap?<\/li><li>How to make a collection read only?<\/li><li>How to make a collection thread safe?<\/li><li>What is difference between <strong>fail-fast<\/strong> and <strong>fail-safe<\/strong>?<\/li><li>What is <strong>Comparable<\/strong> and <strong>Comparator<\/strong> interface?<\/li><li>What are Collections and <strong>Arrays<\/strong> class?<\/li><li>What is <strong>Queue<\/strong> and <strong>Stack<\/strong>? List their differences?<\/li><\/ul>\n\n\n\n<h4>1.7. <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/what-is-polymorphism-in-java\/\">What is polymorphism in Java?<\/a><\/h4>\n\n\n\n<p>In simple words, <strong>polymorphism<\/strong> is the ability by which we can create functions or reference variables that behave differently in a different programmatic context. Polymorphism is one of the major building blocks of object-oriented programming along with inheritance, abstraction, and encapsulation.<\/p>\n\n\n\n<p>Learn the concept in more detail with examples. This is just so much important.<\/p>\n\n\n\n<h4>1.8. <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/\">What is abstraction in Java?<\/a><\/h4>\n\n\n\n<p>In the previous question, you learned polymorphism. Now it&#8217;s time to expand your knowledge by understanding <strong>abstraction<\/strong> as well. A very complicated topic for any Java interview.<\/p>\n\n\n\n<h4>1.9. <a title=\"Encapsulation in java and its relation with abstraction\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/encapsulation-in-java-and-its-relation-with-abstraction\/\">Abstraction vs. Encapsulation?<\/a><\/h4>\n\n\n\n<p>Knowing the difference between abstraction and <strong>encapsulation<\/strong> is the key to profoundly understanding both concepts. You cannot learn either of both in isolation. They walk along in Java, so we must understand them collectively.<\/p>\n\n\n\n<p>In this post, I have explained encapsulation and differentiated it with abstraction. A must-read interview question before moving forward.<\/p>\n\n\n\n<h4>1.10. <a title=\"Exploring interfaces and abstract classes in java\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/exploring-interfaces-and-abstract-classes-in-java\/\">Difference between Interfaces and Abstract Classes?<\/a><\/h4>\n\n\n\n<p>There has been obvious separation <strong>abstract classes<\/strong> and <strong>interfaces<\/strong> in Java since the language was born. But a lot has changed since Java 8 release. Its one of the core concepts was functional interfaces.<\/p>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/stream\/functional-interface-tutorial\/\">Functional interfaces<\/a> completely changed how we look at both fundamental building blocks of Java language. You cannot skip this question if your resume says you work on Java 8. In the linked tutorial, I will show you the correct scenarios, which will help you crack some complex interview questions and case studies.<\/p>\n\n\n\n<h4>1.11. <a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/\">Enum interview questions<\/a><\/h4>\n\n\n\n<p>The enum has been a core building block for a long time. They can be seen in the most popular Java libraries. They help you in managing constants in a more object-oriented manner. They look straightforward but they hide lots of complexity if you dig deep enough. Some enum questions maybe &#8211;<\/p>\n\n\n\n<ul><li>Difference between enum vs. Enum class?<\/li><li>Can enum be using with String?<\/li><li>Can we extend enum?<\/li><li>Write syntax of enum?<\/li><li>How to implement reverse-lookup in enum?<\/li><li>What is EnumMap and EnumSet?<\/li><\/ul>\n\n\n\n<h4>1.12. <a href=\"https:\/\/howtodoinjava.com\/java\/serialization\/java-serialization\/\">Java Serialization and Serializable Interface<\/a><\/h4>\n\n\n\n<p>Suppose you are preparing for a Java interview with a Telecom company or any such domain that uses serialization in their application flows. In that case, you will highly benefit from this tutorial. There is a very good list of do&#8217;s and dont&#8217;s with serialization in Java. Possible questions may include &#8211;<\/p>\n\n\n\n<ul><li>What is <strong>serialVersionUID<\/strong>?<\/li><li>What is <strong>readObject<\/strong> and <strong>writeObject<\/strong>?<\/li><li>ow you will serialize and deserialize a class?<\/li><li>How you will make changes to a class so that serialization should not break?<\/li><li>Can we serialize static fields?<\/li><\/ul>\n\n\n\n<h4>1.13. <a title=\"A mini guide to main method in java\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/main-method\/\">Java Main Method<\/a><\/h4>\n\n\n\n<p>Ever wondered why <code><strong>main()<\/strong><\/code> is public, static and void? It&#8217;s not a very frequently asked interview question in Java interviews but still, I will recommend reading this post to answer these questions:<\/p>\n\n\n\n<ul><li>Java main method syntax?<\/li><li>Why main method is public?<\/li><li>Why main method is static?<\/li><li>Why main method is void?<\/li><li>What happens internally when you invoke main method?<\/li><\/ul>\n\n\n\n<h4>1.14. <a title=\"A guide to object cloning in java\" href=\"https:\/\/howtodoinjava.com\/java\/cloning\/a-guide-to-object-cloning-in-java\/\">Java Object Clone<\/a><\/h4>\n\n\n\n<p>Object <strong>cloning<\/strong> in Java is not an easy concept. I took a long time to understand cloning in Java. It seems simple; use the Cloneable interface and override clone() method. But wait, there is much more to tell and ask in an interview. e.g.<\/p>\n\n\n\n<ul><li>How clone() method works?<\/li><li>What is shallow copy in Java?<\/li><li>What are copy constructors?<\/li><li>What is deep copy in Java?<\/li><li>Different ways to create deep copy of an object?<\/li><\/ul>\n\n\n\n<h4>1.15. <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/when-to-use-countdownlatch-java-concurrency-example-tutorial\/\">What is CountDownLatch?<\/a><\/h4>\n\n\n\n<p>Since Java 5, <code>java.uti.concurrent<\/code> package has lots of useful but complex classes to work on concurrent applications. <code>CountDownLatch<\/code> is one of those classes which are highly asked in any Java interview with big corporates. In this tutorial, <code>CountDownLatch<\/code> is explained with examples and concepts around it.<\/p>\n\n\n\n<h4>1.16. <a title=\"Java interview question: Why Strings are immutable?\" href=\"https:\/\/howtodoinjava.com\/java\/string\/java-interview-question-why-strings-are-immutable\/\">Why Strings are Immutable?<\/a><\/h4>\n\n\n\n<p>This question is a prevalent interview question at the beginner level. Basically, the interviewer tests your knowledge around the String class, <a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-constant-pool\/\">string pool<\/a>, memory areas and object creation.<\/p>\n\n\n\n<p>I wrote this post separately because the concept is so much important. In fact, <strong>immutability<\/strong> is itself a very important concept in Java. Feel the tip of the iceberg.<\/p>\n\n\n\n<h4>1.17. <a title=\"How to make a java class immutable\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/\">How to Make a Java class immutable?<\/a><\/h4>\n\n\n\n<p>An immutable class is one whose state can not be changed once created. There are certain guidelines to create a class immutable in Java and you must know them to answer this question correctly.<\/p>\n\n\n\n<p>Be aware that immutability is important in many design aspects and is a recommended design pattern by all Java gurus. Learn to make a java class immutable, how it benefits the application design and be prepared to encounter more software design interview questions on it.<\/p>\n\n\n\n<h2>2. Concurrency Questions<\/h2>\n\n\n\n<h4>2.1. <a title=\"What is Thread Safety?\" href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/what-is-thread-safety\/\" target=\"_blank\" rel=\"noopener noreferrer\">What is Thread Safety?<\/a><\/h4>\n\n\n\n<p>Defining <strong>thread safety<\/strong> is surprisingly tricky. At the heart of any reasonable definition of thread-safety is the concept of correctness. So, before understanding the thread-safety, we should first understand this &#8220;correctness&#8221;.<\/p>\n\n\n\n<p>In this must-read Java tutorial, clear your doubts and be ready to answer some popular interview questions. e.g.<\/p>\n\n\n\n<ul><li>What is correctness in thread safety?<\/li><li>Give an example of thread-safe class?<\/li><li>How you will design a thread safe Java class?<\/li><li>Are immutable classes thread safe?<\/li><\/ul>\n\n\n\n<h4>2.2. <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/object-vs-class-level-locking\/\" target=\"_blank\" rel=\"noopener noreferrer\">Object level locking vs. class level locking<\/a><\/h4>\n\n\n\n<p>At the heart of <strong>concurrency<\/strong>, there lie the concepts of object locking. Locking happens at instance level as well as class level.<\/p>\n\n\n\n<ul><li>Object level locking is mechanism when you want to synchronize a non-static method or non-static code block such that only one thread will be able to execute the code block on given instance of the class. This should always be done to make instance level data thread safe.<\/li><li>Class level locking prevents multiple threads to enter in a synchronized block in any of all available instances on runtime. This means if in runtime there are 100 instances of <code>DemoClass<\/code>, then only one thread will be able to execute <code>demoMethod()<\/code> in any one of the instances at a time, and all other instances will be locked for other threads. This should always be done to make static data thread safe.<\/li><\/ul>\n\n\n\n<p>Understand the whole concept in detail in this tutorial.<\/p>\n\n\n\n<h4>2.3. <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/java-runnable-vs-thread\/\" target=\"_blank\" rel=\"noopener noreferrer\">Difference between &#8220;implements Runnable&#8221; and &#8220;extends Thread&#8221;?<\/a><\/h4>\n\n\n\n<p>This question is also a very popular interview question. If your role demands creating designs for concurrent applications, you must know the correct answer to this question. The answer to this question decides which construct you choose between both.<\/p>\n\n\n\n<p>Also, it will help you in answering fundamental questions such as &#8211;<\/p>\n\n\n\n<ul><li>Difference between Thread and Runnable?<\/li><li>Write Java code to create thread with Runnable interface?<\/li><li>Which method should be preferred between both?<\/li><\/ul>\n\n\n\n<h4>2.4. <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/compare-and-swap-cas-algorithm\/\" target=\"_blank\" rel=\"noopener noreferrer\">Compare and Swap [CAS] Algorithm<\/a><\/h4>\n\n\n\n<p>This question is targeted towards mid-level or senior developers. This requires a deep understanding of other concurrent concepts before answering this question. So It is an excellent way to test deep knowledge in Java concurrency.<\/p>\n\n\n\n<ul><li>What is optimistic and pessimistic locking?<\/li><li>What is compare and swap algorithm?<\/li><li>What is an atomic operation?<\/li><li>How AtomicInteger and AtomicLong works?<\/li><\/ul>\n\n\n\n<h4>2.5. <a href=\"https:\/\/howtodoinjava.com\/java7\/forkjoin-framework-tutorial-forkjoinpool-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">What is Fork\/Join framework?<\/a><\/h4>\n\n\n\n<p>This is not a new concept but is now used in multiple ways since Java 8. Fork-Join breaks the task at hand into mini-tasks until the mini-task is simple enough that we can solve it without further breakups. It\u2019s like a divide-and-conquer algorithm. One important concept to note in this framework is that ideally no worker thread is idle. They implement a work-stealing algorithm in that idle workers steal the work from those workers who are busy.<\/p>\n\n\n\n<p>Learn this sweet and very efficient algorithm to better prepare for your next interview.<\/p>\n\n\n\n<h4>2.6. <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/java-thread-pool-executor-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">What is ThreadPoolExecutor?<\/a><\/h4>\n\n\n\n<p>In concurrent Java applications, creating a thread is an expensive operation. And if you start creating a new thread instance every time to execute a task, application performance will degrade indeed. ThreadPoolExecutor solves this problem.<\/p>\n\n\n\n<p>ThreadPoolExecutor separates the task creation and its execution. With ThreadPoolExecutor, you only have to implement the Runnable objects and send them to the executor. It is responsible for their execution, instantiation, and running with necessary threads.<\/p>\n\n\n\n<p>Read how ThreadPoolExecutor solves various problems and how it is used with <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/how-to-use-blockingqueue-and-threadpoolexecutor-in-java\/\">BlockingQueue<\/a>.<\/p>\n\n\n\n<h4>2.7. <a title=\"Java executor framework tutorial and best practices\" href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/executor-framework-tutorial\/\" target=\"_blank\" rel=\"noopener noreferrer\">Java executor framework tutorial and best practices<\/a><\/h4>\n\n\n\n<p>You will learn the executors in the previous link, but there are certain things you need to know for using these executors effectively in terms of performance.<\/p>\n\n\n\n<h4>2.8. <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/writing-a-deadlock-and-resolving-in-java\/\" target=\"_blank\" rel=\"noopener noreferrer\">How to write a deadlock and resolve in Java<\/a><\/h4>\n\n\n\n<p>It can come in the form of a puzzle. Better be ready for it. The interviewer may test your concurrency knowledge and your deep understanding on <code>wait()<\/code> and <code>notify()<\/code> method calls.<\/p>\n\n\n\n<p>Be ready with one <strong>deadlock<\/strong> source-code example at your fingertips. You will need it.<\/p>\n\n\n\n<h2>3. Questions on Patterns and Practices<\/h2>\n\n\n\n<h4>3.1. <a title=\"Best practices\" href=\"https:\/\/howtodoinjava.com\/java-best-practices\/\">Best Practices Guides<\/a><\/h4>\n\n\n\n<p>A list of highly recommended best practices. They will open up your mind to think in different directions. In short, they will sharpen your weapon for your next java interview.<\/p>\n\n\n\n<h4>3.2. <a title=\"Puzzles\" href=\"https:\/\/howtodoinjava.com\/puzzles\/\">Checkout some Puzzles<\/a><\/h4>\n\n\n\n<p>Solve these <strong>puzzles<\/strong> and play around them. You never know what will come in your way on a bad day.<\/p>\n\n\n\n<h4>3.3. <a title=\"Design patterns\" href=\"https:\/\/howtodoinjava.com\/design-patterns\/\">Brush up Design Patterns<\/a><\/h4>\n\n\n\n<p>Aiming for a senior position in your next java interview, you MUST know these design patterns to handle complex application design issues, which are usually discussed in all interviews nowadays.<\/p>\n\n\n\n<h4>3.4. <a title=\"Core java topics\" href=\"https:\/\/howtodoinjava.com\/java\/\">Random browsing on Core Java Topics<\/a><\/h4>\n\n\n\n<p>Still got the strength to read more. Browse more java interview questions here.<\/p>\n\n\n\n<h2>4. Spring Framework Questions<\/h2>\n\n\n\n<h4>4.1. <a href=\"https:\/\/howtodoinjava.com\/interview-questions\/top-spring-interview-questions-with-answers\/\">Spring Core Interview Questions<\/a><\/h4>\n\n\n\n<p>I have tried to collect some top spring core interview questions which you face into your next technical interview e.g.<\/p>\n\n\n\n<ul><li>What is Inversion of Control (IoC) and Dependency Injection (DI)?<\/li><li>Difference between BeanFactory and ApplicationContext?<\/li><li>What is Spring Java-Based Configuration?<\/li><li>Explain Spring Bean lifecycle?<\/li><li>What are different Spring Bean Scopes?<\/li><li>Are Singleton beans thread safe in Spring Framework?<\/li><li>Explain different modes of bean autowiring?<\/li><li>Explain @Qualifier annotation with example?<\/li><li>Difference between constructor injection and setter injection?<\/li><li>Name some of the design patterns used in Spring Framework?<\/li><\/ul>\n\n\n\n<h4>4.2. <a href=\"https:\/\/howtodoinjava.com\/interview-questions\/top-spring-aop-interview-questions-with-answers\/\">Spring AOP Interview Questions<\/a><\/h4>\n\n\n\n<p>Spring <strong>AOP<\/strong> (Aspect Oriented Programming) compliments OOPs in the sense that it also provides modularity. In OOPs, the key unit is Objects, but in AOP key unit is aspects or cross-cutting concerns such as logging and security. AOP provides the way to dynamically add the cross-cutting concern before, after or around the actual logic using simple pluggable configurations<\/p>\n\n\n\n<p>Go through these most asked AOP interview questions-<\/p>\n\n\n\n<ul><li>Difference between concern and cross-cutting concern?<\/li><li>What are the available AOP implementations?<\/li><li>What are the different advice types in spring AOP?<\/li><li>What is Spring AOP Proxy?<\/li><li>What is <strong>Joint point<\/strong> and <strong>Point cut<\/strong>?<\/li><li>What is aspect weaving?<\/li><\/ul>\n\n\n\n<h4>4.3. <a href=\"https:\/\/howtodoinjava.com\/interview-questions\/spring-mvc-interview-questions-with-answers\/\">Spring MVC Interview Questions<\/a><\/h4>\n\n\n\n<p>These Spring MVC interview questions and answers have been written to help you prepare for the interviews and quickly revise the concepts in general. I will strongly suggest you go deeper into each concept if you have extra time. In general, you should be able to answer these questions-<\/p>\n\n\n\n<ul><li>What is MVC Architecture?<\/li><li>What is DispatcherServlet and ContextLoaderListener?<\/li><li>How to use Java based configuration?<\/li><li>How can we use Spring to create Restful Web Service returning JSON response?<\/li><li>Difference between &lt;context:annotation-config&gt; vs &lt;context:component-scan&gt;?<\/li><li>Difference between @Component, @Controller, @Repository &amp; @Service annotations?<\/li><li>How does Spring MVC provide validation support?<\/li><li>What is Spring MVC Interceptor and how to use it?<\/li><li>How to handle exceptions in Spring MVC Framework?<\/li><li>How to achieve localization in Spring MVC applications?<\/li><\/ul>\n\n\n\n<h2>5. Test Your Knowledge<\/h2>\n\n\n\n<p>So far you have been learning all different concepts in Java which can come in front of you in the form of interview questions. It&#8217;s time to see whether you are prepared or not. Please go through some real questions asked from Sreenath Ravva, in his interview with Oracle Corporation.<\/p>\n\n\n\n<ul><li>Can you just start telling about your self and your project?<\/li><li>What is abstraction and encapsulation in java ?<\/li><li>Method Overloading rules?<\/li><li>Widening and narrowing in java?<\/li><li>Can I have only try block in code?<\/li><li>Threads : producer and consumer problem?<\/li><li>Why wait(), notify() and notifyAll() are defined in Object class?<\/li><li>Can we override wait() or notify() methods?<\/li><li>Difference between wait(), sleep() and yield()?<\/li><li>Explain about join() method in thread class?<\/li><li>Have you faced out of memory error? If yes how you fixed ? Tell different scenarios why it comes?<\/li><li>Database connection leakage?<\/li><li>Write a program to swap two numbers with out using third variable?<\/li><li>Write a program to sort an array and remove duplicates?<\/li><li>Write a program on Singleton?<\/li><li>Write a program to merge two arrays?<\/li><li>What is the use of final and finally keywords?<\/li><li>Can I declare class as static or private?<\/li><li>Why you want to change the company?<\/li><\/ul>\n\n\n\n<h2>6. Recommended Books<\/h2>\n\n\n\n<h4>6.1. <a title=\"java puzzlers\" href=\"https:\/\/www.amazon.com\/gp\/offer-listing\/032133678X\/\" target=\"_blank\" rel=\"noopener noreferrer\">Java Puzzlers<\/a><\/h4>\n\n\n\n<p>Every programming language has its quirks. This book reveals the oddities of the Java programming language through programming puzzles.<\/p>\n\n\n\n<h4>6.2. <a title=\" Java Concurrency in Practice \" href=\"https:\/\/www.amazon.com\/gp\/offer-listing\/\" target=\"_blank\" rel=\"noopener noreferrer\">Java Concurrency in Practice<\/a><\/h4>\n\n\n\n<p>Java Concurrency in Practice provides you with the concepts and techniques needed to write safe and scalable Java programs for today&#8217;s&#8211;and tomorrow&#8217;s&#8211;systems.<\/p>\n\n\n\n<h4>6.3. <a title=\"Effective Java\" href=\"https:\/\/www.amazon.com\/gp\/offer-listing\/0321356683\/\" target=\"_blank\" rel=\"noopener noreferrer\">Effective Java by Joshua Bloch<\/a><\/h4>\n\n\n\n<p>Effective Java, Second Edition, brings together seventy-eight indispensable programmer\u2019s rules of thumb: working, best-practice solutions for the programming challenges you encounter daily.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Have a planned job interview in the coming days? This guide having 200+ questions will help you revise most asked Java interview questions from beginner level to experienced and asked in small startups to big corporates. This guide starts with basic core java questions and progresses towards more advanced topics. I have tried to add &#8230; <a title=\"Java Interview Preparation Guide\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-interview-questions\/\" aria-label=\"More on Java Interview Preparation Guide\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":3629,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/java-interview-questions.jpg",225,225,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/java-interview-questions-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/java-interview-questions.jpg",225,225,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/java-interview-questions.jpg",225,225,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/java-interview-questions.jpg",225,225,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/java-interview-questions.jpg",225,225,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/java-interview-questions.jpg",225,225,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/java-interview-questions.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":14,"uagb_excerpt":"Have a planned job interview in the coming days? This guide having 200+ questions will help you revise most asked Java interview questions from beginner level to experienced and asked in small startups to big corporates. This guide starts with basic core java questions and progresses towards more advanced topics. I have tried to add&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/3421"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=3421"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/3421\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/3629"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=3421"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}