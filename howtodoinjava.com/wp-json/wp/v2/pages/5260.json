{"id":5260,"date":"2015-12-02T11:07:05","date_gmt":"2015-12-02T05:37:05","guid":{"rendered":"http:\/\/howtodoinjava.com\/?page_id=5260"},"modified":"2022-07-18T15:23:00","modified_gmt":"2022-07-18T09:53:00","slug":"java-concurrency-tutorial","status":"publish","type":"page","link":"https:\/\/howtodoinjava.com\/java-concurrency-tutorial\/","title":{"rendered":"Java Concurrency Tutorial"},"content":{"rendered":"\n<p>In simple words, <strong><a href=\"https:\/\/en.wikipedia.org\/wiki\/Concurrency_%28computer_science%29\" target=\"_blank\" rel=\"noopener noreferrer\">concurrency<\/a><\/strong> is the ability to run several programs or several parts of a program in parallel. Concurrency enables a program to achieve high performance and throughput by utilizing the untapped capabilities of the underlying operating system and machine hardware. For example, modern computers have several CPUs or several cores within one CPU, the program can utilize all cores for some part of the processing; thus completing tasks much before in time in comparison to sequential processing.<\/p>\n\n\n\n<p>The backbone of <strong>java concurrency<\/strong> is threading. A thread is a lightweight process that has its own call stack but can access shared data of other threads in the same process. A Java application runs by default in one process. Within a Java application, you can work with many threads to achieve parallel processing or concurrency.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-ff187a90 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-what-makes-a-java-application-concurrent\">1. What makes a Java Application Concurrent?<\/a><li class=\"uagb-toc__list\"><a href=\"#2-is-java-concurrency-really-that-simple\">2. Is Java Concurrency Really That Simple?<\/a><li class=\"uagb-toc__list\"><a href=\"#3-java-concurrency-tutorial\">3. Java Concurrency Tutorial<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-java-concurrency-basics\">3.1. Java Concurrency Basics<\/a><li class=\"uagb-toc__list\"><a href=\"#32-difference-between\">3.2. Difference between<\/a><li class=\"uagb-toc__list\"><a href=\"#33-executor-framework\">3.3. Executor Framework<\/a><li class=\"uagb-toc__list\"><a href=\"#34-advance-concurrency\">3.4. Advance Concurrency<\/a><li class=\"uagb-toc__list\"><a href=\"#35-concurrent-collections\">3.5. Concurrent Collections<\/a><li class=\"uagb-toc__list\"><a href=\"#36-project-loom\">3.6. Project Loom<\/a><li class=\"uagb-toc__list\"><a href=\"#37-miscellaneous\">3.7. Miscellaneous<\/a><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"h-1-what-makes-a-java-application-concurrent\">1. What makes a Java Application Concurrent?<\/h2>\n\n\n\n<p>In the very first class, you will need to make a java class concurrent, is <code><a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/lang\/Thread.html\" target=\"_blank\" rel=\"noopener noreferrer\">java.lang.Thread<\/a><\/code> class. This class is the basis of all concurrency concepts in java. Then you have <code><a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/lang\/Runnable.html\" target=\"_blank\" rel=\"noopener noreferrer\">java.lang.Runnable<\/a><\/code> interface to abstract the thread behavior out of the thread class.<\/p>\n\n\n\n<p>Other classes you will need to build advanced applications can be found at <code><a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/concurrent\/package-summary.html\" target=\"_blank\" rel=\"noopener noreferrer\">java.util.concurrent<\/a><\/code> package added in Java 1.5.<\/p>\n\n\n\n<h2 id=\"h-2-is-java-concurrency-really-that-simple\">2. Is Java Concurrency Really That Simple?<\/h2>\n\n\n\n<p>The above description gives the impression that concurrency is indeed a good concept, and is very easy to implement. Well, it is not. It requires a good amount of understanding of the basic concepts &#8211; as well as &#8211; a clear understanding of application goals.<\/p>\n\n\n\n<p>Concurrent applications usually have more complex designs in comparison to single-threaded applications. Code executed by multiple threads accessing shared data needs special attention. Errors arising from incorrect thread synchronization are very hard to detect, reproduce and fix. They usually show up in higher environments like production, and replicating the error is sometimes not possible in lower environments.<\/p>\n\n\n\n<p>Apart from complex defects, concurrency requires more resources to run the application. So make sure, you have sufficient resources in your kitty.<\/p>\n\n\n\n<h2 id=\"h-3-java-concurrency-tutorial\">3. Java Concurrency Tutorial<\/h2>\n\n\n\n<p>Covering whole java concurrency in a single post is simply almost impossible. So, I have written below Java Concurrency Tutorials discussing one individual concept in a single post. Go through these tutorials, and let me know if you have any questions or suggestions.<\/p>\n\n\n\n<h3 id=\"h-3-1-java-concurrency-basics\">3.1. Java Concurrency Basics<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/java-multi-threading-evolution-and-topics\/\" target=\"_blank\" rel=\"noopener noreferrer\">Concurrency Evolution<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/what-is-thread-safety\/\" target=\"_blank\" rel=\"noopener noreferrer\">What is Thread Safety?<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/object-vs-class-level-locking\/\" target=\"_blank\" rel=\"noopener noreferrer\">Object level locking and class level locking<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/compare-and-swap-cas-algorithm\/\" target=\"_blank\" rel=\"noopener noreferrer\">Compare and Swap [CAS] Algorithm<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/wait-notify-and-notifyall-methods\/\" target=\"_blank\" rel=\"noopener noreferrer\">wait(), notify() and notifyAll() methods<\/a><\/li><\/ul>\n\n\n\n<h3 id=\"h-3-2-difference-between\">3.2. Difference between<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/java-runnable-vs-thread\/\" target=\"_blank\" rel=\"noopener noreferrer\">Difference between \u201cimplements Runnable\u201d and \u201cextends Thread\u201d<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/multithreading-difference-between-lock-and-monitor\/\" target=\"_blank\" rel=\"noopener noreferrer\">Difference between lock and monitor<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/difference-between-yield-and-join-in-threads-in-java\/\" target=\"_blank\" rel=\"noopener noreferrer\">Difference between yield() and join()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/sleep-vs-wait\/\" target=\"_blank\" rel=\"noopener noreferrer\">Difference between sleep() and wait()?<\/a><\/li><\/ul>\n\n\n\n<h3 id=\"h-3-3-executor-framework\">3.3. Executor Framework<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/executor-framework-tutorial\/\" target=\"_blank\" rel=\"noopener noreferrer\">Executor framework tutorial<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/task-scheduling-with-executors-scheduledthreadpoolexecutor-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">ScheduledThreadPoolExecutor Example<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/java-fixed-size-thread-pool-executor-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">FixedSizeThreadPoolExecutor Example<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/java-thread-pool-executor-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">ThreadPoolExecutor Example<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/java-callable-future-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">ThreadPoolExecutor + Callable + Future Example<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/throttling-task-submission-rate-using-threadpoolexecutor-and-semaphore\/\" target=\"_blank\" rel=\"noopener noreferrer\">Throttling task submission rate using ThreadPoolExecutor and Semaphore<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/how-to-use-blockingqueue-and-threadpoolexecutor-in-java\/\" target=\"_blank\" rel=\"noopener noreferrer\">BlockingQueue Example<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/restart-thread-uncaughtexceptionhandler\/\" target=\"_blank\" rel=\"noopener noreferrer\">UncaughtExceptionHandler Example<\/a><\/li><\/ul>\n\n\n\n<h3 id=\"h-3-4-advance-concurrency\">3.4. Advance Concurrency<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java7\/forkjoin-framework-tutorial-forkjoinpool-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">ForkJoinPool Example<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/when-to-use-countdownlatch-java-concurrency-example-tutorial\/\" target=\"_blank\" rel=\"noopener noreferrer\">CountDownLatch Example<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/control-concurrent-access-to-multiple-copies-of-a-resource-using-semaphore\/\" target=\"_blank\" rel=\"noopener noreferrer\">Control concurrent access using semaphore<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/binary-semaphore-tutorial-and-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">BinarySemaphore<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/how-to-use-locks-in-java-java-util-concurrent-locks-lock-tutorial-and-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">java.util.concurrent.locks.Lock<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/creating-threads-using-java-util-concurrent-threadfactory\/\" target=\"_blank\" rel=\"noopener noreferrer\">java.util.concurrent.ThreadFactory<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/when-and-how-to-use-thread-local-variables\/\" target=\"_blank\" rel=\"noopener noreferrer\">ThreadLocal Variables<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/inter-thread-communication-using-piped-streams-in-java\/\" target=\"_blank\" rel=\"noopener noreferrer\">Inter-thread communication<\/a><\/li><\/ul>\n\n\n\n<h3 id=\"h-3-5-concurrent-collections\">3.5. Concurrent Collections<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/best-practices-for-using-concurrenthashmap\/\" target=\"_blank\" rel=\"noopener noreferrer\">ConcurrentHashMap Example<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/non-blocking-thread-safe-list-concurrentlinkeddeque-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">ConcurrentLinkedDeque Example<\/a><\/li><\/ul>\n\n\n\n<h3>3.6. Project Loom<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/virtual-threads\/\">Virtual Threads<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/structured-concurrency\/\">Structured Concurrency<\/a><\/li><\/ul>\n\n\n\n<h3 id=\"h-3-7-miscellaneous\">3.7. Miscellaneous<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/writing-a-deadlock-and-resolving-in-java\/\" target=\"_blank\" rel=\"noopener noreferrer\">Creating and resolving Deadlock<\/a><\/li><\/ul>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In simple words, concurrency is the ability to run several programs or several parts of a program in parallel. Concurrency enables a program to achieve high performance and throughput by utilizing the untapped capabilities of the underlying operating system and machine hardware. For example, modern computers have several CPUs or several cores within one CPU, &#8230; <a title=\"Java Concurrency Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java-concurrency-tutorial\/\" aria-label=\"More on Java Concurrency Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":5265,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/12\/Java-Concurrency.gif",451,359,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/12\/Java-Concurrency-150x150.gif",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/12\/Java-Concurrency-300x239.gif",300,239,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/12\/Java-Concurrency.gif",451,359,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/12\/Java-Concurrency.gif",451,359,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/12\/Java-Concurrency.gif",451,359,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/12\/Java-Concurrency.gif",451,359,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/12\/Java-Concurrency.gif",120,96,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"In simple words, concurrency is the ability to run several programs or several parts of a program in parallel. Concurrency enables a program to achieve high performance and throughput by utilizing the untapped capabilities of the underlying operating system and machine hardware. For example, modern computers have several CPUs or several cores within one CPU,&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/5260"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=5260"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/pages\/5260\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/5265"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=5260"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}