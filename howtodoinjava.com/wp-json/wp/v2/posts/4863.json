{"id":4863,"date":"2015-07-08T11:49:11","date_gmt":"2015-07-08T11:49:11","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4863"},"modified":"2020-12-26T00:44:25","modified_gmt":"2020-12-25T19:14:25","slug":"hadoop-big-data-tutorial","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/hadoop\/hadoop-big-data-tutorial\/","title":{"rendered":"Hadoop &#8211; Big Data Tutorial"},"content":{"rendered":"<p>In this <strong>hadoop tutorial<\/strong>, I will be discussing the <strong>need of big data technologies<\/strong>, the problems they intend to solve and some information around involved technologies and frameworks.<\/p>\n<pre style=\"clear: none;\"><strong>Table of Contents<\/strong>\r\n\r\n<a href=\"#how-big-is-big-data\">How really big is Big Data?<\/a>\r\n<a href=\"#characteristics-of-big-data\">Characteristics Of Big Data Systems<\/a>\r\n<a href=\"#google-solution\">How Google solved the Big Data problem?<\/a>\r\n<a href=\"#evolution-of-hadoop\">Evolution of Hadoop<\/a>\r\n<a href=\"#hadoop-distribution-content\">Apache Hadoop Distribution Bundle<\/a>\r\n<a href=\"#hadoop-ecosystem\">Apache Hadoop Ecosystem<\/a><\/pre>\n<p><a name=\"how-big-is-big-data\"><\/a><\/p>\n<h2>How really big is Big Data?<\/h2>\n<p>Let&#8217;s start with some quick facts. The amount of data produced by us from the beginning of time till 2003 was 5 billion gigabytes. The same amount was created in every two days in 2011, and in every ten minutes in 2013. This rate is still growing enormously. Statistic shows that 500+ terabytes of new data gets ingested into the databases of social media site Facebook, every day. This data is mainly generated in form of photo and video uploads, messages, comments etc [<a href=\"https:\/\/gigaom.com\/2012\/08\/22\/facebook-is-collecting-your-data-500-terabytes-a-day\/\" target=\"_blank\" rel=\"noopener noreferrer\">reference<\/a>]. Google processes 20 petabytes of information per day.<\/p>\n<p>See given below info-graphic. It will help you in realizing that how much data in generated these sources and similar of thousand sources.<\/p>\n<figure id=\"attachment_4864\" aria-describedby=\"caption-attachment-4864\" style=\"width: 590px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"size-full wp-image-4864\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/big_data_infographic-e1436354866939.jpg\" alt=\"Big Data Growth\" width=\"600\" height=\"1000\" \/><figcaption id=\"caption-attachment-4864\" class=\"wp-caption-text\">Big Data Growth<\/figcaption><\/figure>\n<p>Image: <a href=\"https:\/\/www.flickr.com\/photos\/22244945@N00\/3278869535\/in\/photolist-5ZK4Fn-wZhZd-6aGNbC-9AsggZ-7XE95z-9Avbkf-5nJkso-55zRNp-aPstJp-9Y4VMY-deUcef-99Gf16-gcg8mw-4TnMfy-a5vF3K-deqnNq-9Y4VN1-acLqa5-cf9tko-asSJNJ-Rc1BX-acLrrb-igDmy-93s25S-7euQsi-526UdZ-9fv4y3-mzQCL6-8WPwKd-A9xpa-4y3Rug-2khxUo-bUdjEY-6arb1v-75umLC-9X5xcb-86ezqV-481hNa-mzRq8D-7dZZR8-7e4TBN-47GeJT-vyNc5-b4gX2t-6zVsV8-5v16L3-3jz3Bw-9qpCK5-7qtryv-7e4S1u\">Erik Fitzpatrick<\/a> licensed <a href=\"https:\/\/creativecommons.org\/licenses\/by\/2.0\/\">CC BY 2.0<\/a><\/p>\n<p>Now you know the amount of data that is being generated. Though such large amount of data is itself a big challenge, bigger challenge arises with fact that this data is of no fixed format. It has images, videos, line streaming records, GPS tracking details, sensor records and many more forms. In short, it&#8217;s unstructured data. Traditional systems are good in working with structured data (limited as well), but they can&#8217;t handle such large amount of unstructured data.<\/p>\n<p>One may ask this question that why even need to care about storing this data and processing it? For what purpose? Answer is that we need this data to make more smart and calculative decisions in whatever field we are working on. Business forecasting is not a new thing. It has been done in past as well, but with very limited data. To be ahead of competition, businesses MUST use this data and then make more intelligent decisions. These decisions ranges from guessing the preferences of consumers to preventing fraud activities well in advance. Professionals in every field may find their reasons for analysis of this data.<\/p>\n<p><a name=\"characteristics-of-big-data\"><\/a><\/p>\n<h2>Characteristics Of Big Data Systems<\/h2>\n<p>When you want to decide that you need to use any big data system for your next project, look into your data that your application will produce and try to look for these characteristics. These characteristics are called 4 V&#8217;s of big data.<\/p>\n<ol>\n<li>\n<h4>Volume<\/h4>\n<p>Volume is certainly a part of what makes Big Data big. The internet-mobile revolution, bringing with it a torrent of social media updates, sensor data from devices and an explosion of e-commerce, means that every industry is swamped with data- which can be incredibly valuable, if you know how to use it.<\/p>\n<p>Does your data is expanding\/ or may explode exponentially like above discussed statistics?<\/li>\n<li>\n<h4>Variety<\/h4>\n<p>Structured data stored in SQL tables is a thing of past. Today, 90% of data generated is \u2018unstructured\u2019, coming in all shapes and forms- from Geo-spatial data, to tweets which can be analyzed for content and sentiment, to visual data such as photos and videos.<\/p>\n<p>Is your data always structured always? Or is it semi-structured or unstructured?<\/li>\n<li>\n<h4>Velocity<\/h4>\n<p>Every minute of every day, users around the globe upload 100 hours of video on Youtube, send over 200 million emails and send 300,000 tweets. And the speed is increasing fast.<\/p>\n<p>What is the velocity of your data, or what it will be in future?<\/li>\n<li>\n<h4>Veracity<\/h4>\n<p>This refers to the uncertainty of the data (or variability) available to marketers. This may also be applied to the variability of data streaming that can be inconsistent, making it harder for organizations to react quickly and more appropriately.<\/p>\n<p>Do you always get data in consistent form?<\/li>\n<\/ol>\n<p><a name=\"google-solution\"><\/a><\/p>\n<h2>How Google solved the Big Data problem?<\/h2>\n<p>Probably this problem itched google first due to their search engine data, which exploded with the revolution of internet industry (though don&#8217;t have any proof of it). They smartly solved this problem using the concept of parallel processing. They created an algorithm called MapReduce. This algorithm divides the task into small parts and assigns those parts to many computers connected over the network, and collects the results to form the final result dataset.<\/p>\n<p>Well this seems logical when you realize that I\/O is most costly operation in data processing. Traditionally, database systems were storing data into single machine and when you need data, you send them some commands in form of SQL query. These systems fetch data from store, put it in local memory area, process it and send back to you. This is best thing which you could do with limited data in hand, and limited processing power.<\/p>\n<p>But when you get Big Data, you cannot store all data in single machine. You MUST store it into multiple machine (may be thousands of machines). And when you need to run a query, you cannot aggregate data into single place due to high I\/O cost. So what MapReduce algorithm does; it runs your query into all nodes independently where data is present, and then aggregate the result and return to you.<\/p>\n<p>It brings two major improvements i.e. very low I\/O cost because data movement is minimal; and second less time because your job parallelly ran into multiple machines into smaller data sets.<\/p>\n<p><a name=\"evolution-of-hadoop\"><\/a><\/p>\n<h2>Evolution of Hadoop<\/h2>\n<p>It all started in 1997, when <a href=\"https:\/\/en.wikipedia.org\/wiki\/Doug_Cutting\" target=\"_default\" rel=\"noopener noreferrer\">Doug Cutting<\/a> started writing <a href=\"https:\/\/lucene.apache.org\/\" target=\"_default\" rel=\"noopener noreferrer\">Lucene<\/a> (full text search library) in effort to index whole web (like google did). Later Lucene was adapted by Apache community, and Cutting along with University of Washington graduate student Mike Cafarella created a lucene sub-project &#8220;<a href=\"http:\/\/nutch.apache.org\/\" target=\"_default\" rel=\"noopener noreferrer\">Apache Nutch<\/a>&#8220;. Nutch is known as a web crawler now. Nutch crawl websites and when it fetches a page, Nutch uses Lucene to index the contents of the page (to make it \u201csearchable\u201d).<\/p>\n<p>Initially, they deployed the application in single machine with 1GB of RAM and 8 hardrives with total capacity 8 TB with indexing rate of around 1000 pages per second. But as soon as application data grew, limitations came forward. And it was quite understandable that you can not store whole internet data into single machine. So they added 3 more machines (primarily for storing data). But it had it&#8217;s own challenge because now they need to move data from one machine to other manually. They wanted to make the application easily scalable because even 4 machines will fill soon.<\/p>\n<p>So they started figuring out a system which could be schema-less with no predefined structure, durable, capable of handling component failure e.g. hard disk failures and automatically rebalanced to even out disk space consumption throughout cluster of machines. Fortunately, in October 2003, Google published their <a href=\"https:\/\/research.google\/pubs\/pub51\/\" target=\"_default\" rel=\"noopener noreferrer\">Google File System<\/a> paper. This paper was to solve the exact same problem they were facing. Great !!<\/p>\n<p>They implemented the solution in java, brilliantly, and called it <strong>Nutch Distributed File System (NDFS)<\/strong>. Following the GFS paper, Cutting and Cafarella solved the problems of durability and fault-tolerance by splitting each file into 64MB chunks and storing each chunk on 3 different nodes (replication factor set to 3). In the event of component failure the system would automatically notice the defect and re-replicate the chunks that resided on the failed node by using data from the other two other replicas. The failed node therefore, did nothing to the overall state of NDFS.<\/p>\n<p>NDFS solved their one problem i.e. storage, but brought another problem &#8220;how to process this data&#8221;? It was of the utmost importance that the new algorithm should had the same scalability characteristics as NDFS. The algorithm had to be able to achieve the highest possible level of parallelism (ability to run on multiple nodes at the same time). Again fortune favored the braves. In December 2004, Google published another paper on similar algorithm &#8220;<a href=\"https:\/\/research.google\/pubs\/pub62\/\" target=\"_default\" rel=\"noopener noreferrer\">MapReduce<\/a>&#8220;. Jackpot !!<\/p>\n<p>The three main problems that the MapReduce paper solved were Parallelization, Distribution\u200aand Fault-tolerance. These were exact problems Cutting and Cafarella were facing. One of the key insights of MapReduce was that one should not be forced to move data in order to process it. Instead, a program is sent to where the data resides. That is a key differentiator, when compared to traditional data warehouse systems and relational databases. In July 2005, Cutting reported that MapReduce is integrated into Nutch, as its underlying compute engine.<\/p>\n<p>In February 2006, Cutting pulled out NDFS and MapReduce out of the Nutch code base and created Hadoop. It consisted of Hadoop Common (core libraries), HDFS and MapReduce. That&#8217;s how hadoop came into existence.<\/p>\n<p>There are plenty of things which happened since then and led to Yahoo contributed their higher level programming language on top of MapReduce &#8220;<a href=\"http:\/\/pig.apache.org\/\" target=\"_default\" rel=\"noopener noreferrer\">Pig<\/a>&#8221; and Facebook contributed &#8220;<a href=\"http:\/\/hive.apache.org\/\" target=\"_default\" rel=\"noopener noreferrer\">Hive<\/a>&#8220;, first incarnation of SQL on top of MapReduce.<\/p>\n<p><a name=\"hadoop-distribution-content\"><\/a><\/p>\n<h2>Apache Hadoop Distribution Bundle<\/h2>\n<p>The open source Hadoop is maintained by the Apache Software Foundation and website location is <a href=\"http:\/\/hadoop.apache.org\/\" target=\"_default\" rel=\"noopener noreferrer\">http:\/\/hadoop.apache.org\/<\/a>. The current Apache Hadoop project (version 2.7) includes the following modules:<\/p>\n<ul>\n<li><strong>Hadoop common<\/strong>: The common utilities that support other Hadoop modules<\/li>\n<li><strong>Hadoop Distributed File System (HDFS)<\/strong>: A distributed filesystem that provides high-throughput access to application data<\/li>\n<li><strong>Hadoop YARN:<\/strong> A framework for job scheduling and cluster resource management<\/li>\n<li><strong>Hadoop MapReduce<\/strong>: A YARN-based system for parallel processing of large datasets<\/li>\n<\/ul>\n<p>Apache Hadoop can be deployed in the following three modes:<\/p>\n<ol>\n<li><strong>Standalone<\/strong>: It is used for simple analysis or debugging into single machine environment.<\/li>\n<li><strong>Pseudo distributed<\/strong>: It helps you to simulate a multi-node installation on a single node. In pseudo-distributed mode, each of the component processes runs in a separate JVM.<\/li>\n<li><strong>Distributed<\/strong>: Cluster with multiple nodes in tens or hundreds or thousands.<\/li>\n<\/ol>\n<p><a name=\"hadoop-ecosystem\"><\/a><\/p>\n<h2>Apache Hadoop Ecosystem<\/h2>\n<p>Apart from above given core components distributed with hadoop, there are plenty of components which complement the base Hadoop framework and give companies the specific tools they need to get the desired Hadoop results.<\/p>\n<figure id=\"attachment_4866\" aria-describedby=\"caption-attachment-4866\" style=\"width: 757px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"size-full wp-image-4866\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Hadoop-Ecosystem.jpg\" alt=\"Hadoop Ecosystem\" width=\"767\" height=\"750\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Hadoop-Ecosystem.jpg 767w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Hadoop-Ecosystem-300x293.jpg 300w\" sizes=\"(max-width: 767px) 100vw, 767px\" \/><figcaption id=\"caption-attachment-4866\" class=\"wp-caption-text\">Hadoop Ecosystem<\/figcaption><\/figure>\n<ol>\n<li><strong>DataStorage Layer<\/strong>: This is where the data is stored in a distributed file system, consist of HDFS and HBase ColumnDB Storage. HBase is scalable, distributed database that supports structured data storage for large tables.<\/li>\n<li><strong>Data Processing Layer<\/strong>: Here the scheduling, resource management and cluster management to be calculated. YARN job scheduling and cluster resource management with Map Reduce are located in this layer.<\/li>\n<li><strong>Data Access Layer<\/strong>: This is the layer where the request from Management layer was sent to Data Processing Layer. Hive, A data warehouse infrastructure that provides data summarization and adhoc querying; Pig, A high-level data-flow language and execution framework for parallel computation; Mahout, A Scalable machine learning and data mining library; Avro, data serialization system.<\/li>\n<li><strong>Management Layer<\/strong>: This is the layer that meets the user. User access the system through this layer which has the components like: Chukwa, A data collection system for managing large distributed system and ZooKeeper, high-performance coordination service for distributed applications.<\/li>\n<\/ol>\n<p>In next set of posts, I will be going into detail of programming concepts involved in hadoop cluster.<\/p>\n<p><strong>Happy Learning !!<\/strong><\/p>\n<h4>References<\/h4>\n<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Doug_Cutting\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/en.wikipedia.org\/wiki\/Doug_Cutting<\/a><br \/>\n<a href=\"http:\/\/hadoop.apache.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/hadoop.apache.org\/<\/a><br \/>\n<a href=\"https:\/\/lucene.apache.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/lucene.apache.org\/<\/a><br \/>\n<a href=\"http:\/\/nutch.apache.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/nutch.apache.org\/<\/a><br \/>\n<a href=\"http:\/\/hive.apache.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/hive.apache.org\/<\/a><br \/>\n<a href=\"http:\/\/pig.apache.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/pig.apache.org\/<\/a><br \/>\n<a href=\"https:\/\/research.google\/pubs\/pub51\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/research.google.com\/archive\/gfs.html<\/a><br \/>\n<a href=\"https:\/\/research.google\/pubs\/pub62\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/research.google.com\/archive\/mapreduce.html<\/a><br \/>\n<a href=\"https:\/\/medium.com\/@markobonaci\/the-history-of-hadoop-68984a11704\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/medium.com\/@markobonaci\/the-history-of-hadoop-68984a11704<\/a> [Good Read]<br \/>\n<a href=\"https:\/\/www.linkedin.com\/pulse\/100-open-source-big-data-architecture-papers-anil-madan\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.linkedin.com\/pulse\/100-open-source-big-data-architecture-papers-anil-madan<\/a> [Must Read]<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this hadoop tutorial, I will be discussing the need of big data technologies, the problems they intend to solve and some information around involved technologies and frameworks. Table of Contents How really big is Big Data? Characteristics Of Big Data Systems How Google solved the Big Data problem? Evolution of Hadoop Apache Hadoop Distribution &#8230; <a title=\"Hadoop &#8211; Big Data Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/hadoop\/hadoop-big-data-tutorial\/\" aria-label=\"More on Hadoop &#8211; Big Data Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4865,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[776],"tags":[778,777],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Using-Big-Datd-is-hard.jpg",380,285,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Using-Big-Datd-is-hard-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Using-Big-Datd-is-hard-300x225.jpg",300,225,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Using-Big-Datd-is-hard.jpg",380,285,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Using-Big-Datd-is-hard.jpg",380,285,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Using-Big-Datd-is-hard.jpg",380,285,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Using-Big-Datd-is-hard.jpg",380,285,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/07\/Using-Big-Datd-is-hard.jpg",120,90,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":7,"uagb_excerpt":"In this hadoop tutorial, I will be discussing the need of big data technologies, the problems they intend to solve and some information around involved technologies and frameworks. Table of Contents How really big is Big Data? Characteristics Of Big Data Systems How Google solved the Big Data problem? Evolution of Hadoop Apache Hadoop Distribution&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4863"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4863"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4863\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4865"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4863"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4863"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4863"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}