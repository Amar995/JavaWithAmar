{"id":3257,"date":"2013-11-12T00:32:34","date_gmt":"2013-11-11T19:02:34","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=3257"},"modified":"2022-01-29T23:33:42","modified_gmt":"2022-01-29T18:03:42","slug":"checked-vs-unchecked-exceptions-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/exception-handling\/checked-vs-unchecked-exceptions-in-java\/","title":{"rendered":"Java Checked vs Unchecked Exceptions"},"content":{"rendered":"\n<p>In this <em>Java exceptions tutorial<\/em>, learn what is an exception in Java, the <strong>difference between a checked exception and an unchecked exception<\/strong>. We will also learn some Java <a href=\"https:\/\/howtodoinjava.com\/best-practices\/java-exception-handling-best-practices\/\">exception handling best practices<\/a>.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1 uagb-toc__collapse uagb-block-3a1052b0 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-what-is-exception-in-java\">1. What is Exception in Java?<\/a><li class=\"uagb-toc__list\"><a href=\"#2-handling-a-thrown-exception\">2. Handling a Thrown Exception<\/a><li class=\"uagb-toc__list\"><a href=\"#3-checked-exception-vs-unchecked-exception\">3. Checked Exception vs Unchecked Exception<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-exception-hierarchy\">3.1. Exception Hierarchy<\/a><li class=\"uagb-toc__list\"><a href=\"#32-checked-exceptions\">3.2. Checked Exceptions<\/a><li class=\"uagb-toc__list\"><a href=\"#33-unchecked-exception\">3.3. Unchecked Exception<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-exception-handling-best-practices\">3. Exception Handling Best Practices<\/a><li class=\"uagb-toc__list\"><a href=\"#4-conclusion\">4. Conclusion<\/a><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. What is Exception in Java?<\/h2>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>&#8220;An exception is <strong>an unexpected event<\/strong> that occurred during the execution of a program, and <strong>disrupts the normal flow of instructions<\/strong>.&#8221;<\/p><\/blockquote>\n\n\n\n<ul><li>In Java, all errors and exceptions are of type with <a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/16\/docs\/api\/java.base\/java\/lang\/Throwable.html\" target=\"_blank\" rel=\"noopener\"><code>Throwable<\/code><\/a> class. <\/li><li>When an error occurs within a method, the <em>method creates an object<\/em> (or any subtype of <code>Throwable<\/code>) and hands it off to the runtime system. This object is called the exception object.<\/li><li>The exception object contains the information about the error, including <em>exception type and the state of the program<\/em> when the error occurred. <\/li><li>Creating an exception object and handing it to the runtime system is called <strong>throwing an exception<\/strong>.<\/li><\/ul>\n\n\n\n<p>A few examples of an exception in the program execution can be:<\/p>\n\n\n\n<ul><li>User entered alphanumeric input and program excepts numeric input.<\/li><li>Program tries to read file but the file does not exist in specified location.<\/li><li>A network connection terminated while reading data from a webservice.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">try {\n    Integer.parseInt(\"six\") ;          \/\/This line throws an exception\n}\ncatch(NumberFormatException nfe) {\n    \/\/handle exception\n}<\/code><\/pre>\n\n\n\n<h2>2. Handling a Thrown Exception<\/h2>\n\n\n\n<p>We have two choices when an exception object is created in our application;<\/p>\n\n\n\n<ul><li>Either we will handle it within method using the <a href=\"https:\/\/howtodoinjava.com\/java\/exception-handling\/try-catch-finally\/\">try-catch<\/a> block.<\/li><li>Or we can pass it to the caller method to let it handle.<\/li><\/ul>\n\n\n\n<p>This is a very important decision to be made while setting the responsibilities of a method. <\/p>\n\n\n\n<p>A <strong>method should clearly indicate that what all exceptions it will handle<\/strong> and which it will not. It is defined in the method declaration using the <a href=\"https:\/\/howtodoinjava.com\/java\/exception-handling\/throw-vs-throws\/\"><code>throws<\/code><\/a> keyword.<\/p>\n\n\n\n<p>To handle the exception, We must catch the exception in <em>catch<\/em> section of <em>try-catch<\/em> block.<\/p>\n\n\n\n<pre title=\"Try Catch Block\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">try {\n    \/\/code\n}\ncatch(Exception e) {\n    \/\/handle exception\n}<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>If an exception is not handled in the application, then it will propagate to the JVM. The JVM usually terminates the program.<\/p><\/blockquote>\n\n\n\n<h2>3. Checked Exception vs Unchecked Exception<\/h2>\n\n\n\n<h3>3.1. Exception Hierarchy<\/h3>\n\n\n\n<p>In Java, exceptions are broadly categorized into two sections:<\/p>\n\n\n\n<ul><li>Checked exceptions<\/li><li>Unchecked exceptions<\/li><\/ul>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/ExceptionHierarchyJava.png\" alt=\"ExceptionHierarchy in Java\" class=\"wp-image-3258\"\/><\/figure><\/div>\n\n\n\n<h3>3.2. Checked Exceptions<\/h3>\n\n\n\n<p>Java checked exceptions are those exceptions, as the name suggests, which <strong>a method must handle in its body or throw to the caller method so the caller method can handle it<\/strong>.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Checked exceptions are <strong>checked by the Java compiler<\/strong> so they are called <strong>compile time exceptions<\/strong>.<\/p><\/blockquote>\n\n\n\n<p>Java compiler forces us to handle these exceptions in some manner in the application code. We must handle these exceptions at a suitable level inside the application so that we can inform the user about the failure and ask him to retry or come later.<\/p>\n\n\n\n<p>Generally, checked exceptions denote <em>error scenarios that are outside the immediate control of the program<\/em>. These occur usually interacting with other systems\/network resources e.g. <em>database errors<\/em>, <em>network connection errors<\/em>, <em>missing files<\/em>, etc.<\/p>\n\n\n\n<p>Note that all checked exceptions are subclasses of <code>Exception<\/code> class. For example,<\/p>\n\n\n\n<ul><li><code>ClassNotFoundException<\/code><\/li><li><code>IOException<\/code><\/li><li><code>SQLException<\/code><\/li><\/ul>\n\n\n\n<h4>Checked Exception Example<\/h4>\n\n\n\n<p><code>FileNotFoundException<\/code> is a checked exception in Java. Anytime, we want to read a file from the filesystem, Java forces us to handle an error situation where the file may not be present in the place.<\/p>\n\n\n\n<pre title=\"Try to read file with handle FileNotFoundException\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public static void main(String[] args)\n{\n    FileReader file = new FileReader(\"somefile.txt\");\n}<\/code><\/pre>\n\n\n\n<p>In the above example, you will get compile-time error with the message &#8211; <code>Unhandled exception type FileNotFoundException<\/code>.<\/p>\n\n\n\n<p>To make the program able to compile, we must handle this error situation in the <em>try-catch<\/em> block. Below given code will compile absolutely fine.<\/p>\n\n\n\n<pre title=\"Read a file and apply exception handling\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public static void main(String[] args)\n{\n    try\n    {\n\t\tFileReader file = new FileReader(\"somefile.txt\");\n\t}\n    catch (FileNotFoundException e)\n    {\n    \t\/\/Alternate logic\n\t\te.printStackTrace();\n\t}\n}<\/code><\/pre>\n\n\n\n<h3>3.3. Unchecked Exception<\/h3>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Unchecked exceptions are <strong>not checked by the compiler<\/strong>. These are called <strong>runtime exceptions<\/strong>.<\/p><\/blockquote>\n\n\n\n<p>Unchecked exceptions will come into life and occur in the program, once any buggy code is executed.<\/p>\n\n\n\n<p>In Java, a member <em>method is not forced by the compiler to declare the unchecked exceptions<\/em> into the method declaration. Generally, such methods almost always do not declare them.<\/p>\n\n\n\n<p>Unchecked Exceptions are subclasses of <code>RuntimeException<\/code> class.<\/p>\n\n\n\n<ul><li><code>ArithmeticException<\/code><\/li><li><code>ArrayStoreException<\/code><\/li><li><code>ClassCastException<\/code><\/li><\/ul>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The strange thing is that <code>RuntimeException<\/code> is itself subclass of <code>Exception<\/code> i.e. all unchecked exception classes should have been checked exceptions implicitly, BUT they are not.&#8221;<\/p><\/blockquote>\n\n\n\n<h4>Unchecked Exception Example<\/h4>\n\n\n\n<p>The code in the given program does not give any compile-time error. But when we run the example, it throws <code>NullPointerException<\/code>. <a href=\"https:\/\/howtodoinjava.com\/java\/exception-handling\/how-to-effectively-handle-nullpointerexception-in-java\/\">NullPointerException<\/a> is an unchecked exception in Java.<\/p>\n\n\n\n<pre title=\"JVM not forcing us to check NullPointerException\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public static void main(String[] args)\n{\n    try\n    {\n\t\tFileReader file = new FileReader(\"pom.xml\");\n\n\t\tfile = null;\n\n\t\tfile.read();\n\t}\n    catch (IOException e)\n    {\n    \t\/\/Alternate logic\n\t\te.printStackTrace();\n\t}\n}<\/code><\/pre>\n\n\n\n<h2>3. Exception Handling Best Practices<\/h2>\n\n\n\n<ul><li>Checked exceptions can be used when a method may fail to do what it must. For example, a method named <code>prepareSystem()<\/code> which pre-populates configuration files and does some configuration using them. It can declare throwing FileNotFoundException which implies that the method uses configuration files from the file system and they are missing.<\/li><\/ul>\n\n\n\n<ul><li>Checked exceptions ideally should never be used for programming errors, but absolutely should be used for <strong>resource errors<\/strong> and for flow control in such cases. <br>Throw only those exceptions which a method can not handle by any means. The method should first try to handle it as soon as it encounters. Throw the exception only if it is not possible to handle it inside the method.<\/li><\/ul>\n\n\n\n<ul><li>A good way to define method signatures is to declare exceptions close to method name. If the method is named <code>openFile()<\/code>, then it is expected to throw <code>FileNotFoundException<\/code>?. If the method is named <code>findProvider()<\/code>, then it is expected to throw <code>NoSuchProviderException<\/code>. <\/li><\/ul>\n\n\n\n<ul><li><p>Also, these type of exceptions should be made checked exceptions as it forces the caller to deal with the problems that are inherent to the semantic of the methods.<\/p><\/li><\/ul>\n\n\n\n<ul><li>If we are creating any custom exception then the rule is if a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception. <\/li><\/ul>\n\n\n\n<p><p>In reality, most applications will have to recover from pretty much all exceptions including <code>NullPointerException<\/code>, <code>IllegalArgumentExceptions<\/code> and many other unchecked exceptions. The action\/transaction that failed will be aborted but the application has to stay alive and be ready to serve the next action\/transaction.<\/p><\/p>\n\n\n\n<p><p>The only time it is normally legal to shut down an application is during startup. For example, if a configuration file is missing and the application cannot do anything sensible without it, then it is legal to shut down the application.<\/p><\/p>\n\n\n\n<h2>4. Conclusion<\/h2>\n\n\n\n<p>In this Java tutorial, we learned about Java exceptions. We learned the difference between checked vs unchecked exceptions in Java, along with <strong>how to handle unchecked exceptions<\/strong>, exception hierarchy in Java with examples.<\/p>\n\n\n\n<p>Remember the biggest <strong>difference between checked and unchecked exceptions<\/strong> is that checked exceptions are forced by the compiler and used to indicate exceptional conditions that are out of the control of the program, while unchecked exceptions are occurred during runtime and are used to indicate programming errors.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn the difference between checked vs unchecked exceptions in Java, with simple explanations and examples. Learn Java exception handling best practices.<\/p>\n","protected":false},"author":2,"featured_media":3883,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[786],"tags":[1434],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/05\/exceptions-notes.jpg",300,350,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/05\/exceptions-notes-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/05\/exceptions-notes-257x300.jpg",257,300,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/05\/exceptions-notes.jpg",300,350,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/05\/exceptions-notes.jpg",300,350,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/05\/exceptions-notes.jpg",300,350,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/05\/exceptions-notes.jpg",300,350,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/05\/exceptions-notes.jpg",103,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":20,"uagb_excerpt":"Learn the difference between checked vs unchecked exceptions in Java, with simple explanations and examples. Learn Java exception handling best practices.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3257"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=3257"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3257\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/3883"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=3257"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=3257"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=3257"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}