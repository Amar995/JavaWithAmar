{"id":19289,"date":"2022-01-10T23:12:46","date_gmt":"2022-01-10T17:42:46","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=19289"},"modified":"2022-01-25T14:49:28","modified_gmt":"2022-01-25T09:19:28","slug":"fluent-logging-with-flogger","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/library\/fluent-logging-with-flogger\/","title":{"rendered":"Java Fluent Logging with Flogger"},"content":{"rendered":"\n<p><strong>Flogger<\/strong>, developed, used and recommended by Google, is a <strong>fluent style logging API for Java<\/strong>. Apart from fluency, flogger offers many more other features than existing logging frameworks that we will learn in this tutorial.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1 uagb-toc__collapse uagb-block-c8195ef8 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-flogger-dependencies\">1. Flogger Dependencies<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#11-flogger-core\">1.1. Flogger Core<\/a><li class=\"uagb-toc__list\"><a href=\"#12-underlying-logging-backend\">1.2. Underlying Logging Backend<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#2-flogger-api\">2. Flogger API<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-fluentlogger\">2.1. FluentLogger<\/a><li class=\"uagb-toc__list\"><a href=\"#22-log-levels\">2.2. Log Levels<\/a><li class=\"uagb-toc__list\"><a href=\"#23-logging-exceptions\">2.3. Logging Exceptions<\/a><li class=\"uagb-toc__list\"><a href=\"#24-rate-limiting\">2.4. Rate Limiting<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-advantages-of-flogger-over-other-logging-frameworks\">3. Advantages of Flogger over Other Logging Frameworks<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-performance\">3.1. Performance<\/a><li class=\"uagb-toc__list\"><a href=\"#32-cost-of-disabled-log-messages\">3.2. Cost of Disabled Log Messages<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#4-conclusion\">4. Conclusion<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. Flogger Dependencies<\/h2>\n\n\n\n<p>Flogger, similar to SLF4J, acts as an <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/\">abstraction<\/a> and uses the underlying logging framework as implementation. We can use Flogger with <em>Java Logging API<\/em>, <em>Log4j2 <\/em>and even <em>SLF4J<\/em>. By default, flogger uses Java Util Logging API (JUL).<\/p>\n\n\n\n<h3>1.1. Flogger Core<\/h3>\n\n\n\n<p>To add flogger into an application, we need to add <code>com.google.flogger:flogger<\/code> and <code>com.google.flogger:flogger-system-backend<\/code> dependencies that provide the core classes and interfaces for writing the log messages.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.google.flogger&lt;\/groupId&gt;\n    &lt;artifactId&gt;flogger&lt;\/artifactId&gt;\n    &lt;version&gt;0.7.4&lt;\/version&gt;\n&lt;\/dependency&gt;\n\n&lt;!-- The Java Util Logging backend --&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.google.flogger&lt;\/groupId&gt;\n    &lt;artifactId&gt;flogger-system-backend&lt;\/artifactId&gt;\n    &lt;version&gt;0.7.4&lt;\/version&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<p>Flogger APIs internally depends on <em>flogger-system-backend<\/em> that is pulled in transitively for any logging platform we add. <\/p>\n\n\n\n<h3>1.2. Underlying Logging Backend<\/h3>\n\n\n\n<p>Next we need to add a runtime dependency from given logging platforms. We will use its configuration files to <em>customize log levels, appenders<\/em> etc.<\/p>\n\n\n\n<p>For example, if we are using <strong>Flogger with Log4j2<\/strong> then we need to add <code>flogger-log4j2-backend<\/code> dependency. After importing this dependency, we can control the logging levels, appenders, layouts etc from <a href=\"https:\/\/howtodoinjava.com\/log4j2\/log4j2-xml-configuration-example\/\">log4j2.xml<\/a> file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;!-- The SLF4J backend --&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.google.flogger&lt;\/groupId&gt;\n    &lt;artifactId&gt;flogger-slf4j-backend&lt;\/artifactId&gt;\n    &lt;version&gt;0.7.4&lt;\/version&gt;\n&lt;\/dependency&gt;\n\n&lt;!-- The Log4j backend --&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.google.flogger&lt;\/groupId&gt;\n    &lt;artifactId&gt;flogger-log4j-backend&lt;\/artifactId&gt;\n    &lt;version&gt;0.7.4&lt;\/version&gt;\n&lt;\/dependency&gt;\n\n&lt;!-- The Log4j2 backend --&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.google.flogger&lt;\/groupId&gt;\n    &lt;artifactId&gt;flogger-log4j2-backend&lt;\/artifactId&gt;\n    &lt;version&gt;0.7.4&lt;\/version&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<h2>2. Flogger API<\/h2>\n\n\n\n<h3>2.1. FluentLogger<\/h3>\n\n\n\n<p>Using the fluent API provided by Flogger in application classes starts with creating an instance of <code>FluentLogger<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import com.google.common.flogger.FluentLogger;\n\npublic class Main {\n\n\tprivate static final FluentLogger logger = FluentLogger.forEnclosingClass();\n}<\/code><\/pre>\n\n\n\n<p>Next, we can start using the <em>FluentLogger<\/em> instance for writing the log messages. <\/p>\n\n\n\n<p>Note that we do not use curly brackets <code>{}<\/code> for data placeholders, we can use any of Java&#8217;s <code>printf()<\/code> format specifiers, such as <code>%s<\/code>, <code>%d<\/code> etc.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">logger.atWarning().log(\"Warning message\");\n\nArticle a = Article.builder(1L).title(\"Test Article\").tag(\"Data\").build();\nlogger.atInfo().log(\"Article found : %s\", a);<\/code><\/pre>\n\n\n\n<p>This will print the log messages in configured appenders and layout.<\/p>\n\n\n\n<pre title=\"Output\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">2022-01-10 20:34:37.621 WARN [main] [com.howtodoinjava.demo.flogger.Main.main(Main.java:17)] - Warning message\n2022-01-10 20:34:37.632 INFO [main] [com.howtodoinjava.demo.flogger.Main.main(Main.java:20)] - Article found : Article(id=1, title=Test Article, tags=[Data])<\/code><\/pre>\n\n\n\n<h3>2.2. Log Levels<\/h3>\n\n\n\n<p>At the API level, flogger supports log levels provided by JDK Logging.<\/p>\n\n\n\n<ul><li><em><strong>OFF<\/strong><\/em>: turn off logging.<\/li><li><em><strong>SEVERE<\/strong>: <\/em>(highest value): a serious failure.<\/li><li><em><strong>WARNING<\/strong><\/em>: a potential problem.<\/li><li><em><strong>INFO<\/strong><\/em>: informational messages.<\/li><li><em><strong>CONFIG<\/strong><\/em>: log static configuration messages.<\/li><li><em><strong>FINE<\/strong><\/em>: log tracing information.<\/li><li><em><strong>FINER<\/strong><\/em>: log a fairly detailed tracing message.<\/li><li><em><strong>FINEST<\/strong>: <\/em>(lowest value): log a highly detailed tracing message.<\/li><li><em><strong>ALL<\/strong><\/em>: enable logging of all messages.<\/li><\/ul>\n\n\n\n<p>We can use the following method calls to log messages at a specific level.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">logger.atInfo().log(\"...\");\nlogger.atWarning().log(\"...\");\nlogger.atSevere().log(\"...\");\nlogger.atFine().log(\"...\");\nlogger.atFiner().log(\"...\");\nlogger.atFinest().log(\"...\");\nlogger.atConfig().log(\"...\");\n\n\/\/Can be used for any log level\nlogger.at(Level.SEVERE).log(\"...\");<\/code><\/pre>\n\n\n\n<p>The <strong>Log level can be set using the configuration files<\/strong> of the underlying logging platform (<em>logging.properties<\/em>, <em>log4j.properties<\/em> etc). <\/p>\n\n\n\n<p>Or we can <strong>programmatically set the log level<\/strong> for a logger using the <em>LoggerConfig<\/em> class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">LoggerConfig.of(logger).setLevel(Level.INFO);<\/code><\/pre>\n\n\n\n<h3>2.3. Logging Exceptions<\/h3>\n\n\n\n<p>Use the <code>withStackTrace()<\/code> method to log a <em>Throwable<\/em> instance.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">logger.atInfo()\n\t.withStackTrace(StackSize.SMALL)\n\t.withCause(new NullPointerException())\n\t.log(\"NullPointerException Received\");<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">2022-01-10 21:14:49 INFO  Main:26 - NullPointerException Received\njava.lang.NullPointerException: null\nat com.howtodoinjava.demo.flogger.Main.main(Main.java:26) [classes\/:?]<\/code><\/pre>\n\n\n\n<p><em><strong>StackSize<\/strong><\/em> enum has 3 constants:<\/p>\n\n\n\n<ul><li><em>StackSize.<strong>SMALL<\/strong><\/em>: Produces a small stack suitable for more fine grained debugging.<\/li><li><em>StackSize.<strong>MEDIUM<\/strong><\/em>: Produces a medium sized stack suitable for providing contextual information for most log statements.<\/li><li><em>StackSize.<strong>LARGE<\/strong><\/em>: Produces a large stack suitable for providing highly detailed contextual information.<\/li><li><em>StackSize.<strong>FULL<\/strong><\/em>: Provides the complete stack trace.<\/li><li><em>StackSize.<strong>NONE<\/strong><\/em>: Provides no stack trace. This is useful when the stack size is conditional.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">logger.atWarning()\n\t.withStackTrace(showTrace ? StackSize.MEDIUM : StackSize.NONE)\n\t.log(\"message\");<\/code><\/pre>\n\n\n\n<h3>2.4. Rate Limiting<\/h3>\n\n\n\n<p>This is an interesting feature where we do not want to a log message for every occurrence of a statement. We want to log the message on every nth occurrence.<\/p>\n\n\n\n<p>In the given example, we are <strong>logging the message at every 10th iteration<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">IntStream.range(0, 50).forEach(value -&gt; {\n    logger.atInfo().every(10).log(\"The counter is =&gt; %d\", value);\n});<\/code><\/pre>\n\n\n\n<pre title=\"Output\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">2022-01-10 21:13:23 INFO  Main:30 - The counter is =&gt; 0\n2022-01-10 21:13:23 INFO  Main:30 - The counter is =&gt; 10\n2022-01-10 21:13:23 INFO  Main:30 - The counter is =&gt; 20\n2022-01-10 21:13:23 INFO  Main:30 - The counter is =&gt; 30\n2022-01-10 21:13:23 INFO  Main:30 - The counter is =&gt; 40<\/code><\/pre>\n\n\n\n<h2>3. Advantages of Flogger over Other Logging Frameworks<\/h2>\n\n\n\n<p>Now when we have a basic understanding of Flogger API, let us understand what makes it so useful that Google recommends it to use it internally in the organization.<\/p>\n\n\n\n<h3>3.1. Performance<\/h3>\n\n\n\n<p>According to Google, Flogger has been designed and implemented for <strong>high-performance logging by building a set of carefully constructed APIs<\/strong>, both frontend and backend.<\/p>\n\n\n\n<p>Flogger APIs work on top of the logging platform to provide the best possible performance.<\/p>\n\n\n\n<h3>3.2. Cost of Disabled Log Messages<\/h3>\n\n\n\n<p>Most logging frameworks extensively use <em>varargs<\/em> in the methods like <em>info()<\/em>, <em>debug()<\/em> etc. These methods <strong>require a new <code>Object[]<\/code> to be allocated and filled before the called method can be invoked<\/strong>. Additionally, any <strong>fundamental types passed in must be auto-boxed<\/strong>.<\/p>\n\n\n\n<p>For this reason, a simple <code>log.info(String, Object...)<\/code> approach to logging is concise at the source code level but can <strong>introduce surprising costs in bytecode<\/strong>. To make it even worse, <strong>this overhead bytecode will be executed even if the log statement is disabled<\/strong>.<\/p>\n\n\n\n<p>From the analysis of logging behavior in large applications in Google, it seems that disabled log statements are hit many orders of magnitude more than enabled ones. This is something that should be avoided as a priority.<\/p>\n\n\n\n<p>When using Flogger&#8217;s fluent API <code>logger.atInfo().log(\"My message: %s\", arg);<\/code>, <strong>we can know whether or not logging is disabled at the point that the level selector was called with <em>atInfo()<\/em><\/strong> method. So if logging is disabled we can choose to return a different implementation of the logging context which simply discards all its arguments for every subsequent method call (a \u201cNo-Op\u201d instance).<\/p>\n\n\n\n<p>Conveniently this instance can be naturally <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/\">immutable<\/a> and <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/what-is-thread-safety\/\">thread-safe<\/a>, so we can return the same <a href=\"https:\/\/howtodoinjava.com\/design-patterns\/creational\/singleton-design-pattern-in-java\/\">singleton<\/a> instance every time, which avoids an allocation of any kind of memory when logging is disabled thus improving the performance.<\/p>\n\n\n\n<h2>4. Conclusion<\/h2>\n\n\n\n<p>Flogger seems very promising API with some great advantages discussed above. To make it even more familiar, we can use the existing <a href=\"https:\/\/howtodoinjava.com\/log4j2\/log4j2-tutorial\/\">Log4j2<\/a> or <a href=\"https:\/\/howtodoinjava.com\/log4j2\/slf4j-vs-log4j-which-one-is-better\/\">SLF4J<\/a> configurations for easier migrations.<\/p>\n\n\n\n<p>In this tutorial, we learned to import Flogger dependencies and use Flogger API to log various messages. You can read more about Flogger in its <a href=\"https:\/\/google.github.io\/flogger\/\" target=\"_blank\" rel=\"noreferrer noopener\">official Github page<\/a>.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/opensource-examples\/tree\/main\/src\/main\/java\/com\/howtodoinjava\/demo\/flogger\" target=\"_blank\" rel=\"noreferrer noopener\">Source Code Download<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Flogger, developed, used and recommended by Google, is a fluent style logging API for Java. Apart from fluency, flogger offers many more other features than existing logging frameworks that we will learn in this tutorial. 1. Flogger Dependencies Flogger, similar to SLF4J, acts as an abstraction and uses the underlying logging framework as implementation. We &#8230; <a title=\"Java Fluent Logging with Flogger\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/library\/fluent-logging-with-flogger\/\" aria-label=\"More on Java Fluent Logging with Flogger\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":18773,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[1392,1514],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2-300x195.png",300,195,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",120,78,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Flogger, developed, used and recommended by Google, is a fluent style logging API for Java. Apart from fluency, flogger offers many more other features than existing logging frameworks that we will learn in this tutorial. 1. Flogger Dependencies Flogger, similar to SLF4J, acts as an abstraction and uses the underlying logging framework as implementation. We&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19289"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=19289"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19289\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/18773"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=19289"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=19289"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=19289"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}