{"id":2683,"date":"2013-07-15T14:44:28","date_gmt":"2013-07-15T09:14:28","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=2683"},"modified":"2022-01-30T00:13:06","modified_gmt":"2022-01-29T18:43:06","slug":"what-is-polymorphism-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/what-is-polymorphism-in-java\/","title":{"rendered":"Guide to Polymorphism"},"content":{"rendered":"<p>In simple words, polymorphism is the ability by which, we <strong>can create functions or reference variables which behaves differently in different programmatic context<\/strong>.<\/p>\n<p><strong>Polymorphism<\/strong> is one of the major building blocks of object oriented programming along with inheritance, abstraction and encapsulation.<\/p>\n<p>&#8220;Subtype polymorphism, often referred to as simply polymorphism in the context of object-oriented programming, is the ability to create a variable, a function, or an object that has more than one form.&#8221; &#8211; <a href=\"https:\/\/en.wikipedia.org\/wiki\/Polymorphism_in_object-oriented_programming\">Wikipedia<\/a><\/p>\n<blockquote><p>Recommended Reading : <a title=\"Encapsulation in java and its relation with abstraction\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/encapsulation-in-java-and-its-relation-with-abstraction\/\">Java Abstraction vs Encapsulation<\/a>.<\/p><\/blockquote>\n<h2>Polymorphism in Java<\/h2>\n<p>An example of polymorphism is referring the instance of subclass, with reference variable of super-class. e.g.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">Object o = new Object(); \/\/o can hold the reference of any subtype\nObject o = new String();\nObject o = new Integer();<\/pre>\n<p>Here, <code>String<\/code> is subclass of <code>Object<\/code> class. This is basic <em>example of polymorphism<\/em>.<\/p>\n<p>In java language, polymorphism is essentially considered into two versions.<\/p>\n<ol>\n<li>Compile time polymorphism (static binding or method overloading)<\/li>\n<li>Runtime polymorphism (dynamic binding or method overriding)<\/li>\n<\/ol>\n<h2>Compile Time Polymorphism (static binding or method overloading)<\/h2>\n<p>As the meaning is implicit, this is used to write the program in such a way, that <strong>flow of control is decided in compile time<\/strong> itself. It is <em>achieved using method overloading<\/em>.<\/p>\n<p>In method overloading, an object can have two or more methods with same name, BUT, with their method parameters different. These parameters may be different on two bases:<\/p>\n<h4>Parameters type<\/h4>\n<p>Type of method parameters can be different. e.g. <code>java.util.Math.max()<\/code> function comes with following versions:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">public static double Math.max(double a, double b){..}\npublic static float Math.max(float a, float b){..}\npublic static int Math.max(int a, int b){..}\npublic static long Math.max(long a, long b){..}<\/pre>\n<p>The actual method to be called is decided on compile time based on parameters passed to function in program.<\/p>\n<h4>Parameters count<\/h4>\n<p>Functions accepting different number of parameters. e.g. in employee management application, a factory can have these methods:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">EmployeeFactory.create(String firstName, String lastName){...}\nEmployeeFactory.create(Integer id, String firstName, String lastName){...}<\/pre>\n<p>Both methods have same name &#8220;create&#8221; but actual method invoked will be based on parameters passed in program.<\/p>\n<h2>Runtime Polymorphism (dynamic binding or method overriding)<\/h2>\n<p><strong>Runtime polymorphism is essentially referred as <em>method overriding<\/em>.<\/strong> Method overriding is a feature which you get when you implement inheritance in your program.<\/p>\n<p>A simple example can be from real world e.g. animals. An application can have <code>Animal<\/code> class, and its specialized sub classes like <code>Cat<\/code> and <code>Dog<\/code>. These subclasses will override the default behavior provided by <code>Animal<\/code> class + some of its own specific behavior.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\npublic class Animal {\npublic void makeNoise()\n{\nSystem.out.println(&quot;Some sound&quot;);\n}\n}\n\nclass Dog extends Animal{\npublic void makeNoise()\n{\nSystem.out.println(&quot;Bark&quot;);\n}\n}\n\nclass Cat extends Animal{\npublic void makeNoise()\n{\nSystem.out.println(&quot;Meawoo&quot;);\n}\n}\n<\/pre>\n<p>Now which <code>makeNoise()<\/code> method will be called, depends on type of actual instance created on runtime e.g.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\npublic class Demo\n{\npublic static void main(String[] args) {\nAnimal a1 = new Cat();\na1.makeNoise(); \/\/Prints Meowoo\n\nAnimal a2 = new Dog();\na2.makeNoise(); \/\/Prints Bark\n}\n}\n<\/pre>\n<div class=\"noticeboxesde bluenoticebox\">Here, it is important to understand the these divisions are specific to java. In context to software engineering, there are other form of polymorphisms also applicable to different languages, but for java, these are mainly considered.<\/div>\n<h2>Important points<\/h2>\n<ol>\n<li>Polymorphism is the ability to create a variable, a function, or an object that has more than one form.<\/li>\n<li>In java, polymorphism is divided into two parts : method overloading and method overriding.<\/li>\n<li>Some may argue that method overloading is not polymorphism. Then what does the term compile time &#8220;polymorphism&#8221; means??<\/li>\n<li>Another term operator overloading is also there, e.g. &#8220;+&#8221; operator can be used to add two integers as well as concat two sub-strings. Well, this is the only available support for operator overloading in java, and you can not have your own custom defined operator overloading in java.<\/li>\n<\/ol>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In java, polymorphism is the ability by which, we can create functions or reference variables which behaves differently in different programmatic context.<\/p>\n","protected":false},"author":2,"featured_media":8445,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1454,1518],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/07\/Java-Polymorphism.png",401,224,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/07\/Java-Polymorphism.png",150,84,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/07\/Java-Polymorphism.png",300,168,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/07\/Java-Polymorphism.png",401,224,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/07\/Java-Polymorphism.png",401,224,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/07\/Java-Polymorphism.png",401,224,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/07\/Java-Polymorphism.png",401,224,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/07\/Java-Polymorphism.png",120,67,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":42,"uagb_excerpt":"In java, polymorphism is the ability by which, we can create functions or reference variables which behaves differently in different programmatic context.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/2683"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=2683"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/2683\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/8445"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=2683"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=2683"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=2683"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}