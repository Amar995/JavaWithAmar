{"id":4766,"date":"2015-06-09T07:15:04","date_gmt":"2015-06-09T07:15:04","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4766"},"modified":"2021-08-25T03:46:48","modified_gmt":"2021-08-24T22:16:48","slug":"java-classes-objects","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/java-classes-objects\/","title":{"rendered":"Java Classes and Objects"},"content":{"rendered":"<p>Classes are the basic units of programming in the <em><a href=\"https:\/\/howtodoinjava.com\/java\/oops\/object-oriented-programming\/\">object-oriented<\/a><\/em> programming. In this Java tutorial, learn to <strong>write classes<\/strong> and <strong>how to create objects<\/strong> in Java.<\/p>\n<h2>1. Difference between a Class and an Object<\/h2>\n<p>In Java, <strong>objects<\/strong> are containers like data structure which have <strong>state and behavior<\/strong>. Objects represent the actors in the system or the application.<\/p>\n<p>For example, in a Human Resource application, the main actors are Employee, Manager, Department, or Reports, etc.<\/p>\n<blockquote><p>An object is an instance of a class.<\/p><\/blockquote>\n<p>The <strong>classes<\/strong> are the template that describes the state and behavior of its objects. A class can be used to create multiple objects. which are similar in structure but can have different states.<\/p>\n<h2>2. How to declare a Class<\/h2>\n<p>The general syntax for declaring a class in Java is:<\/p>\n<pre class=\"brush: java; title: Syntax for Java class; notranslate\" title=\"Syntax for Java class\">\r\n&lt;&lt;modifiers&gt;&gt; class &lt;&lt;class name&gt;&gt; {\r\n\r\n        \/\/ fields and members of the class\r\n}\r\n<\/pre>\n<ul>\n<li>A class declaration may have <strong>zero or more modifiers<\/strong>.<\/li>\n<li>The keyword <code>class<\/code> is used to declare a class.<\/li>\n<li>The &lt;&lt;class name&gt;&gt; is a user-defined name of the class, which should be a valid identifier. <\/li>\n<li>Each class has a body, which is specified inside a pair of braces ({ &#8230; }). <\/li>\n<li>The body of a class contains its different components, for example, fields, methods, etc. <\/li>\n<\/ul>\n<p>For example,<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main \r\n{\r\n\t\/\/ Empty body for now; Write we own\r\n}\r\n<\/pre>\n<h4>Types of Classes<\/h4>\n<p>In Java, we can have two types of classes.<\/p>\n<ol>\n<li><strong>Abstract class<\/strong> &#8211; These classes are <code><a href=\"http:\/\/howtodoinjava.com\/java\/keywords\/abstract-keyword\/\">abstract<\/a><\/code>. These are <strong>incomplete classes<\/strong>. It means you cannot create an instance of this class. You can only extend these classes to complete their specification.<\/li>\n<li><strong>Non-abstract class<\/strong> &#8211; These classes define their full state and behavior. They are complete classes. You can create objects of this class.<\/li>\n<\/ol>\n<h2>3. Ingradiants of Java Classes<\/h2>\n<p>In Java, classes are used as <strong>templates to create objects<\/strong>. A class in Java may consist of five primary components. i.e.<\/p>\n<ol>\n<li>Fields<\/li>\n<li>Methods<\/li>\n<li>Constructors<\/li>\n<li>Static initializers<\/li>\n<li>Instance initializers<\/li>\n<\/ol>\n<p><strong>Fields<\/strong> and <strong>methods<\/strong> are also known as <strong>class members<\/strong>. <strong>Constructors<\/strong> and both <strong>initializers<\/strong> are used to during initialization of class i.e. creating objects using class template.<\/p>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-constructors\/\">Constructors<\/a> are used for creating objects of a class. we must have <strong>at least one constructor for a class<\/strong> (if we don&#8217;t declare explicitly then JVM inject default constructor for us).<\/p>\n<p>Initializers are used to initialize fields of a class. We can have zero or more initializers of static or instance types.<\/p>\n<h4>Fields<\/h4>\n<p>Fields of a class represent properties (also called state attributes) of objects of that class. The fields are declared inside the body of the class.<\/p>\n<p>The general syntax to declare a field in a class is:<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main \r\n\r\n        \/\/ A field declaration\r\n        &lt;&lt;modifiers&gt;&gt; &lt;&lt;data type&gt;&gt; &lt;&lt;field name&gt;&gt; = &lt;&lt;initial value&gt;&gt;;\r\n}\r\n<\/pre>\n<p>Suppose every object of the &#8216;Human&#8217; class has two properties: a name and a gender. The human class should include declarations of two fields: one to represent the name and one to express gender.<\/p>\n<pre class=\"brush: java; title: Human.java; notranslate\" title=\"Human.java\">\r\npublic class Human {\r\n\r\n        String name;\r\n        String gender;\r\n}\r\n<\/pre>\n<p>Here the Human class declares two fields: name and gender. Both fields are of the <code>String<\/code> type. Every instance (or object) of the Human class will have a copy of these two fields.<\/p>\n<h4>Methods or Functions<\/h4>\n<p>A Java method is a collection of statements that are grouped together to operate. Methods are generally used to modify the state of class fields. Methods also can be used to delegate tasks by calling methods in other objects.<\/p>\n<p>In Java, methods may &#8211;<\/p>\n<ul>\n<li>accept zero or more arguments<\/li>\n<li>return void or a single value<\/li>\n<li>be overloaded &#8211; means we can define more than one method with same name but different syntax<\/li>\n<li>be overrided &#8211; means we can define methods with same syntax in parent and child classes<\/li>\n<\/ul>\n<pre class=\"brush: java; title: Human.java; notranslate\" title=\"Human.java\">\r\npublic class Human {\r\n\r\n        String name;\r\n        String gender;\r\n\r\n        public void eat() {\r\n\r\n        \tSystem.out.println(&quot;I am eating&quot;);\r\n        }\r\n}\r\n<\/pre>\n<h4>Constructors<\/h4>\n<p>A constructor is a named block of code that is used to initialize an object of a class immediately after the object is created. The general syntax for a constructor declaration is:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n&lt;&lt;Modifiers&gt;&gt; &lt;&lt;Constructor Name&gt;&gt;(&lt;&lt;parameters list&gt;&gt;) throws &lt;&lt;Exceptions list&gt;&gt; {\r\n\r\n        \/\/ Body of constructor goes here\r\n}\r\n<\/pre>\n<ul>\n<li>A constructor can have its access modifier as public, private, protected, or package-level (no modifier). <\/li>\n<li>The constructor name is the same as the simple name of the class. <\/li>\n<li>The constructor name is followed by a pair of opening and closing parentheses, which may include parameters. <\/li>\n<li>Optionally, the closing parenthesis may be followed by the keyword throws, which in turn is followed by a comma-separated list of exceptions.<\/li>\n<li>Unlike a method, a constructor does not have a return type. <\/li>\n<li>We cannot even specify void as a return type for a constructor. If there is any return type, then it is a method.<\/li>\n<li>Remember that if the name of a construct is the same as the simple name of the class, it could be a method or a constructor. If it specifies a return type, it is a method. If it does not specify a return type, it is a constructor.<\/li>\n<\/ul>\n<h4>Instance Initialization Block<\/h4>\n<p>We saw that a constructor is used to initialize an instance of a class. An <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-instance-initializer\/\">instance initialization block<\/a>, also called <strong>instance initializer<\/strong>, is also used to initialize objects of a class.<\/p>\n<p>An instance initializer is simply a block of code inside the body of a class, but outside of any methods or constructors.  An instance initializer does not have a name. Its code is simply placed inside an opening brace and a closing brace.<\/p>\n<p>Note that an instance initializer is executed in instance context, and the keyword <code>this<\/code> is available inside the instance initializer.<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main \r\n{\r\n\t{\r\n\t\t\/\/instance initializer block\r\n\t}\r\n}\r\n<\/pre>\n<ul>\n<li>we can have multiple instance initializers for a class. <\/li>\n<li>All initializers are executed automatically in textual order for every object we create. <\/li>\n<li>Code for all <strong>instance initializers are executed before any constructor<\/strong>.<\/li>\n<li>An <strong>instance initializer cannot have a return statement<\/strong>. <\/li>\n<li>It cannot throw checked exceptions unless all declared constructors list those checked exceptions in their throws clause.<\/li>\n<\/ul>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main {\r\n    \r\n    \/\/instance initializer\r\n    {\r\n        System.out.println(&quot;Inside instance initializer&quot;);\r\n    }\r\n    \r\n    \/\/constructor\r\n    public Main()       \r\n    {\r\n        System.out.println(&quot;Inside constructor&quot;);\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        new Main();\r\n    }\r\n}\r\n\r\nOutput:\r\n\r\nInside instance initializer\r\nInside constructor\r\n<\/pre>\n<h4>Static Initialization Block<\/h4>\n<ul>\n<li>A <a href=\"https:\/\/howtodoinjava.com\/java\/keywords\/java-static-keyword\/\">static<\/a> initialization block is also known as a <strong>static initializer<\/strong>. <\/li>\n<li>It is similar to an instance initialization block except it is used to initialize a class.<\/li>\n<li>An instance initializer is executed once per object whereas a static initializer is executed only once for a class when the class definition is loaded into JVM.<\/li>\n<li>To differentiate it from an instance initializer, we need to use the <code>static<\/code> keyword in the beginning of its declaration.<\/li>\n<li>we can have multiple static initializers in a class. <\/li>\n<li>All static initializers are executed in textual order in which they appear, and execute before any instance initializers.<\/li>\n<\/ul>\n<p>A static initializer cannot throw checked exceptions. It cannot have a return statement.<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main {\r\n    \r\n    \/\/static initializer\r\n    static {\r\n        System.out.println(&quot;Inside static initializer&quot;);\r\n    }\r\n    \r\n    \/\/constructor\r\n    public Main()       \r\n    {\r\n        System.out.println(&quot;Inside constructor&quot;);\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        new Main();\r\n    }\r\n}\r\n\r\nOutput:\r\n\r\nInside static initializer\r\nInside constructor\r\n<\/pre>\n<h2>How to Create Java Objects<\/h2>\n<p>In Java, to create an object from a class, use <code>new<\/code> keyword along with one of its constructors.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n&lt;&lt;Class&gt;&gt; &lt;&lt;variable&gt;&gt; = new &lt;&lt;Call to Class Constructor&gt;&gt;;\r\n\r\n\/\/e.g.\r\n\r\nHuman human = new Human();\r\n<\/pre>\n<p>Remember, when we do not add a constructor to a class, the Java compiler adds one for us. The constructor that is added by the Java compiler is called a <strong>default constructor<\/strong>. The default constructor accepts no arguments. The name of the constructor of a class is the same as the class name.<\/p>\n<p>The new operator is followed by a call to the constructor of the class whose instance is being created. The new operator creates an instance of a class by allocating the memory in a heap.<\/p>\n<h2>The &#8216;null&#8217; Reference Type<\/h2>\n<p>Java has a special reference type called <code>null<\/code> type. It has no name. Therefore, we cannot define a variable of the null reference type. The null reference type has only one value defined by Java, which is the <strong>null literal<\/strong>. It is simply null.<\/p>\n<p>The null reference type is assignment compatible with any other reference type. That is, we can assign a null value to a variable of any reference type. Practically, a null value stored in a <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/data-types-in-java\/\">reference type<\/a> variable means that the reference variable is referring to no object.<\/p>\n<pre class=\"brush: java; title: null example; notranslate\" title=\"null example\">\r\n\/\/ Assign the null value to john\r\n\r\nHuman john = null;  \t\/\/ john is not referring to any object\r\njohn = new Human(); \t\/\/ Now, john is referring to a valid Human object\r\n<\/pre>\n<p>Note that null is a literal of the null type. We cannot assign null to a <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/primitive-data-types-in-java\/\">primitive type<\/a> variable, and that&#8217;s why the Java compiler does not allow us to compare a primitive value to a null value.<\/p>\n<p>That&#8217;s all for this very basic tutorial about creating classes in java.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Classes are the basic units of programming in the object-oriented paradigm. In this tutorial, learn to write Java class and how to create object in Java. <\/p>\n","protected":false},"author":2,"featured_media":13289,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[1443],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",1024,576,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14-300x169.png",300,169,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14-768x432.png",768,432,true],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",1024,576,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",1024,576,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",1024,576,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",120,68,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Classes are the basic units of programming in the object-oriented paradigm. In this tutorial, learn to write Java class and how to create object in Java.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4766"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4766"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4766\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/13289"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4766"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4766"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4766"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}