{"id":2871,"date":"2013-08-04T02:44:29","date_gmt":"2013-08-04T02:44:29","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=2871"},"modified":"2020-12-26T00:49:58","modified_gmt":"2020-12-25T19:19:58","slug":"struts-2-hello-world-example-application","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/struts2\/struts-2-hello-world-example-application\/","title":{"rendered":"Struts 2 Hello World Example"},"content":{"rendered":"<p>In my previous posts, I have written many examples and tutorials on <a title=\"resteasy tutorials\" href=\"\/\/howtodoinjava.com\/restful-web-service\/\"><strong>JAX-RS RESTEasy<\/strong><\/a>, <a title=\"spring 3 tutorials\" href=\"https:\/\/howtodoinjava.com\/\"><strong>Spring 3<\/strong><\/a>, <a title=\"hibernate tutorials\" href=\"\/\/howtodoinjava.com\/series\/hibernate-tutorials\/\"><strong>Hibernate<\/strong><\/a> and other java frameworks e.g. <a title=\"maven tutorials\" href=\"\/\/howtodoinjava.com\/maven\/\"><strong>maven<\/strong><\/a> or <a title=\"junit tutorials\" href=\"https:\/\/howtodoinjava.com\/junit\/\"><strong>junit<\/strong><\/a>. I got many requests to write something on <strong>struts 2<\/strong> also. Well, Here I am starting with hello world example. In next posts, I will try to cover maximum areas and concepts involving struts 2. So, keep watching.<\/p>\n<pre><strong>Sections in this post:<\/strong>\r\n<a href=\"#create_maven_project\">Create maven web project<\/a>\r\n<a href=\"#maven_dependency\">Struts 2 dependencies<\/a>\r\n<a href=\"#web_xml_changes\">web.xml changes<\/a>\r\n<a href=\"#struts_xml\">Know struts.xml configuration file<\/a>\r\n<a href=\"#struts_properties\">Using struts.properties file<\/a>\r\n<a href=\"#struts_action_class\">Writing first action class<\/a>\r\n<a href=\"#jsp_views\">Composing view files<\/a>\r\n<a href=\"#testing\">Testing the application<\/a>\r\n<a href=\"#sourcecode_download\">Sourcecode download<\/a>\r\n<\/pre>\n<p><a name=\"create_maven_project\"><\/a><\/p>\n<h3><strong>Create maven web project<\/strong><\/h3>\n<p>I will not eat much space here. You can read more details on <a title=\"How to create a eclipse web application using maven\" href=\"https:\/\/howtodoinjava.com\/maven\/maven-web-project-in-eclipse\/\"><strong>how to create maven eclipse web project<\/strong><\/a>. In short, following commands are used.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nmvn archetype:generate -DgroupId=com.howtodoinjava.struts2.example -DartifactId=struts2example -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\r\n\r\ncd struts2example\r\n\r\nmvn eclipse:eclipse -Dwtpversion=2.0\r\n<\/pre>\n<p><a name=\"maven_dependency\"><\/a><\/p>\n<h3><strong>Struts 2 dependencies<\/strong><\/h3>\n<p>I am using maven to import struts 2 runtime dependencies. It&#8217;s advantage is that you don&#8217;t need to remember and hunt for required dependencies manually and you get everything in one shot.<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n\t&lt;dependency&gt;\r\n\t\t&lt;groupId&gt;org.apache.struts&lt;\/groupId&gt;\r\n\t\t&lt;artifactId&gt;struts2-core&lt;\/artifactId&gt;\r\n\t\t&lt;version&gt;2.3.15.1&lt;\/version&gt;\r\n\t&lt;\/dependency&gt;\r\n<\/pre>\n<p>If you want to see what all got included by this, look at below image: (Get the latest version jar files)<\/p>\n<figure id=\"attachment_2872\" aria-describedby=\"caption-attachment-2872\" style=\"width: 348px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"size-full wp-image-2872\" alt=\"Struts 2 jar files\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/struts2-jar-files.png\" width=\"358\" height=\"202\" \/><figcaption id=\"caption-attachment-2872\" class=\"wp-caption-text\">Struts 2 jar files<\/figcaption><\/figure>\n<p><a name=\"web_xml_changes\"><\/a><\/p>\n<h3><strong>web.xml changes<\/strong><\/h3>\n<p>Struts somehow needs to be plugged into your web application. It means that incoming requests to application should be handed over to struts for processing. This is done by adding a filter definition in web.xml file. This filter essentially redirect all incoming requests to <a title=\"StrutsPrepareAndExecuteFilter\" href=\"https:\/\/struts.apache.org\/maven\/struts2-core\/apidocs\/org\/apache\/struts2\/dispatcher\/filter\/StrutsPrepareAndExecuteFilter.html\"><strong>StrutsPrepareAndExecuteFilter<\/strong><\/a> which then use configurations to handle that request.<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n&lt;!DOCTYPE web-app PUBLIC\r\n &quot;-\/\/Sun Microsystems, Inc.\/\/DTD Web Application 2.3\/\/EN&quot;\r\n &quot;http:\/\/java.sun.com\/dtd\/web-app_2_3.dtd&quot; &gt;\r\n&lt;web-app&gt;\r\n  \t&lt;display-name&gt;Archetype Created Web Application&lt;\/display-name&gt;\r\n\t\r\n\t&lt;filter&gt;\r\n\t    &lt;filter-name&gt;struts2&lt;\/filter-name&gt;\r\n\t    &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;\/filter-class&gt;\r\n\t&lt;\/filter&gt;\r\n\t&lt;filter-mapping&gt;\r\n\t    &lt;filter-name&gt;struts2&lt;\/filter-name&gt;\r\n\t    &lt;url-pattern&gt;\/*&lt;\/url-pattern&gt;\r\n\t&lt;\/filter-mapping&gt;\r\n\t\r\n&lt;\/web-app&gt;\r\n<\/pre>\n<p><a name=\"struts_xml\"><\/a><\/p>\n<h3><strong>Know struts.xml configuration file<\/strong><\/h3>\n<p>So, StrutsPrepareAndExecuteFilter has got an request to handle. Now what? It will use the configuration to know how to handle a particular request. This configuration is defined in struts.xml file. This file will have url mappings specific to application workflow and their action handlers. It also defines the input\/success\/error views.<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n \r\n&lt;!DOCTYPE struts PUBLIC\r\n&quot;-\/\/Apache Software Foundation\/\/DTD Struts Configuration 2.0\/\/EN&quot;\r\n&quot;http:\/\/struts.apache.org\/dtds\/struts-2.0.dtd&quot;&gt;\r\n \r\n&lt;struts&gt;\r\n\t&lt;include file=&quot;struts-default.xml&quot;\/&gt;\r\n\t&lt;package name=&quot;default&quot; extends=&quot;struts-default&quot;&gt;\r\n\t    &lt;action name=&quot;&quot;&gt;\r\n            &lt;result&gt;\/WEB-INF\/jsp\/index.jsp&lt;\/result&gt;\r\n        &lt;\/action&gt;\r\n\t   &lt;action name=&quot;testAction&quot; class=&quot;com.howtodoinjava.struts2.example.web.TestAction&quot;&gt;\r\n\t      &lt;result name=&quot;input&quot;&gt;\/WEB-INF\/jsp\/index.jsp&lt;\/result&gt;\r\n\t      &lt;result name=&quot;success&quot;&gt;\/WEB-INF\/jsp\/success.jsp&lt;\/result&gt;\r\n\t      &lt;result name=&quot;error&quot;&gt;\/WEB-INF\/jsp\/index.jsp&lt;\/result&gt;\r\n\t   &lt;\/action&gt;\r\n\t&lt;\/package&gt;\r\n&lt;\/struts&gt;\r\n<\/pre>\n<p><a name=\"struts_properties\"><\/a><\/p>\n<h3><strong>Using struts.properties file<\/strong><\/h3>\n<p>Struts uses some default properties to configure its behavior on runtime. You can override these defaults in stuts.properties file.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n#see http:\/\/struts.apache.org\/2.0.14\/docs\/strutsproperties.html\r\nstruts.devMode=true\r\n\/\/message resource\r\nstruts.custom.i18n.resources=global\r\n<\/pre>\n<p><a name=\"struts_action_class\"><\/a><\/p>\n<h3><strong>Writing first action class<\/strong><\/h3>\n<p>This is important step because you will write the actual application logic here. Struts 2 actions usually extend <a title=\"ActionSupport\" href=\"https:\/\/struts.apache.org\/maven\/struts2-core\/apidocs\/com\/opensymphony\/xwork2\/ActionSupport.html\"><strong>ActionSupport<\/strong><\/a> class which provide some methods to override and change the application flow and inject your business logic in between.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npackage com.howtodoinjava.struts2.example.web;\r\n\r\nimport java.util.Date;\r\nimport com.opensymphony.xwork2.ActionSupport;\r\n\r\n@SuppressWarnings(&quot;serial&quot;)\r\npublic class TestAction extends ActionSupport \r\n{\r\n\tprivate String name;\r\n    private Date nowDate;\r\n\r\n    @Override\r\n    public void validate(){\r\n        if (name==null || name.length()==0)\r\n            addActionError(getText(&quot;error.enter.message&quot;));\r\n    }\r\n\r\n    @Override\r\n    public String execute() throws Exception {\r\n        nowDate = new Date();\r\n        return ActionSupport.SUCCESS;\r\n    }\r\n    public String getName() {\r\n\t\treturn name;\r\n\t}\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\tpublic Date getNowDate() {\r\n        return nowDate;\r\n    }\r\n}\r\n<\/pre>\n<p><strong>Note:<\/strong> Struts 2 actions looks like POJO classes because they have to act as action forms also which were seperate entity in struts 1.<\/p>\n<p><a name=\"jsp_views\"><\/a><\/p>\n<h3><strong>Composing view files<\/strong><\/h3>\n<p>This is general step and involve writing view layer e.g. in our case we are writing jsp files. You can use the message resource to get messages from a property file which help in i18n later.<\/p>\n<p><strong>index.jsp<\/strong><\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n&lt;%@ page language=&quot;java&quot; contentType=&quot;text\/html; charset=ISO-8859-1&quot; pageEncoding=&quot;ISO-8859-1&quot;%&gt;\r\n&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;\/struts-tags&quot; %&gt;\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\r\n&lt;!DOCTYPE html PUBLIC &quot;-\/\/W3C\/\/DTD XHTML 1.0 Transitional\/\/EN&quot; &quot;http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-transitional.dtd&quot;&gt;\r\n&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;Struts 2 hello world example&lt;\/title&gt;\r\n        &lt;s:head\/&gt;\r\n    &lt;\/head&gt;\r\n\r\n    &lt;body&gt;\r\n        &lt;h1&gt;&lt;s:text name=&quot;welcome&quot; \/&gt;&lt;\/h1&gt;\r\n        &lt;s:if test=&quot;hasActionErrors()&quot;&gt;\r\n\t        &lt;div id=&quot;fieldErrors&quot;&gt;\r\n\t            &lt;s:actionerror\/&gt;\r\n\t        &lt;\/div&gt;\r\n        &lt;\/s:if&gt;\r\n        &lt;s:form action=&quot;testAction&quot; namespace=&quot;\/&quot; method=&quot;post&quot; name=&quot;myForm&quot; theme=&quot;xhtml&quot;&gt;\r\n            &lt;s:textfield name=&quot;name&quot; size=&quot;40&quot; maxlength=&quot;40&quot; key=&quot;your.message-label&quot;\/&gt;\r\n            &lt;s:submit key=&quot;submit&quot; \/&gt;\r\n        &lt;\/s:form&gt;\r\n    &lt;\/body&gt;\r\n&lt;\/html&gt;\t\r\n<\/pre>\n<p><strong>success.jsp<\/strong><\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n&lt;%@ page language=&quot;java&quot; contentType=&quot;text\/html; charset=ISO-8859-1&quot;\r\n    pageEncoding=&quot;ISO-8859-1&quot;%&gt;\r\n&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;\/struts-tags&quot; %&gt;\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\r\n&lt;!DOCTYPE html PUBLIC &quot;-\/\/W3C\/\/DTD XHTML 1.0 Transitional\/\/EN&quot; &quot;http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-transitional.dtd&quot;&gt;\r\n&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;Success Screen !!&lt;\/title&gt;\r\n    &lt;\/head&gt;\r\n    &lt;body&gt;\r\n        &lt;h2&gt;Thank you for running this demo on &lt;s:property value=&quot;nowDate&quot; \/&gt;&lt;\/h2&gt;\r\n        &lt;p&gt;\r\n            Your name recorded was: &lt;h3&gt;&lt;s:property value=&quot;name&quot; \/&gt;&lt;\/h3&gt;\r\n        &lt;\/p&gt;\r\n    &lt;\/body&gt;\r\n&lt;\/html&gt;\r\n<\/pre>\n<p>The message resource file, they are using is:<\/p>\n<p><strong>global.properties<\/strong><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nsubmit=Submit\r\nyour.message-label=Your Name\r\nwelcome=Welcome to Struts 2!\r\nerror.enter.message=Please enter your name !!\r\n<\/pre>\n<p><a name=\"testing\"><\/a><\/p>\n<h3><strong>Testing the application<\/strong><\/h3>\n<p>We are good to run our hello world application now. Lets hit the browser.<\/p>\n<p><strong>Type http:\/\/localhost:8080\/struts2example\/ and hit Enter<\/strong><\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-2873\" alt=\"struts2-hello-world-1\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/struts2-hello-world-1.png\" width=\"445\" height=\"255\" \/><\/p>\n<p><strong>Press Submit without entering anything<\/strong><\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-2874\" alt=\"struts2-hello-world-2\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/struts2-hello-world-2.png\" width=\"492\" height=\"291\" \/><\/p>\n<p><strong>Enter your name and press Submit<\/strong><\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-2875\" alt=\"struts2-hello-world-3\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/struts2-hello-world-3.png\" width=\"518\" height=\"223\" \/><\/p>\n<p><a name=\"sourcecode_download\"><\/a><\/p>\n<p>That&#8217;s all friends for this struts 2 hello world application. If you want to download the source code of this tutorial, follow below given download link.<br \/>\n<div class=\"noticeboxesde downgreennoticebox\"><a title=\"struts 2 hello world sourcecode download\" href=\"https:\/\/docs.google.com\/file\/d\/0B7yo2HclmjI4d2sxRGtSS1pONEE\/edit?usp=sharing\"><strong>Sourcecode Download<\/strong><\/a><\/div><br \/>\n<strong>Happy Learning !!<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In my previous posts, I have written many examples and tutorials on JAX-RS RESTEasy, Spring 3, Hibernate and other java frameworks e.g. maven or junit. I got many requests to write something on struts 2 also. Well, Here I am starting with hello world example. In next posts, I will try to cover maximum areas &#8230; <a title=\"Struts 2 Hello World Example\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/struts2\/struts-2-hello-world-example-application\/\" aria-label=\"More on Struts 2 Hello World Example\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":2873,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[48],"tags":[822],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":8,"uagb_excerpt":"In my previous posts, I have written many examples and tutorials on JAX-RS RESTEasy, Spring 3, Hibernate and other java frameworks e.g. maven or junit. I got many requests to write something on struts 2 also. Well, Here I am starting with hello world example. In next posts, I will try to cover maximum areas&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/2871"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=2871"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/2871\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=2871"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=2871"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=2871"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}