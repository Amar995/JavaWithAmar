{"id":4048,"date":"2014-07-13T20:57:42","date_gmt":"2014-07-13T15:27:42","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4048"},"modified":"2022-01-29T23:30:40","modified_gmt":"2022-01-29T18:00:40","slug":"method-overloading-overriding","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/method-overloading-overriding\/","title":{"rendered":"Overloading vs Overriding in Java"},"content":{"rendered":"<p><strong>Method overloading and overriding<\/strong> ( in other words, <strong><a title=\"What is polymorphism in java\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/what-is-polymorphism-in-java\/\">polymorphism in java<\/a><\/strong>) is neither a very difficult concept and nor it&#8217;s one of very unknown topics. Yet, I am bringing this topic here in this post, because at the same time it is very easy to make mistakes when such concepts are tested in java <a title=\"Real java interview questions asked for Oracle Enterprise Manager Project\" href=\"https:\/\/howtodoinjava.com\/interview-questions\/real-java-interview-questions-asked-for-oracle-enterprise-manager-project\/\"><strong>interviews<\/strong><\/a> using multiple code examples. I am not giving any new concept here, but I intend to revise your existing knowledge regarding rules of <strong>method overloading and overriding in java<\/strong>.<\/p>\n<h2>Method Overloading Rules<\/h2>\n<p>Here are the rules which you keep in mind while overloading any method in java:<\/p>\n<p><strong>1)<\/strong> First and important rule to overload a method in java is to <strong>change method signature<\/strong>. Method signature is made of <strong>number of arguments, type of arguments and order of arguments<\/strong> if they are of different types.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class DemoClass {\r\n\t\/\/ Overloaded method\r\n\tpublic Integer sum(Integer a, Integer b) {\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t\/\/ Overloading method\r\n\tpublic Integer sum(Float a, Integer b) {  \/\/Valid\r\n\t\treturn null;\r\n\t}\r\n}\r\n<\/pre>\n<p><strong>2)<\/strong> Return type of method is never part of method signature, so only <strong>changing the return type of method does not amount to method overloading<\/strong>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class DemoClass {\r\n\t\/\/ Overloaded method\r\n\tpublic Integer sum(Integer a, Integer b) {\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t\/\/ Overloading method\r\n\tpublic Float sum(Integer a, Integer b) {     \/\/Not valid; Compile time error\r\n\t\treturn null;\r\n\t}\r\n}\r\n<\/pre>\n<p><strong>3)<\/strong> Thrown exceptions from methods are also not considered when overloading a method. So your overloaded method throws the same exception, a different exception or it simply does no throw any exception; <strong>no effect at all on method loading<\/strong>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class DemoClass {\r\n\t\/\/ Overloaded method\r\n\tpublic Integer sum(Integer a, Integer b) throws NullPointerException{\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t\/\/ Overloading method\r\n\tpublic Integer sum(Integer a, Integer b) throws Exception{ \t\/\/Not valid; Compile time error\r\n\t\treturn null;\r\n\t}\r\n}\r\n<\/pre>\n<blockquote><p><strong>Read More: <a title=\"What is polymorphism in java\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/what-is-polymorphism-in-java\/\">What is polymorphism in java<\/a><\/strong><\/p><\/blockquote>\n<h2>Method Overriding Rules<\/h2>\n<p>We read above the rules for method overloading, now its time to list down the rules which you should keep remember while overriding a method in java.<\/p>\n<p><strong>1)<\/strong> The method <strong>argument list in overridden and overriding methods must be exactly same<\/strong> If they don&#8217;t match, you will end up with an overloaded method.<\/p>\n<p><strong>2)<\/strong> The <strong>return type of overriding method can be child class of return type declared in overridden method<\/strong>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class SuperClass {\r\n\t\/\/Overriden method\r\n\tpublic Number sum(Integer a, Integer b) {\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n\r\nclass SubClass extends SuperClass {\r\n\t\/\/Overriding method\r\n\t@Override\r\n\tpublic Integer sum(Integer a, Integer b) {  \t\/\/Integer extends Number; so it's valid\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n<\/pre>\n<p><strong>3)<\/strong> Above all rules,<strong> private, static and final methods can not be overridden<\/strong> in java in any way. As simple as that !!<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class SuperClass {\r\n\tprivate Integer sum(Integer a, Integer b) {   \/\/private method; overriding not possible\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n\r\nclass SubClass extends SuperClass {\r\n\t\/\/Overriding method\r\n\tpublic Integer sum(Integer a, Integer b) {   \r\n\t\treturn a + b;\r\n\t}\r\n}\r\n<\/pre>\n<p><strong>4)<\/strong> <strong>Overriding method can not throw checked Exception higher in hierarchy<\/strong> than thrown by overridden method. Let&#8217;s say for example overridden method in parent class throws <code>FileNotFoundException<\/code>, the overriding method in child class can throw <code>FileNotFoundException<\/code>; but it is not allowed to throw <code>IOException<\/code> or <code>Exception<\/code>, because <code>IOException<\/code> or <code>Exception<\/code> are higher in hierarchy i.e. super classes of <code>FileNotFoundException<\/code>.<\/p>\n<p><em>More to it, you can omit the exception declaration from overriding method. It&#8217;s allowed and perfectly valid. Also overriding method can throw any unchecked (runtime) exception, regardless of whether the overridden method declares the exception.<\/em><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class SuperClass {\r\n\t\/\/Overriden method\r\n\tpublic Integer sum(Integer a, Integer b) throws FileNotFoundException {\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n\r\nclass SubClass extends SuperClass {\r\n\t\/\/Overriding method\r\n\tpublic Integer sum(Integer a, Integer b) throws IOException {   \t\/\/Not valid; Compile time error\r\n\t\treturn a + b;\r\n\t}\r\n\t\/\/Exception IOException is not compatible with throws clause in SuperClass.sum(Integer, Integer)\r\n\tpublic Integer sum(Integer a, Integer b)  {\t\t\t\t\t\t\/\/It's valid; Don't declare the exception at all is permitted.\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n\r\n<\/pre>\n<p><strong>5)<\/strong> Also note that<strong> overriding method can not reduce the access scope of overridden method<\/strong>. Put in simple words, if overridden method in parent class is protected, then overriding method in child class can not be private. It must be either protected (same access) or public (wider access).<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class SuperClass {\r\n\t\/\/Overriden method\r\n\tprotected Integer sum(Integer a, Integer b) {\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n\r\nclass SubClass extends SuperClass {\r\n\t\/\/Overriding method\r\n\t\/\/Not valid; Compile time error &amp;quot;Cannot reduce the visibility of the inherited method from SuperClass&amp;quot;\r\n\tprivate Integer sum(Integer a, Integer b)  {\t\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n<\/pre>\n<p>Not to repeat again that method overriding is legal when talking in terms on parent classes and child classes. It does not happen within same class.<\/p>\n<div class=\"noticeboxesde bluenoticebox\">To verify that you are correctly overriding a method or not, simply use the annotation <strong>@Override<\/strong> on overriding method. It will verify all the method overriding rules for you. If there is any issue, it will result in compile time error.<\/div>\n<blockquote><p><strong>Read More: <a title=\"Java Interview Questions\" href=\"https:\/\/howtodoinjava.com\/java-interview-questions\/\">Java Interview Questions<\/a><\/strong><\/p><\/blockquote>\n<p>That&#8217;s all for this simple yet important concept to brush your basics in core java and object oriented programming.<\/p>\n<p><strong>Happy Learning !!<\/strong><\/p>\n<p>Ref: <a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/java\/IandI\/override.html\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle Blog<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn the difference between method overloading and method overriding in java, which mainly involve method name, signature, parameters list and return type.<\/p>\n","protected":false},"author":2,"featured_media":8438,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1517,1454],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/Method-Overloading-vs-Overriding.png",439,242,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/Method-Overloading-vs-Overriding.png",150,83,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/Method-Overloading-vs-Overriding.png",300,165,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/Method-Overloading-vs-Overriding.png",439,242,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/Method-Overloading-vs-Overriding.png",439,242,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/Method-Overloading-vs-Overriding.png",439,242,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/Method-Overloading-vs-Overriding.png",439,242,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/Method-Overloading-vs-Overriding.png",120,66,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":17,"uagb_excerpt":"Learn the difference between method overloading and method overriding in java, which mainly involve method name, signature, parameters list and return type.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4048"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4048"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4048\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/8438"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4048"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4048"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4048"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}