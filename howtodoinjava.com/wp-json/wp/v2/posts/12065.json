{"id":12065,"date":"2018-11-09T15:45:50","date_gmt":"2018-11-09T10:15:50","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=12065"},"modified":"2022-01-25T13:29:13","modified_gmt":"2022-01-25T07:59:13","slug":"control-flow-statements","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/flow-control\/control-flow-statements\/","title":{"rendered":"Java Flow Control Statements"},"content":{"rendered":"<p>Java application code is normally executed sequentially from top to bottom in the order that the code appears. To apply business logic, we may need to execute code on conditional basis. <strong>Control flow statements<\/strong> helps in this conditional execution of code blocks.<\/p>\n<p>All control flow statements are associated with a business condition &#8211; when <strong>true<\/strong>, the code block executes; when <strong>false<\/strong> it is skipped.<\/p>\n<p>Java supports following <strong>control statements<\/strong>.<\/p>\n<h2>1. If-else Statement<\/h2>\n<p>If-else statement tells the program to execute a certain section of code only if a particular test evaluates to <strong>true<\/strong> otherwise <strong>else<\/strong> block is executed.<\/p>\n<p>We can have <strong>nested if-else<\/strong> blocks.<\/p>\n<pre class=\"brush: java; title: If-else example; notranslate\" title=\"If-else example\">\r\npublic class JavaExample \r\n{\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\tboolean condition = true;\r\n\t\t\r\n\t\tif(condition) {\r\n\t\t\tSystem.out.println(&quot;Condition is true&quot;);\r\n\t\t} \r\n\t\telse \r\n\t\t{\r\n\t\t\tSystem.out.println(&quot;Condition is false&quot;);\r\n\t\t}\r\n\t}\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nCondition is true\r\n<\/pre>\n<blockquote><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/if-else-statement-in-java\/\">Java if-else statement<\/a><\/p><\/blockquote>\n<h2>2. Switch Statement<\/h2>\n<p>As if-else statement tells your program to execute a certain section of code only if a particular test evaluates to true or false, the switch statement can have <strong>multiple execution paths<\/strong>.<\/p>\n<p> A switch works with the byte, short, char, and int primitive data types. It also works with enumerated types, the String class, and a few special classes that wrap certain primitive types: Character, Byte, Short, and Integer. (enums were added in java 5, and String class was added in java 7).<\/p>\n<pre class=\"brush: java; title: Switch example; notranslate\" title=\"Switch example\">\r\npublic class JavaExample \r\n{\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\tString value = &quot;B&quot;;\r\n\r\n\t\tswitch (value) \r\n\t\t{\r\n\t\t\tcase &quot;A&quot;:\r\n\t\t\t\tSystem.out.println(&quot;Value is A&quot;);\r\n\t\t\t\tbreak;\r\n\t\t\tcase &quot;B&quot;: \r\n\t\t\t\tSystem.out.println(&quot;Value is B&quot;);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tSystem.out.println(&quot;Value is neither A nor B&quot;);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nValue is B\r\n<\/pre>\n<blockquote><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/switch-statement-in-java\/\">Java switch statement<\/a><\/p><\/blockquote>\n<h2>3. While Loop<\/h2>\n<p>The while statement or loop continually executes a block of statements while a particular condition is true. The while statement continues testing the expression and executing its block until the expression evaluates to false.<\/p>\n<pre class=\"brush: java; title: While example; notranslate\" title=\"While example\">\r\npublic class JavaExample \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        int count = 1;\r\n        while (count &lt; 5) \r\n        {\r\n            System.out.println(&quot;Count is: &quot; + count);\r\n            count++;\r\n        }\r\n    }\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n1\r\n2\r\n3\r\n4\r\n5\r\n<\/pre>\n<blockquote><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/while-loop-in-java\/\">Java while loop statement<\/a><\/p><\/blockquote>\n<h2>4. Do-while Loop<\/h2>\n<p>The difference between do-while and while is that do-while evaluates its expression at the bottom of the loop instead of the top. Therefore, the statements within the do block are always executed at least once.<\/p>\n<p>Note that the do-while statement ends with a semicolon. The condition-expression must be a boolean expression.<\/p>\n<pre class=\"brush: java; title: Do-while example; notranslate\" title=\"Do-while example\">\r\nint i = 1;\r\nint sum = 0;\r\n\r\ndo \r\n{\r\n    sum = sum + i;\r\n    i++;\r\n}\r\nwhile (i &lt;= 10);\r\n\r\nSystem.out.println(sum);\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n55\r\n<\/pre>\n<blockquote><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/do-while-loop-in-java\/\">Java do-while loop statement<\/a><\/p><\/blockquote>\n<h2>5. For Loop<\/h2>\n<p>The for statement iterates over a range of values. It repeatedly loops over values until a particular condition is satisfied.<\/p>\n<pre class=\"brush: java; title: For loop example; notranslate\" title=\"For loop example\">\r\nfor(int num = 1; num &lt;= 5; num++)\r\n{\r\n\r\n     System.out.println(num);\r\n\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n1\r\n2\r\n3\r\n4\r\n5\r\n<\/pre>\n<blockquote><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/for-loop-in-java\/\">Java for-loop statement<\/a><\/p><\/blockquote>\n<h2>6. Enhanced For-each Loop<\/h2>\n<p>Java 5 introduced an foreach loop, which is called a enhanced for-each loop. It is used for iterating over elements of arrays and collections.<\/p>\n<pre class=\"brush: java; title: for-each example; notranslate\" title=\"for-each example\">\r\nint[] numList = {10, 20, 30, 40};\r\n\r\nfor(int num : numList) \r\n{\r\n    System.out.println(num);\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n10\r\n20\r\n30\r\n40\r\n<\/pre>\n<blockquote><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/enhanced-for-each-loop-in-java\/\">Java for-each statement<\/a><\/p><\/blockquote>\n<h2>7. Labeled Statement<\/h2>\n<p>Whenever during a program execution, a labeled break statement is encountered that control immediately goes out of enclosing labeled block. Similarly, labeled continue will bring control back to start. Just like in normal break and continue statements, with additional names given to blocks.<\/p>\n<pre class=\"brush: java; title: Labeled statement example; notranslate\" title=\"Labeled statement example\">\r\npublic class JavaExample \r\n{\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\tloop: for(int i=0; i &lt; 6; i++) \r\n\t\t{\r\n\t\t\tif(i % 2 == 0) \r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(&quot;In if block :: &quot; + i);\r\n\t\t\t\tcontinue loop;\r\n\t\t\t} \r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(&quot;In else block :: &quot; + i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nIn if block :: 0\r\nIn else block :: 1\r\nIn if block :: 2\r\nIn else block :: 3\r\nIn if block :: 4\r\nIn else block :: 5\r\n<\/pre>\n<blockquote><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/labeled-statements-in-java\/\">Java label statement<\/a><\/p><\/blockquote>\n<p>Happy Learning !!<\/p>\n<p>Reference:  <a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/java\/nutsandbolts\/flow.html\" rel=\"noopener noreferrer\" target=\"_blank\">Java Docs<\/a> <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java application code is normally executed sequentially from top to bottom in the order that the code appears. To apply business logic, we may need to execute code on conditional basis. Control flow statements helps in this conditional execution of code blocks. All control flow statements are associated with a business condition &#8211; when true, &#8230; <a title=\"Java Flow Control Statements\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/control-flow-statements\/\" aria-label=\"More on Java Flow Control Statements\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4758,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1305],"tags":[4,1509],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Java application code is normally executed sequentially from top to bottom in the order that the code appears. To apply business logic, we may need to execute code on conditional basis. Control flow statements helps in this conditional execution of code blocks. All control flow statements are associated with a business condition &#8211; when true,&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12065"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=12065"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12065\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4758"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=12065"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=12065"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=12065"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}