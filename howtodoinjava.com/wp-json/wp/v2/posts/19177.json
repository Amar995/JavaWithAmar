{"id":19177,"date":"2022-01-04T23:54:35","date_gmt":"2022-01-04T18:24:35","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=19177"},"modified":"2022-04-24T13:26:56","modified_gmt":"2022-04-24T07:56:56","slug":"logback-tutorial","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/logback\/logback-tutorial\/","title":{"rendered":"Logback Tutorial"},"content":{"rendered":"\n<p>Logback is intended as a <em>successor to the log4j<\/em> project and was designed by <a href=\"https:\/\/stackoverflow.com\/users\/100970\/ceki\" target=\"_blank\" rel=\"noreferrer noopener\">Ceki G\u00fclc\u00fc<\/a>. Logback is <strong>faster<\/strong> and has a <strong>smaller footprint<\/strong> than all existing logging systems. Logback performs about ten times faster than Log4j on specific critical execution paths.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The <code>Logger<\/code> class in logback-classic implements the SLF4J API natively, so we incur zero overhead when invoking an SLF4J logger with logback-classic as the underlying implementation. Using <a href=\"https:\/\/howtodoinjava.com\/log4j2\/slf4j-vs-log4j-which-one-is-better\/\">SLF4J API drastically reduces the work involved in switching logging frameworks<\/a>.<\/p><\/blockquote>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-4d261fe1 \" \n\t\t\t\t\tdata-scroll= \"\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-logback-dependencies\">1. Logback Dependencies<\/a><li class=\"uagb-toc__list\"><a href=\"#2-getting-started-with-logback\">2. Getting Started with Logback<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-creating-and-using-logger\">2.1. Creating and Using Logger<\/a><li class=\"uagb-toc__list\"><a href=\"#22-parameterized-messages\">2.2. Parameterized Messages<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-logback-configuration\">3. Logback Configuration<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-zero-configuration-defaults\">3.1. Zero Configuration Defaults<\/a><li class=\"uagb-toc__list\"><a href=\"#32-loading-configuration-file\">3.2. Loading Configuration File<\/a><li class=\"uagb-toc__list\"><a href=\"#33-checking-initialization-errors\">3.3. Checking Initialization Errors<\/a><li class=\"uagb-toc__list\"><a href=\"#34-auto-reload-configuration-file-upon-modification\">3.4. Auto Reload Configuration File upon Modification<\/a><li class=\"uagb-toc__list\"><a href=\"#35-conditional-configuration\">3.5. Conditional Configuration<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#4-configuring-appenders\">4. Configuring Appenders<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-consoleappender\">4.1. ConsoleAppender<\/a><li class=\"uagb-toc__list\"><a href=\"#42-rollingfileappender\">4.2. RollingFileAppender<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#5-faqs\">5. FAQs<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#51-how-to-print-jar-files-names-in-logs\">5.1. How to print Jar files names in logs<\/a><li class=\"uagb-toc__list\"><a href=\"#52-clean-resources-on-shutdown\">5.2. Clean Resources on Shutdown<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#6-conclusion\">6. Conclusion<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. Logback Dependencies<\/h2>\n\n\n\n<p>To be up and running with logback requires three modules in the application runtime:<\/p>\n\n\n\n<ul><li><a href=\"https:\/\/mvnrepository.com\/artifact\/ch.qos.logback\/logback-core\" target=\"_blank\" rel=\"noreferrer noopener\">logback-core<\/a>: provides the main classes and interfaces needed by the other two modules.<\/li><li><a href=\"https:\/\/mvnrepository.com\/artifact\/ch.qos.logback\/logback-classic\" target=\"_blank\" rel=\"noreferrer noopener\">logback-classic<\/a>: natively implements the SLF4J API.<\/li><li><a href=\"https:\/\/mvnrepository.com\/artifact\/org.slf4j\/slf4j-api\" target=\"_blank\" rel=\"noreferrer noopener\">slf4j-api<\/a>: logback-classic&#8217;s <em>Logger<\/em> class implements the SLF4J API. So we can readily switch back and forth between logback and other logging frameworks.<\/li><li><a href=\"https:\/\/mvnrepository.com\/artifact\/ch.qos.logback\/logback-access\" target=\"_blank\" rel=\"noreferrer noopener\">logback-access<\/a> (<em>Optional<\/em>) : integrates with Servlet containers, such as Tomcat and Jetty, to provide remote logging functionality.<\/li><\/ul>\n\n\n\n<pre title=\"pom.xml\" class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency&gt;\n\t&lt;groupId&gt;ch.qos.logback&lt;\/groupId&gt;\n\t&lt;artifactId&gt;logback-core&lt;\/artifactId&gt;\n\t&lt;version&gt;1.2.10&lt;\/version&gt;\n&lt;\/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;ch.qos.logback&lt;\/groupId&gt;\n    &lt;artifactId&gt;logback-classic&lt;\/artifactId&gt;\n    &lt;version&gt;1.2.10&lt;\/version&gt;\n&lt;\/dependency&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.slf4j&lt;\/groupId&gt;\n\t&lt;artifactId&gt;slf4j-api&lt;\/artifactId&gt;\n\t&lt;version&gt;1.7.32&lt;\/version&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<p>Note that <code>logback-classic<\/code> will automatically pull in the&nbsp;<code>logback-core<\/code>&nbsp;and&nbsp;<code>slf4j-api<\/code>, so adding logback-classic dependency is enough.<\/p>\n\n\n\n<h2>2. Getting Started with Logback<\/h2>\n\n\n\n<h3>2.1. Creating and Using Logger<\/h3>\n\n\n\n<p>After the dependencies have been imported into the classpath, we can begin logging into the application.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class Main {\n\tpublic static void main(final String[] args) \n\t{\n\t\tLogger logger = LoggerFactory.getLogger(Main.class);\n\t\t\/\/ OR \n\t\t\/\/ Logger logger = LoggerFactory.getLogger(\"com.howtodoinjava.demo\");\n\n\t\tlogger.info(\"Info Message Logged !!!\");\n\t}\n}<\/code><\/pre>\n\n\n\n<pre title=\"\" class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">18:40:47.392 [main] INFO  com.howtodoinjava.demo.slf4j.Main - Info Message Logged !!!<\/code><\/pre>\n\n\n\n<p>Notice the above class <code>Main<\/code>. It imports the <em>Logger<\/em> and <em>LoggerFactory<\/em> classes defined in the SLF4J API. We get the <em>Logger<\/em> instance using the static method <code>LoggerFactory.getLogger()<\/code>. Then we use <em>logger.info()<\/em> to log messages. It supports <em>debug()<\/em>, <em>info()<\/em>, <em>warn()<\/em> and <em>error()<\/em> methods.<\/p>\n\n\n\n<p>The <code>getLogger()<\/code> method can take two types of arguments, i.e., a <code>class<\/code> type and a <code>String<\/code>. Both methods return a logger named corresponding to the parameter.<\/p>\n\n\n\n<p>Note we are not using any logback specific package or class. This way, we have no direct dependency on logback and can be replaced by other logging libraries with no code changes.<\/p>\n\n\n\n<h3>2.2. Parameterized Messages<\/h3>\n\n\n\n<p>In real-life applications, log messages are not always plain strings. We need to log context data into the files, such as object IDs, custom error messages and codes, etc.<\/p>\n\n\n\n<p>These complex messages are generally created by appending the strings, which involve allocating memory, concatenation operation and finally garbage collection after the message has been printed and objects are not in use.<\/p>\n\n\n\n<p>Sometimes, the above string concatenation operation may not be necessary. For example, if we have the Log level set to INFO then the given debug log will not be printed in the log file, but the string concatenation will happen anyway. <strong>Such string concatenation is overhead and should be avoided<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">logger.info(\"Article fecthed for id : \" + 1 + \" is : \" + a.toString());<\/code><\/pre>\n\n\n\n<p><strong>Logback removes the unwanted concatenation with parameterized messages.<\/strong> These messages use the curly braces <code>{}<\/code> as placeholders for the objects to be printed in messages.<\/p>\n\n\n\n<p>Once Logback determines that log message needs to be printed, it builds the log message by concatenating the original message and replacing the curly braces with the output of the <code>object.toString()<\/code> methods.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">logger.info(\"Article fecthed for id : {} is : {}\", 1, article);<\/code><\/pre>\n\n\n\n<p>We can use the parameterized messages to print any type of object or information, including the exception stack traces.<\/p>\n\n\n\n<h2>3. Logback Configuration<\/h2>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default info\"><p>Existing <em>log4j<\/em> users can convert their <a href=\"https:\/\/howtodoinjava.com\/log4j2\/log4j2-properties-example\/\">log4j.properties<\/a> files to logback.xml using our <a href=\"http:\/\/logback.qos.ch\/translator\/\" target=\"_blank\" rel=\"noreferrer noopener\">PropertiesTranslator<\/a> web-application.<\/p><\/blockquote>\n\n\n\n<h3>3.1. Zero Configuration Defaults<\/h3>\n\n\n\n<p>By default, when no default configuration file is found, logback will add a <code>ConsoleAppender<\/code> to the root logger and this will log all the messages in the Console.<\/p>\n\n\n\n<p>The output is formatted using a <a href=\"https:\/\/logback.qos.ch\/manual\/layouts.html\" target=\"_blank\" rel=\"noreferrer noopener\">PatternLayoutEncoder<\/a> set to the pattern &#8216;<em>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} &#8211; %msg%n<\/em>&#8216;. Also, <strong>by default, the root logger is assigned the <em>DEBUG<\/em> level<\/strong>.<\/p>\n\n\n\n<p>This is the equivalent configuration used by default.<\/p>\n\n\n\n<pre title=\"Equivalent default configuration\" class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;configuration debug=\"true\"&gt;\n  &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n    &lt;encoder&gt;\n      &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;\/pattern&gt;\n    &lt;\/encoder&gt;\n  &lt;\/appender&gt;\n\n  &lt;root level=\"debug\"&gt;\n    &lt;appender-ref ref=\"STDOUT\" \/&gt;\n  &lt;\/root&gt;\n&lt;\/configuration&gt;<\/code><\/pre>\n\n\n\n<h3>3.2. Loading Configuration File<\/h3>\n\n\n\n<p>The default configuration is enough to get started and for POC purposes. But for production-grade applications, we need to configure different file loggers at suitable Log levels.<\/p>\n\n\n\n<p>During startup, logback tries to locate <code>logback-test.xml<\/code> or <code>logback.xml<\/code> in the classpath, in the same order. If the file is found, it configures itself using the provided configuration file.<\/p>\n\n\n\n<p>If no such file is present in classpath, it tries to locate the implementation of <em>com.qos.logback.classic.spi.Configurator<\/em> interface by looking up the file <em>META-INF\\services\\ch.qos.logback.classic.spi.Configurator<\/em> in the classpath for <strong>programmatic configuration<\/strong>.<\/p>\n\n\n\n<p>If none of the file or <em>Configurator<\/em> implementation is found, it configures itself with default configuration, as discussed previously.<\/p>\n\n\n\n<p>Note that may specify the location of the default configuration file with a <em>system property<\/em> or <em>startup argument<\/em> named &#8220;<code>logback.configurationFile<\/code>&#8220;. The value of this property can be a URL, a resource on the classpath or a path to a file external to the application.<\/p>\n\n\n\n<h3>3.3. Checking Initialization Errors<\/h3>\n\n\n\n<p>If we face any error during the logback initialization, we can set the <code>debug=\"true\"<\/code> in the <code>configuration<\/code> tag. This will print status information to the console as it processes the configuration.<\/p>\n\n\n\n<p>See the status information printed on the console for the given configuration file. We have created appender STDOUT, but in the root logger we have given the name as STDOUT_ONE. Printed logs highlight this configuration issue in the console with message <em>Could not find an appender named [STDOUT1]<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;configuration debug=\"true\"&gt;\n  &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n    ...\n  &lt;\/appender&gt;\n\n  &lt;root level=\"debug\"&gt;\n    &lt;appender-ref ref=\"STDOUT_ONE\" \/&gt;\n  &lt;\/root&gt;\n&lt;\/configuration&gt;<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">18:34:34,556 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]\n18:34:34,556 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback.xml] at [file:\/C:\/devsetup\/gitrepo\/opensource-examples\/target\/classes\/logback.xml]\n18:34:34,675 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]\n18:34:34,679 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]\n18:34:34,686 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property\n18:34:34,708 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to DEBUG\n18:34:34,708 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - Could not find an appender named [STDOUT1]. Did you define it below instead of above in the configuration file?\n18:34:34,708 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - See http:\/\/logback.qos.ch\/codes.html#appender_order for more details.\n18:34:34,708 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.\n18:34:34,710 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@ec756bd - Registering current configuration as safe fallback point\n18:34:34,712 |-WARN in Logger[com.howtodoinjava.demo.slf4j.Main] - No appenders present in context [default] for logger [com.howtodoinjava.demo.slf4j.Main].<\/code><\/pre>\n\n\n\n<h3>3.4. Auto Reload Configuration File upon Modification<\/h3>\n\n\n\n<p>Set <code>scan=\"true\"<\/code> to configuration tag to let logback scan for changes and automatically reconfigure itself when the configuration file changes.<\/p>\n\n\n\n<p>In the background, a <em><code>ReconfigureOnChangeTask<\/code><\/em> runs in a separate thread and checks the config file on a defined interval. If the latest version of the configuration file has XML syntax errors, it will fall back to a previous configuration file free of XML syntax errors.<\/p>\n\n\n\n<p>By default, the configuration file will be scanned for changes once <em>every minute<\/em>. To specify a different scanning period, set the <code>scanPeriod<\/code> attribute.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;configuration scan=\"true\" scanPeriod=\"120 seconds\" &gt; \n  ...\n&lt;\/configuration&gt;  <\/code><\/pre>\n\n\n\n<p>If no unit of time is specified, then the unit of time is assumed to be <em>milliseconds<\/em>.<\/p>\n\n\n\n<h3>3.5. Conditional Configuration<\/h3>\n\n\n\n<p>Instead of defining multiple configuration files for different needs, we can put all configurations in a single file and add conditions around the relevant sections with the help of <code>if<\/code>, <code>then<\/code> and <code>else<\/code> tags.<\/p>\n\n\n\n<p>For example, the given configuration will configure a console appender in the local development environment with debug logging enabled. Otherwise, the root logger will log all error messages in the provided file appended.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">  &lt;if condition='property(\"ENV\").contains(\"localhost\")'&gt;\n    &lt;then&gt;\n      &lt;appender name=\"CON\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n        &lt;encoder&gt;\n          &lt;pattern&gt;%d %-5level %logger{35} - %msg %n&lt;\/pattern&gt;\n        &lt;\/encoder&gt;\n      &lt;\/appender&gt;\n      &lt;root level=\"DEBUG\"&gt;\n        &lt;appender-ref ref=\"CON\" \/&gt;\n      &lt;\/root&gt;\n    &lt;\/then&gt;\n  &lt;\/if&gt;\n\n  &lt;root level=\"ERROR\"&gt;\n     &lt;appender-ref ref=\"FILE\" \/&gt;\n  &lt;\/root&gt;<\/code><\/pre>\n\n\n\n<p>Note that conditional processing requires the <a href=\"https:\/\/janino-compiler.github.io\/janino\/\" target=\"_blank\" rel=\"noreferrer noopener\">Janino library<\/a>.<\/p>\n\n\n\n<h2>4. Configuring Appenders<\/h2>\n\n\n\n<p>Logback delegates the task of writing a logging event to components called appenders. Appenders are responsible for outputting the logging events in a suitable format to the appropriate output device. However, they may delegate the actual formatting of the event to a <em>Layout<\/em> or to an <em>Encoder<\/em> object.<\/p>\n\n\n\n<p>The very basic structure of the logback configuration file can be described as <code>configuration<\/code> element, containing zero or more <code>appender<\/code> elements, followed by zero or more <code>logger<\/code> elements, followed by at most one <code>root<\/code> element.<\/p>\n\n\n\n<p>The configuration file must be a well-formed XML file, and all open tags must be closed properly.<\/p>\n\n\n\n<p>Tag names pertaining to explicit rules are <strong>case insensitive<\/strong>. Few tags related to <a href=\"https:\/\/logback.qos.ch\/manual\/onJoran.html#implicit\" target=\"_blank\" rel=\"noreferrer noopener\">implicit rules<\/a> are case-sensitive, except for the first letter. So if <strong>as a best practice, just follow the <em>camelCase convention<\/em><\/strong> which is almost always the correct convention.<\/p>\n\n\n\n<h3>4.1. ConsoleAppender<\/h3>\n\n\n\n<p>The <a href=\"https:\/\/howtodoinjava.com\/logback\/logback-console-appender\/\">console appender<\/a> appends on the console, or more precisely on <em>System.out<\/em> or <em>System.err<\/em>.<\/p>\n\n\n\n<p>Logback, by default, configures the console appender with <em>DEBUG<\/em> level. We can configure its attributes by defining the appender in <em>logback.xml<\/em> file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n\t&lt;encoder&gt;\n\t\t&lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;\/pattern&gt;\n\t&lt;\/encoder&gt;\n&lt;\/appender&gt;\n\n&lt;root level=\"INFO\"&gt;\n\t&lt;appender-ref ref=\"STDOUT\" \/&gt;\n&lt;\/root&gt;<\/code><\/pre>\n\n\n\n<h3>4.2. RollingFileAppender<\/h3>\n\n\n\n<p>File appender appends log events into a file. If the file already exists, it is either appended to, or truncated depending on the value of the <code>append<\/code> property.<\/p>\n\n\n\n<p>To log into the rolling files (based on time, log file size, or a combination of both), we use <em>RollingFileAppender<\/em>. The <code>RollingPolicy<\/code> is responsible for undertaking the actions required for a rollover, and <code>TriggeringPolicy<\/code> determines if and exactly when rollover occurs.<\/p>\n\n\n\n<p><em>RollingPolicy<\/em> implements the <em>TriggeringPolicy<\/em> interface so if we define only <code>rollingPolicy<\/code> then also configuration will be accepted.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;appender name=\"FILE\"\n\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;\n\t&lt;file&gt;${LOG_ROOT}\/app.log&lt;\/file&gt;\n\t&lt;append&gt;true&lt;\/append&gt;\n\t&lt;immediateFlush&gt;false&lt;\/immediateFlush&gt;\n\t&lt;rollingPolicy\n\t\tclass=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;\n\t\t&lt;!-- Archiving daily --&gt;\n\t\t&lt;fileNamePattern&gt;${LOG_ROOT}\/app-%d{yyyy-MM-dd}.log.gz&lt;\/fileNamePattern&gt;\n\t\t&lt;!-- Archiving 60 days of logs and max 10GB size limit --&gt;\n\t\t&lt;maxHistory&gt;60&lt;\/maxHistory&gt;\n\t\t&lt;totalSizeCap&gt;10GB&lt;\/totalSizeCap&gt;\n\t&lt;\/rollingPolicy&gt;\n\t&lt;encoder&gt;\n\t\t&lt;pattern&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n\n\t\t&lt;\/pattern&gt;\n\t&lt;\/encoder&gt;\n&lt;\/appender&gt;\n\n&lt;root level=\"INFO\"&gt;\n\t&lt;appender-ref ref=\"FILE\" \/&gt;\n&lt;\/root&gt;<\/code><\/pre>\n\n\n\n<p>Logback&#8217;s <em>FileAppender<\/em> and all its sub-classes, including <em>RollingFileAppender<\/em>, <strong>can gracefully recover from I\/O failures<\/strong>. Thus, if a file server fails temporarily, we no longer need to restart the application to get logging working again. As soon as the file server comes back up, the logger will be working again.<\/p>\n\n\n\n<p>Compression, by <em>RollingFileAppender<\/em>, always occurs asynchronously so that even for large log files, the <strong>application is not blocked for the duration of the compression<\/strong>.<\/p>\n\n\n\n<p><strong>By default, each log event is immediately flushed<\/strong> to the underlying output stream. In case of very high logging throughput, we can set the <code>immediateFlush<\/code> property to false.<\/p>\n\n\n\n<h2>5. FAQs<\/h2>\n\n\n\n<h3>5.1. How to print Jar files names in logs<\/h3>\n\n\n\n<p>Once configured, logback can include <strong>packaging data<\/strong> (name and version of the jar file) for each line of the stack trace lines it outputs. It can help debug identifying <em>ClassCastException<\/em> issues due to multiple versions of jars of any library in the classpath.<\/p>\n\n\n\n<p>The packaging data is disabled by default.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;configuration packagingData=\"true\"&gt;\n  ...\n&lt;\/configuration&gt;<\/code><\/pre>\n\n\n\n<h3>5.2. Clean Resources on Shutdown<\/h3>\n\n\n\n<p>In standalone applications, to correctly shutting down logback and releasing associated resources, use the <strong>shutdown hook<\/strong>. The hook will close all appenders attached to loggers defined by the context and stop any active threads in an orderly manner. It will allow up to 30 seconds for any log file compression tasks running in the background to finish.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;configuration debug=\"false\"&gt;\n\t&lt;shutdownHook\/&gt;\n\t.... \n&lt;\/configuration&gt;<\/code><\/pre>\n\n\n\n<p>A shutdown hook will be installed automatically in web applications, making this directive entirely redundant.<\/p>\n\n\n\n<h2>6. Conclusion<\/h2>\n\n\n\n<p>In this Logback tutorial, we learned the default provided configuration, customize the defaults as per requirements and troubleshoot any initialization error. We learned to configure the basic console appender and rolling file appender. We will learn both, in-depth, in future posts.<\/p>\n\n\n\n<p>We also saw the best practices that can help use Logback most effectively.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/opensource-examples\/tree\/main\/src\/main\/resources\" target=\"_blank\" rel=\"noreferrer noopener\">Download Sourcecode<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Logback is intended as a successor to the log4j project and was designed by Ceki G\u00fclc\u00fc. Logback is faster and has a smaller footprint than all existing logging systems. Logback performs about ten times faster than Log4j on specific critical execution paths. The Logger class in logback-classic implements the SLF4J API natively, so we incur &#8230; <a title=\"Logback Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/logback\/logback-tutorial\/\" aria-label=\"More on Logback Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":19178,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1401],"tags":[1392],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/Logback.png",1151,821,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/Logback-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/Logback-300x214.png",300,214,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/Logback-768x548.png",768,548,true],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/Logback-1024x730.png",1024,730,true],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/Logback.png",1151,821,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/Logback.png",1151,821,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/Logback.png",120,86,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Logback is intended as a successor to the log4j project and was designed by Ceki G\u00fclc\u00fc. Logback is faster and has a smaller footprint than all existing logging systems. Logback performs about ten times faster than Log4j on specific critical execution paths. The Logger class in logback-classic implements the SLF4J API natively, so we incur&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19177"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=19177"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19177\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/19178"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=19177"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=19177"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=19177"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}