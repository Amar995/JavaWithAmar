{"id":11973,"date":"2018-10-26T17:20:53","date_gmt":"2018-10-26T11:50:53","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=11973"},"modified":"2020-12-26T00:37:26","modified_gmt":"2020-12-25T19:07:26","slug":"hashtable-class","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/collections\/hashtable-class\/","title":{"rendered":"Java Hashtable class"},"content":{"rendered":"<p><strong>Java Hashtable<\/strong> class is an implementation of hash table data structure. It is very much similar to <a href=\"https:\/\/howtodoinjava.com\/java-hashmap\/\">HashMap<\/a> in Java, with most significant difference that Hashtable is <strong>synchronized<\/strong> while HashMap is not. <\/p>\n<p>In this <strong>Hashtable tutorial<\/strong>, we will learn it&#8217;s internals, <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-constructors\/\">constructors<\/a>, methods, use-cases and other important points.<\/p>\n<pre>Table of Contents\r\n\r\n1. <a href=\"#1\">How Hashtable Works?<\/a>\r\n2. <a href=\"#2\">Hashtable Features<\/a>\r\n3. <a href=\"#3\">Hashtable Constructors<\/a>\r\n4. <a href=\"#4\">Hashtable Methods<\/a>\r\n5. <a href=\"#5\">Hashtable Example<\/a>\r\n6. <a href=\"#6\">Hashtable Performance<\/a>\r\n6. <a href=\"#7\">Hashtable vs HashMap<\/a>\r\n8. <a href=\"#8\">Conclusion<\/a><\/pre>\n<p><a id=\"1\"><\/a><\/p>\n<h2>1. How Hashtable Works?<\/h2>\n<p>Hashtable internally contains buckets in which it stores the key\/value pairs. The Hashtable uses the key&#8217;s <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/\">hashcode<\/a> to determine to which bucket the key\/value pair should map. <\/p>\n<figure id=\"attachment_11974\" aria-describedby=\"caption-attachment-11974\" style=\"width: 441px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif\" alt=\"Java Hashtable\" width=\"451\" height=\"226\" class=\"size-full wp-image-11974\" \/><figcaption id=\"caption-attachment-11974\" class=\"wp-caption-text\">Java Hashtable<\/figcaption><\/figure>\n<p>The function to get bucket location from Key&#8217;s hashcode is called <strong><a href=\"https:\/\/howtodoinjava.com\/java\/java-security\/how-to-generate-secure-password-hash-md5-sha-pbkdf2-bcrypt-examples\/\">hash function<\/a><\/strong>. In theory, a hash function is a function which when given a key, generates an address in the table. A hash function always returns a number for an object. Two equal objects will always have the same number while two unequal objects might not always have different numbers.<\/p>\n<p>When we put objects into a hashtable, it is possible that different objects (by the equals() method) might have the same hashcode. This is called a <strong>collision<\/strong>. To resolve collisions, hashtable uses an <strong><a href=\"https:\/\/howtodoinjava.com\/series\/java-arrays\/\">array<\/a> of lists<\/strong>. The pairs mapped to a single bucket (array index) are stored in a list and list reference is stored in array index.<\/p>\n<figure id=\"attachment_11975\" aria-describedby=\"caption-attachment-11975\" style=\"width: 267px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/Hashtable-collision.png\" alt=\"Hashtable collision\" width=\"277\" height=\"195\" class=\"size-full wp-image-11975\" \/><figcaption id=\"caption-attachment-11975\" class=\"wp-caption-text\">Hashtable collision<\/figcaption><\/figure>\n<h4>1.1. Hashtable Declaration<\/h4>\n<p>The Hashtable class is declared as following in Java. It <strong>extends Dictionary<\/strong> class and <strong>implements Map<\/strong>, <code><a href=\"https:\/\/howtodoinjava.com\/java\/cloning\/a-guide-to-object-cloning-in-java\/\">Cloneable<\/a><\/code> and <code><a href=\"https:\/\/howtodoinjava.com\/java\/serialization\/java-serialization\/\">Serializable<\/a><\/code> interfaces. Here <code>'K'<\/code> is the type of keys and <code>'V'<\/code> is the type of mapped values to keys.<\/p>\n<pre class=\"brush: java; title: Hashtable.java; notranslate\" title=\"Hashtable.java\">\r\npublic class Hashtable&lt;K,V&gt;\r\n    extends Dictionary&lt;K,V&gt;\r\n    implements Map&lt;K,V&gt;, Cloneable, java.io.Serializable \r\n{\r\n\t\/\/implementation\r\n}\r\n<\/pre>\n<p><a id=\"2\"><\/a><\/p>\n<h2>2. Hashtable Features<\/h2>\n<p>The important things to learn about Java Hashtable class are:<\/p>\n<ol>\n<li>It is similar to HashMap, but it is synchronized while HashMap is not <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/what-is-thread-safety\/\">synchronized<\/a>.<\/li>\n<li>It does not accept <code>null<\/code> key or value.<\/li>\n<li>It does not accept duplicate keys.<\/li>\n<li>It stores key-value pairs in hash table data structure which internally maintains an array of list. Each list may be referred as a bucket. In case of collisions, pairs are stored in this list.<\/li>\n<li>Enumerator in Hashtable is not fail-fast.<\/li>\n<\/ol>\n<p><a id=\"3\"><\/a><\/p>\n<h2>3. Hashtable Constructors<\/h2>\n<p>Hashtable class has four constructors.<\/p>\n<ul>\n<li><strong>Hashtable():<\/strong> It is the default constructor. It constructs a new, empty hashtable with a default initial capacity (11) and load factor (0.75).<\/li>\n<li><strong>Hashtable(int size):<\/strong> It constructs a new, empty hashtable of specified initial size.<\/li>\n<li><strong>Hashtable(int size, float fillRatio):<\/strong> It constructs a new, empty hashtable of specified initial size and fill ratio.<\/li>\n<li><strong>Hashtable(Map m):<\/strong> It constructs a hashtable that is initialized with the key-value pairs in specified map.<\/li>\n<\/ul>\n<p>Please note that <strong>initial capacity<\/strong> refers to number of buckets in hashtable. An optimal number of buckets is required to store key-value pairs with minimum collisions (to improve performance) and efficient memory utilization.<\/p>\n<p>The <strong>fill ratio<\/strong> determines how full hashtable can be before it&#8217;s capacity is increased. It&#8217;s Value lie between 0.0 to 1.0.<\/p>\n<p><a id=\"4\"><\/a><\/p>\n<h2>4. Hashtable Methods<\/h2>\n<p>The methods in Hashtable class are very similar to HashMap. Take a look.<\/p>\n<ul>\n<li><strong>void clear()<\/strong> : It is used to remove all pairs in the hashtable.<\/li>\n<li><strong>boolean contains(Object value)<\/strong> : It returns <code>true<\/code> if specified value exist within the hash table for any pair, else return <code>false<\/code>. Note that this method is identical in functionality to <code>containsValue()<\/code> function.<\/li>\n<li><strong>boolean containsValue(Object value)<\/strong> : It returns <code>true<\/code> if specified value exist within the hash table for any pair, else return <code>false<\/code>.<\/li>\n<li><strong>boolean containsKey(Object key)<\/strong> : It returns <code>true<\/code> if specified key exist within the hash table for any pair, else return <code>false<\/code>.<\/li>\n<li><strong>boolean isEmpty()<\/strong> : It returns <code>true<\/code> if the hashtable is empty; returns <code>false<\/code> if it contains at least one key.<\/li>\n<li><strong>void rehash()<\/strong> : It is used to increase the size of the hash table and rehashes all of its keys.<\/li>\n<li><strong>Object get(Object key)<\/strong> : It returns the value to which the specified key is mapped. Returns null if no such key is found.<\/li>\n<li><strong>Object put(Object key, Object value)<\/strong> : It maps the specified <code>key<\/code> to the specified <code>value<\/code> in this hashtable. Neither the key nor the value can be <code>null<\/code>.<\/li>\n<li><strong>Object remove(Object key)<\/strong> : It removes the key (and its corresponding value) from hashtable.<\/li>\n<li><strong>int size()<\/strong> : It returns the number of entries in the hash table.<\/li>\n<\/ul>\n<p><a id=\"5\"><\/a><\/p>\n<h2>5. Hashtable Example<\/h2>\n<p>Let&#8217;s see a example for how to use Hashtable in java programs.<\/p>\n<pre class=\"brush: java; title: Hashtable Example; notranslate\" title=\"Hashtable Example\">\r\nimport java.util.Hashtable;\r\nimport java.util.Iterator;\r\n\r\npublic class HashtableExample \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        \/\/1. Create Hashtable\r\n        Hashtable&lt;Integer, String&gt; hashtable = new Hashtable&lt;&gt;();\r\n        \r\n        \/\/2. Add mappings to hashtable \r\n        hashtable.put(1,  &quot;A&quot;);\r\n        hashtable.put(2,  &quot;B&quot; );\r\n        hashtable.put(3,  &quot;C&quot;);\r\n        \r\n        System.out.println(hashtable);\r\n        \r\n        \/\/3. Get a mapping by key\r\n        String value = hashtable.get(1);        \/\/A\r\n        System.out.println(value);\r\n        \r\n        \/\/4. Remove a mapping\r\n        hashtable.remove(3);            \/\/3 is deleted\r\n        \r\n        \/\/5. Iterate over mappings\r\n        Iterator&lt;Integer&gt; itr = hashtable.keySet().iterator();\r\n        \r\n        while(itr.hasNext()) \r\n        {\r\n            Integer key = itr.next();\r\n            String mappedValue = hashtable.get(key);\r\n            \r\n            System.out.println(&quot;Key: &quot; + key + &quot;, Value: &quot; + mappedValue);\r\n        }\r\n    }\r\n}\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n{3=C, 2=B, 1=A}\r\nA\r\nKey: 2, Value: B\r\nKey: 1, Value: A\r\n<\/pre>\n<p><a id=\"6\"><\/a><\/p>\n<h2>6. Hashtable Performance<\/h2>\n<p>Performance wise HashMap performs in O(log(n)) in comparion to O(n) in Hashtable for most common operations such as get(), put(), contains() etc.<\/p>\n<p>The naive approach to thread-safety in Hashtable (&#8220;synchronizing every method&#8221;) makes it very much worse for threaded applications. We are better off externally synchronizing a HashMap. A well thought design will perform much better than Hashtable. <\/p>\n<p>Hashtable is obsolete. Best is to use <strong><a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/best-practices-for-using-concurrenthashmap\/\">ConcurrentHashMap<\/a><\/strong> class which provide much higher degree of concurrency.<\/p>\n<p><a id=\"7\"><\/a><\/p>\n<h2>7. Hashtable vs HashMap<\/h2>\n<p>Let&#8217;s quickly list down the <strong>differences between a hashmap and hashtable in Java<\/strong>.<\/p>\n<ol>\n<li>HashMap is non synchronized. Hashtable is synchronized.<\/li>\n<li>HashMap allows one null key and multiple null values. Hashtable doesn&#8217;t allow any null key or value.<\/li>\n<li>HashMap is fast. Hashtable is slow due to added synchronization.<\/li>\n<li>HashMap is traversed by Iterator. Hashtable is traversed by Enumerator and Iterator.<\/li>\n<li>Iterator in HashMap is fail-fast. Enumerator in Hashtable is not fail-fast.<\/li>\n<li>HashMap inherits AbstractMap class. Hashtable inherits Dictionary class.<\/li>\n<\/ol>\n<p><a id=\"8\"><\/a><\/p>\n<h2>8. Conclusion<\/h2>\n<p>In this tutorial, we learned about Java Hashtable class, it&#8217;s constructors, methods, real life usecases and compared their performances. We also learned how a hastable is different from hashmap in Java.<\/p>\n<p>Do not use Hashtable in your new applications. Use HashMap if you do not need councurrency. In concurrent environment, prefer to use ConcurrentHashMap.<\/p>\n<p>Drop me your questions in comments.<\/p>\n<p>Happy Learning !!<\/p>\n<p>Reference:<\/p>\n<p><a href=\"https:\/\/docs.oracle.com\/javase\/10\/docs\/api\/java\/util\/Hashtable.html\">Hashtable Java Docs<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java Hashtable class is an implementation of hash table data structure. It is very much similar to HashMap but it is synchronized while HashMap is not.<\/p>\n","protected":false},"author":2,"featured_media":11974,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[785],"tags":[28,233],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif",451,226,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif",150,75,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif",300,150,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif",451,226,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif",451,226,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif",451,226,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif",451,226,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/10\/hashtable.gif",120,60,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":6,"uagb_excerpt":"Java Hashtable class is an implementation of hash table data structure. It is very much similar to HashMap but it is synchronized while HashMap is not.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/11973"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=11973"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/11973\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11974"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=11973"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=11973"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=11973"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}