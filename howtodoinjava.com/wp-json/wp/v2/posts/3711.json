{"id":3711,"date":"2014-04-13T16:30:27","date_gmt":"2014-04-13T11:00:27","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=3711"},"modified":"2022-04-18T00:06:33","modified_gmt":"2022-04-17T18:36:33","slug":"java-streams-by-examples","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/stream\/java-streams-by-examples\/","title":{"rendered":"Java Streams API"},"content":{"rendered":"\n<p>A <em>Stream in Java<\/em> can be defined as a <strong>sequence of elements from a source<\/strong>. The source of elements here refers to a <a href=\"https:\/\/howtodoinjava.com\/java-collections\/\">Collection<\/a> or <a href=\"https:\/\/howtodoinjava.com\/series\/java-arrays\/\">Array<\/a> that provides data to the Stream.<\/p>\n\n\n\n<ul><li>Java streams are designed in such a way that most of the stream operations (called <strong>intermediate operations<\/strong>) return a Stream. This helps to create a chain of stream operations. This is called <strong>stream pipe-lining<\/strong>.<\/li><li>Java streams also support the <strong>aggregate or terminal operations<\/strong> on the elements. The aggregate operations are operations that allow us to express common manipulations on stream elements quickly and clearly, for example, finding the max or min element, finding the first element matching giving criteria, and so on.<\/li><li>Not that a <strong><em>stream maintains the same ordering<\/em> of the elements <em>as the ordering in the stream source<\/em><\/strong>.<\/li><\/ul>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-2d5522de \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-what-is-a-stream-stream-vs-collection\">1. What is a Stream? Stream vs Collection?<\/a><li class=\"uagb-toc__list\"><a href=\"#2-creating-streams\">2. Creating Streams<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-streamof\">2.1. Stream.of()<\/a><li class=\"uagb-toc__list\"><a href=\"#22-streamofarray\">2.2. Stream.of(array)<\/a><li class=\"uagb-toc__list\"><a href=\"#23-liststream\">2.3. List.stream()<\/a><li class=\"uagb-toc__list\"><a href=\"#24-streamgenerate-or-streamiterate\">2.4. Stream.generate() or Stream.iterate()<\/a><li class=\"uagb-toc__list\"><a href=\"#25-stream-of-string-chars-or-tokens\">2.5. Stream of String chars or tokens<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-stream-collectors\">3. Stream Collectors<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-collect-stream-elements-to-a-list\">3.1. Collect Stream elements to a List<\/a><li class=\"uagb-toc__list\"><a href=\"#32-collect-stream-elements-to-an-array\">3.2. Collect Stream elements to an Array<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#4-stream-operations\">4. Stream Operations<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-intermediate-operations\">4.1. Intermediate Operations<\/a><li class=\"uagb-toc__list\"><a href=\"#42-terminal-operations\">4.2. Terminal operations<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#5-short-circuit-operations\">5. Short-circuit Operations<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#51-streamanymatch\">5.1. Stream.anyMatch()<\/a><li class=\"uagb-toc__list\"><a href=\"#52-streamfindfirst\">5.2. Stream.findFirst()<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#6-parallel-streams\">6. Parallel Streams<\/a><li class=\"uagb-toc__list\"><a href=\"#7-working-with-streams\">7. Working with Streams<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#71-creating-streams\">7.1 Creating Streams<\/a><li class=\"uagb-toc__list\"><a href=\"#72-intermediate-operations\">7.2 Intermediate Operations<\/a><li class=\"uagb-toc__list\"><a href=\"#73-terminal-operations\">7.3. Terminal Operations<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"1-what-is-a-stream-stream-vs-collection\">1. What is a Stream? Stream vs Collection?<\/h2>\n\n\n\n<p>All of us have watched online videos on Youtube. When we start watching a video, a small portion of the video file is first loaded into our computer and starts playing. we don&#8217;t need to download the complete video before we start watching it. This is called video streaming.<\/p>\n\n\n\n<p>At a very high level, we can think of the small portions of the video file as a stream and the whole video as a Collection.<\/p>\n\n\n\n<p>At the granular level, the difference between a Collection and a Stream is to do with when the things are computed. A <strong>Collection is an in-memory data structure, which holds all the values<\/strong> that the data structure currently has. <\/p>\n\n\n\n<p>Every element in the Collection has to be computed before it can be added to the Collection. While a <strong>Stream is conceptually a pipeline, in which elements are computed on demand<\/strong>.<\/p>\n\n\n\n<p>This concept gives rise to significant programming benefits. The idea is that a user will extract only the values they require from a Stream, and these elements are produced, invisibly to the user, as and when required. This is a form of a <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/producer-consumer-problem-using-blockingqueue\/\">producer-consumer<\/a> relationship.<\/p>\n\n\n\n<p>In Java, <code>java.util.Stream<\/code> interface represents a stream on which one or more operations can be performed. <strong>Stream operations are either intermediate or terminal<\/strong>.<\/p>\n\n\n\n<p>The <strong>terminal operations<\/strong> return a result of a certain type and <strong>intermediate operations<\/strong> return the stream itself so we can chain multiple methods in a row to perform the operation in multiple steps.<\/p>\n\n\n\n<p>Streams are created on a source, e.g. a <code>java.util.Collection<\/code> like <code>List<\/code> or <code>Set<\/code>. The <code>Map<\/code> is not supported directly, we can create stream of map keys, values or entries.<\/p>\n\n\n\n<p>Stream operations can either be executed sequentially or parallel. when performed parallelly, it is called a <em>parallel stream<\/em>.<\/p>\n\n\n\n<p>Based on the above points, <strong>a stream is<\/strong> :<\/p>\n\n\n\n<ul><li>Not a data structure<\/li><li>Designed for <a href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\">lambdas<\/a><\/li><li>Do not support indexed access<\/li><li>Can easily be aggregated as arrays or lists<\/li><li>Lazy access supported<\/li><li>Parallelizable<a name=\"ways_to_build_streams\"><\/a><\/li><\/ul>\n\n\n\n<h2 id=\"2-creating-streams\">2. Creating Streams<\/h2>\n\n\n\n<p>The given below ways are the most popular different ways to build streams from collections.<\/p>\n\n\n\n<h3 id=\"2-1-stream-of\">2.1. Stream.of()<\/h3>\n\n\n\n<p>In the given example, we are creating a stream of a fixed number of integers.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Stream&lt;Integer&gt; stream = Stream.of(1,2,3,4,5,6,7,8,9);\nstream.forEach(p -&gt; System.out.println(p));<\/code><\/pre>\n\n\n\n<h3 id=\"2-2-stream-of-array\">2.2. Stream.of(array)<\/h3>\n\n\n\n<p>In the given example, we are creating a stream from the array. The elements in the stream are taken from the array.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Stream&lt;Integer&gt; stream = Stream.of( new Integer[]{1,2,3,4,5,6,7,8,9} );\nstream.forEach(p -&gt; System.out.println(p));<\/code><\/pre>\n\n\n\n<h3 id=\"2-3-list-stream\">2.3. List.stream()<\/h3>\n\n\n\n<p>In the given example, we are creating a stream from the <a href=\"https:\/\/howtodoinjava.com\/java-arraylist\/\">List<\/a>. The elements in the stream are taken from the List.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n\nfor(int i = 1; i&lt; 10; i++){\n      list.add(i);\n}\n\nStream&lt;Integer&gt; stream = list.stream();\nstream.forEach(p -&gt; System.out.println(p));<\/code><\/pre>\n\n\n\n<h3 id=\"2-4-stream-generate-or-stream-iterate\">2.4. Stream.generate() or Stream.iterate()<\/h3>\n\n\n\n<p>In the given example, we are creating a stream from generated elements. This will produce a stream of 20 random numbers. We have restricted the elements count using <code>limit()<\/code> function.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Stream&lt;Integer&gt; randomNumbers = Stream\n      .generate(() -&gt; (new Random()).nextInt(100));\n\nrandomNumbers.limit(20).forEach(System.out::println);<\/code><\/pre>\n\n\n\n<h3 id=\"2-5-stream-of-string-chars-or-tokens\">2.5. Stream of String chars or tokens<\/h3>\n\n\n\n<p>In the given example, first, we are creating a stream from the characters of a given string. In the second part, we are creating the stream of tokens received from splitting from a string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">IntStream stream = \"12345_abcdefg\".chars();\nstream.forEach(p -&gt; System.out.println(p));\n\n\/\/OR\n\nStream&lt;String&gt; stream = Stream.of(\"A$B$C\".split(\"\\\\$\"));\nstream.forEach(p -&gt; System.out.println(p));<\/code><\/pre>\n\n\n\n<p>There are some more ways also such as using <strong>Stream.Buider<\/strong> or using intermediate operations. We will learn about them in separate posts from time to time.<a name=\"covert_streams_to_collection\"><\/a><\/p>\n\n\n\n<h2 id=\"3-stream-collectors\">3. Stream Collectors<\/h2>\n\n\n\n<p>After performing the intermediate operations on elements in the stream, we can collect the processed elements again into a Collection using the stream <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/stream\/Collectors.html\" target=\"_blank\" rel=\"noopener noreferrer\">Collector<\/a> methods.<\/p>\n\n\n\n<h3 id=\"3-1-collect-stream-elements-to-a-list\">3.1. Collect Stream elements to a List<\/h3>\n\n\n\n<p>In the given example, first, we are creating a stream on integers 1 to 10. Then we are processing the stream elements to find all even numbers.<\/p>\n\n\n\n<p>At last, we are collecting all even numbers into a <code>List<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n \nfor(int i = 1; i&lt; 10; i++){\n      list.add(i);\n}\n\nStream&lt;Integer&gt; stream = list.stream();\nList&lt;Integer&gt; evenNumbersList = stream.filter(i -&gt; i%2 == 0)\n                                    .collect(Collectors.toList());\nSystem.out.print(evenNumbersList);<\/code><\/pre>\n\n\n\n<h3 id=\"3-2-collect-stream-elements-to-an-array\">3.2. Collect Stream elements to an Array<\/h3>\n\n\n\n<p>The given example is similar to the first example shown above. The only difference is that we are collecting the even numbers in an Array.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n \nfor(int i = 1; i&lt; 10; i++){\n      list.add(i);\n}\n\nStream&lt;Integer&gt; stream = list.stream();\nInteger[] evenNumbersArr = stream.filter(i -&gt; i%2 == 0).toArray(Integer[]::new);\nSystem.out.print(evenNumbersArr);<\/code><\/pre>\n\n\n\n<p>There are plenty of other ways also to collect stream into a <code>Set<\/code>, <code>Map<\/code> or into multiple ways. Just go through <code>Collectors<\/code> class and try to keep them in mind.<a name=\"core_stream_operations\"><\/a><\/p>\n\n\n\n<h2 id=\"4-stream-operations\">4. Stream Operations<\/h2>\n\n\n\n<p>Stream abstraction has a long list of useful functions. Let us look at a few of them.<\/p>\n\n\n\n<p>Before moving ahead, let us build a <code>List<\/code> of strings beforehand. We will build our examples on this list so that it is easy to relate and understand.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;String&gt; memberNames = new ArrayList&lt;&gt;();\nmemberNames.add(\"Amitabh\");\nmemberNames.add(\"Shekhar\");\nmemberNames.add(\"Aman\");\nmemberNames.add(\"Rahul\");\nmemberNames.add(\"Shahrukh\");\nmemberNames.add(\"Salman\");\nmemberNames.add(\"Yana\");\nmemberNames.add(\"Lokesh\");<\/code><\/pre>\n\n\n\n<p>These core methods have been divided into 2 parts given below:<a name=\"intermediate_stream_operations\"><\/a><\/p>\n\n\n\n<h3 id=\"4-1-intermediate-operations\">4.1. Intermediate Operations<\/h3>\n\n\n\n<p>Intermediate operations return the stream itself so you can chain multiple methods calls in a row. Let&#8217;s learn important ones.<\/p>\n\n\n\n<h4 id=\"4-1-1-stream-filter\">4.1.1. Stream.filter()<\/h4>\n\n\n\n<p>The <code>filter()<\/code> method accepts a <a href=\"https:\/\/howtodoinjava.com\/java8\/how-to-use-predicate-in-java-8\/\" target=\"_blank\" rel=\"noopener noreferrer\">Predicate<\/a> to filter all elements of the stream. This operation is intermediate which enables us to call another stream operation (e.g. <a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-foreach\/\" target=\"_blank\" rel=\"noopener noreferrer\">forEach()<\/a>) on the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">memberNames.stream().filter((s) -&gt; s.startsWith(\"A\"))\n                    .forEach(System.out::println);<\/code><\/pre>\n\n\n\n<p>Program Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">Amitabh\nAman<\/code><\/pre>\n\n\n\n<h4 id=\"4-1-2-stream-map\">4.1.2. Stream.map()<\/h4>\n\n\n\n<p>The <code>map()<\/code> intermediate operation converts each element in the stream into another object via the given function.<\/p>\n\n\n\n<p>The following example converts each string into an UPPERCASE string. But we can use <code>map()<\/code> to transform an object into another type as well.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">memberNames.stream().filter((s) -&gt; s.startsWith(\"A\"))\n                  .map(String::toUpperCase)\n                  .forEach(System.out::println);<\/code><\/pre>\n\n\n\n<p>Program Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">AMITABH\nAMAN<\/code><\/pre>\n\n\n\n<h4 id=\"4-1-2-stream-sorted\">4.1.2. Stream.sorted()<\/h4>\n\n\n\n<p>The <code>sorted()<\/code> method is an intermediate operation that returns a sorted view of the stream. The elements in the stream are sorted in natural order unless we pass a custom <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-comparator\/\" target=\"_blank\" rel=\"noopener noreferrer\">Comparator<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">memberNames.stream().sorted()\n                    .map(String::toUpperCase)\n                    .forEach(System.out::println);<\/code><\/pre>\n\n\n\n<p>Program Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">AMAN\nAMITABH\nLOKESH\nRAHUL\nSALMAN\nSHAHRUKH\nSHEKHAR\nYANA<\/code><\/pre>\n\n\n\n<p>Please note that the <code>sorted()<\/code> method only creates a sorted view of the stream without manipulating the ordering of the source Collection. In this example, the ordering of string in the <code>memberNames<\/code> is untouched.<a name=\"terminal_stream_operations\"><\/a><\/p>\n\n\n\n<h3 id=\"4-2-terminal-operations\">4.2. Terminal operations<\/h3>\n\n\n\n<p>Terminal operations return a result of a certain type after processing all the stream elements.<\/p>\n\n\n\n<p>Once the terminal operation is invoked on a Stream, the iteration of the Stream and any of the chained streams will get started. Once the iteration is done, the result of the terminal operation is returned.<\/p>\n\n\n\n<h4 id=\"4-2-1-stream-foreach\">4.2.1. Stream.forEach()<\/h4>\n\n\n\n<p>The <code>forEach()<\/code> method helps in iterating over all elements of a stream and perform some operation on each of them. The operation to be performed is passed as the lambda expression.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">memberNames.forEach(System.out::println);<\/code><\/pre>\n\n\n\n<h4 id=\"4-2-2-stream-collect\">4.2.2. Stream.collect()<\/h4>\n\n\n\n<p>The <code>collect()<\/code> method is used to receive elements from a steam and store them in a collection.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;String&gt; memNamesInUppercase = memberNames.stream().sorted()\n                            .map(String::toUpperCase)\n                            .collect(Collectors.toList());\n\nSystem.out.print(memNamesInUppercase);<\/code><\/pre>\n\n\n\n<p>Program Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">[AMAN, AMITABH, LOKESH, RAHUL, SALMAN, SHAHRUKH, SHEKHAR, YANA]<\/code><\/pre>\n\n\n\n<h4 id=\"4-2-3-stream-match\">4.2.3. Stream.match()<\/h4>\n\n\n\n<p>Various matching operations can be used to check whether a given predicate matches the stream elements. All of these matching operations are terminal and return a <code>boolean<\/code> result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">boolean matchedResult = memberNames.stream()\n        .anyMatch((s) -&gt; s.startsWith(\"A\"));\n \nSystem.out.println(matchedResult);     \/\/true\n \nmatchedResult = memberNames.stream()\n        .allMatch((s) -&gt; s.startsWith(\"A\"));\n \nSystem.out.println(matchedResult);     \/\/false\n \nmatchedResult = memberNames.stream()\n        .noneMatch((s) -&gt; s.startsWith(\"A\"));\n \nSystem.out.println(matchedResult);     \/\/false<\/code><\/pre>\n\n\n\n<h4 id=\"4-2-4-stream-count\">4.2.4. Stream.count()<\/h4>\n\n\n\n<p>The <code>count()<\/code> is a terminal operation returning the number of elements in the stream as a <code>long<\/code> value.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">long totalMatched = memberNames.stream()\n    .filter((s) -&gt; s.startsWith(\"A\"))\n    .count();\n \nSystem.out.println(totalMatched);     \/\/2<\/code><\/pre>\n\n\n\n<h4 id=\"4-2-5-stream-reduce\">4.2.5. Stream.reduce()<\/h4>\n\n\n\n<p>The <code>reduce()<\/code> method performs a reduction on the elements of the stream with the given function. The result is an <code><a href=\"http:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/\">Optional<\/a><\/code> holding the reduced value.<\/p>\n\n\n\n<p>In the given example, we are reducing all the strings by concatenating them using a separator <code>#<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Optional&lt;String&gt; reduced = memberNames.stream()\n        .reduce((s1,s2) -&gt; s1 + \"#\" + s2);\n \nreduced.ifPresent(System.out::println);<\/code><\/pre>\n\n\n\n<p>Program Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">Amitabh#Shekhar#Aman#Rahul#Shahrukh#Salman#Yana#Lokesh<\/code><\/pre>\n\n\n\n<h2 id=\"5-short-circuit-operations\">5. Short-circuit Operations<\/h2>\n\n\n\n<p>Though stream operations are performed on all elements inside a collection satisfying a Predicate, it is often desired to break the operation whenever a matching element is encountered during iteration.<\/p>\n\n\n\n<p>In external iteration, we will do with the <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/if-else-statement-in-java\/\">if-else block<\/a>. In the internal iterations such as in streams, there are certain methods we can use for this purpose.<\/p>\n\n\n\n<h3 id=\"5-1-stream-anymatch\">5.1. Stream.anyMatch()<\/h3>\n\n\n\n<p>The <code>anyMatch()<\/code> will return <code>true<\/code> once a condition passed as predicate satisfies. Once a matching value is found, no more elements will be processed in the stream.<\/p>\n\n\n\n<p>In the given example, as soon as a String is found starting with the letter <code>'A'<\/code>, the stream will end and the result will be returned.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">boolean matched = memberNames.stream()\n        .anyMatch((s) -&gt; s.startsWith(\"A\"));\n \nSystem.out.println(matched);    \/\/true<\/code><\/pre>\n\n\n\n<h3 id=\"5-2-stream-findfirst\">5.2. Stream.findFirst()<\/h3>\n\n\n\n<p>The <code>findFirst()<\/code> method will return the first element from the stream and then it will not process any more elements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String firstMatchedName = memberNames.stream()\n            .filter((s) -&gt; s.startsWith(\"L\"))\n            .findFirst()\n                        .get();\n \nSystem.out.println(firstMatchedName);    \/\/Lokesh<\/code><\/pre>\n\n\n\n<h2 id=\"6-parallel-streams\">6. Parallel Streams<\/h2>\n\n\n\n<p>With the <a href=\"https:\/\/howtodoinjava.com\/java7\/forkjoin-framework-tutorial-forkjoinpool-example\/\">Fork\/Join framework<\/a> added in Java SE 7, we have efficient machinery for implementing parallel operations in our applications.<\/p>\n\n\n\n<p>But implementing a fork\/join framework is itself a complex task, and if not done right; it is a source of complex multi-threading bugs having the potential to crash the application. With the introduction of <a href=\"https:\/\/howtodoinjava.com\/java8\/internal-vs-external-iteration\/\">internal iterations<\/a>, we got the possibility of operations to be done in parallel more efficiently.<\/p>\n\n\n\n<p>To enable parallelism, all we have to do is to create a parallel stream, instead of a sequential stream. And to surprise, this is really very easy.<\/p>\n\n\n\n<p>In any of the above-listed stream examples, anytime we want to do a particular job using multiple threads in parallel cores, all we have to call <strong>parallelStream()<\/strong> method instead of <code>stream()<\/code> method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\nfor(int i = 1; i&lt; 10; i++){\n list.add(i);\n}\n\n\/\/Here creating a parallel stream\nStream&lt;Integer&gt; stream = list.parallelStream();  \n\nInteger[] evenNumbersArr = stream.filter(i -&gt; i%2 == 0).toArray(Integer[]::new);\nSystem.out.print(evenNumbersArr);<\/code><\/pre>\n\n\n\n<p>A key driver for Stream APIs is making parallelism more accessible to developers. While the Java platform provides strong support for <a href=\"https:\/\/howtodoinjava.com\/java-concurrency-tutorial\/\">concurrency<\/a> and <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/concurrency-vs-parallelism\/\">parallelism<\/a> already, developers face unnecessary impediments in migrating their code from sequential to parallel as needed.<\/p>\n\n\n\n<p>Therefore, it is important to encourage idioms that are both sequential- and parallel-friendly. This is facilitated by shifting the focus towards describing what computation should be performed, rather than how it should be performed.<\/p>\n\n\n\n<p>It is also important to strike the balance between making parallelism easier but not going so far as to make it invisible. Making parallelism transparent would introduce non-determinism and the possibility of data races where users might not expect it.<\/p>\n\n\n\n<h2 id=\"7-stream-operations\">7. Working with Streams<\/h2>\n\n\n\n<h3 id=\"7-1-creating-streams\">7.1 Creating Streams<\/h3>\n\n\n\n<ul><li>concat()<\/li><li>empty()<\/li><li>generate()<\/li><li>iterate()<\/li><li>of()<\/li><\/ul>\n\n\n\n<h3 id=\"7-2-intermediate-operations\">7.2 Intermediate Operations<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-filter-example\/\">filter()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-map-example\/\">map()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-flatmap-example\/\">flatMap()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-distinct-examples\/\">distinct()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-sorted-method\/\">sorted()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-peek-example\/\">peek()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-limit-method-example\/\">limit()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-skip-example\/\">skip()<\/a><\/li><\/ul>\n\n\n\n<h3 id=\"7-3-terminal-operations\">7.3. Terminal Operations<\/h3>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-foreach\/\">forEach()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-foreachordered\/\">forEachOrdered()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/convert-stream-to-array\/\">toArray()<\/a><\/li><li>reduce()<\/li><li>collect()<\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-min\/\">min()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/java-stream-max\/\">max()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-count-elements-example\/\">count()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-anymatch-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">anyMatch()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-allmatch-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">allMatch()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-nonematch-example\/\" target=\"_blank\" rel=\"noopener noreferrer\">noneMatch()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-findfirst-findany\/\">findFirst()<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-findfirst-findany\/\">findAny()<\/a><\/li><\/ul>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Core-Java\/tree\/master\/src\/main\/java\/com\/howtodoinjava\/core\/streams\" target=\"_blank\" rel=\"noreferrer noopener\">Sourcecode on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Java Streams can be defined as a sequence of elements from a source that supports aggregate operations on them. The source refers to a collection or array.<\/p>\n","protected":false},"author":2,"featured_media":3712,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1535],"tags":[1409,1512,576],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/java_8_lambdas.jpg",230,229,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/java_8_lambdas-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/java_8_lambdas.jpg",230,229,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/java_8_lambdas.jpg",230,229,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/java_8_lambdas.jpg",230,229,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/java_8_lambdas.jpg",230,229,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/java_8_lambdas.jpg",230,229,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/java_8_lambdas.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":18,"uagb_excerpt":"Java Streams can be defined as a sequence of elements from a source that supports aggregate operations on them. The source refers to a collection or array.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3711"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=3711"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3711\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/3712"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=3711"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=3711"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=3711"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}