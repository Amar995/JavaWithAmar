{"id":12106,"date":"2018-11-12T15:55:58","date_gmt":"2018-11-12T10:25:58","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=12106"},"modified":"2022-01-30T00:13:03","modified_gmt":"2022-01-29T18:43:03","slug":"java-instanceof","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/java-instanceof\/","title":{"rendered":"Java Instanceof Operator"},"content":{"rendered":"<p><strong>Java instanceof<\/strong> operator (also called type comparison <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/operators-in-java\/\">operator<\/a>) is used to test whether the object is an instance of the specified type (class or subclass or interface).<\/p>\n<p>It returns &#8211;<\/p>\n<ul>\n<li><strong>true<\/strong> &#8211; if variable is instance of specified class, it&#8217;s parent class or implement specified interface or it&#8217;s parent interface<\/li>\n<li><strong>false<\/strong> &#8211; if variable is not instance of the class or implement the interface; or variable is null<\/li>\n<\/ul>\n<h2>1. Java instanceof syntax<\/h2>\n<p><code>instanceof<\/code> operator tests variable to specified type. Variable is written on left hand side of operator, and type is given on right side of operator.<\/p>\n<pre class=\"brush: java; title: instanceof Syntax; notranslate\" title=\"instanceof Syntax\">\n\/\/&amp;amp;lt;object-reference&amp;amp;gt; instanceof TypeName\n\nboolean value = var instanceof ClassType;\n\n\/\/or\n\nif(var instanceof ClassType) {\n\/\/perform some action\n}\n<\/pre>\n<h2>2. Java instanceof example<\/h2>\n<p>Let&#8217;s see an example to fully understand the usage of instanceof operator to compare types. In this example, we are using <a href=\"https:\/\/howtodoinjava.com\/java-arraylist\/\">ArrayList<\/a> class to test it&#8217;s type information.<\/p>\n<pre class=\"brush: java; title: instanceof example; notranslate\" title=\"instanceof example\">\nimport java.util.AbstractList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Main\n{\npublic static void main(String[] args)\n{\nArrayList&amp;amp;lt;String&amp;amp;gt; arrayList = new ArrayList&amp;amp;lt;&amp;amp;gt;();\n\nSystem.out.println(arrayList instanceof ArrayList);\t\t\/\/true\n\nSystem.out.println(arrayList instanceof AbstractList);\t\/\/true\n\nSystem.out.println(arrayList instanceof List);\t\t\t\/\/true\n\nSystem.out.println(arrayList instanceof Collection);\t\/\/true\n\nSystem.out.println(null instanceof ArrayList);\t\t\t\/\/false\n\n\/\/System.out.println(arrayList instanceof LinkedList);\t\/\/Does not compile\n}\n}\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\ntrue\ntrue\ntrue\ntrue\nfalse\n<\/pre>\n<h2>3. Java instanceof with arrays<\/h2>\n<p>In Java, arrays are also considered objects and have fields and methods associated with them. So we can use instanceof operator with <a href=\"https:\/\/howtodoinjava.com\/series\/java-arrays\/\">arrays<\/a> as well.<\/p>\n<ul>\n<li><strong>Primitive arrays<\/strong> are instance of Object and self type. e.g. int[] is type of Object and int[]. Both comparison returns true.<\/li>\n<li><strong>Object arrays<\/strong> are types of Object, Object array, classtype array, parent class type array. e.g. Integer[] is type of Object, Object[], Integer[] and Number[] (<code>Integer extends Number<\/code>).<\/li>\n<\/ul>\n<pre class=\"brush: java; title: instanceof example with arrays; notranslate\" title=\"instanceof example with arrays\">\nimport java.util.AbstractList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Main\n{\npublic static void main(String[] args)\n{\nint[] intArr = new int[3];\nfloat[] floatArr = new float[3];\n\nInteger[] intObjArr = new Integer[3];\nFloat[] floatObjArr = new Float[3];\nString[] stringArr = new String[3];\n\nSystem.out.println(intArr instanceof Object);\t\t\/\/true\nSystem.out.println(intArr instanceof int[]);\t\t\/\/true\n\nSystem.out.println(floatArr instanceof Object);\t\t\/\/true\nSystem.out.println(floatArr instanceof float[]);\t\/\/true\n\nSystem.out.println(intObjArr instanceof Object);\t\/\/true\nSystem.out.println(intObjArr instanceof Object[]);\t\/\/true\nSystem.out.println(intObjArr instanceof Integer[]);\t\/\/true\nSystem.out.println(intObjArr instanceof Number[]);\t\/\/true\n\nSystem.out.println(floatObjArr instanceof Float[]);\t\/\/true\nSystem.out.println(stringArr instanceof String[]);\t\/\/true\n}\n}\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n<\/pre>\n<h2>4. Using instanceof to correctly typecast<\/h2>\n<p>A real life example to use instanceof operator can be typecasting a variable to another type. instanceof operator helps in avoiding <strong>ClassCastException<\/strong> in runtime.<\/p>\n<p>Consider following example where we are trying to typecast a list to LinkedList class, where original variable is of type ArrayList. It will throw ClassCastException.<\/p>\n<pre class=\"brush: java; title: Incorrect casting; notranslate\" title=\"Incorrect casting\">\nList&amp;amp;lt;String&amp;amp;gt; list = new ArrayList&amp;amp;lt;&amp;amp;gt;();\n\nLinkedList&amp;amp;lt;String&amp;amp;gt; linkedList = (LinkedList&amp;amp;lt;String&amp;amp;gt;) list;\n<\/pre>\n<p>To correctly casting the variable, we can use instanceof operator. It will not result in ClassCastException.<\/p>\n<pre class=\"brush: java; title: Correct casting; notranslate\" title=\"Correct casting\">\nList&amp;amp;lt;String&amp;amp;gt; list = new ArrayList&amp;amp;lt;&amp;amp;gt;();\n\nif(list instanceof LinkedList)\n{\nLinkedList&amp;amp;lt;String&amp;amp;gt; linkedList = (LinkedList&amp;amp;lt;String&amp;amp;gt;) list;\n\n\/\/application code\n}\n<\/pre>\n<p>Drop me your questions related to <strong>Java instanceof operator<\/strong> used for type comparison.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java instanceof operator (also called type comparison operator) is used to test whether the object is an instance of the specified type (class or subclass or interface). It returns &#8211; true &#8211; if variable is instance of specified class, it&#8217;s parent class or implement specified interface or it&#8217;s parent interface false &#8211; if variable is &#8230; <a title=\"Java Instanceof Operator\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-instanceof\/\" aria-label=\"More on Java Instanceof Operator\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4758,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1166],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":1,"uagb_excerpt":"Java instanceof operator (also called type comparison operator) is used to test whether the object is an instance of the specified type (class or subclass or interface). It returns &#8211; true &#8211; if variable is instance of specified class, it&#8217;s parent class or implement specified interface or it&#8217;s parent interface false &#8211; if variable is&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12106"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=12106"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12106\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4758"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=12106"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=12106"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=12106"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}