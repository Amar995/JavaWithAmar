{"id":19310,"date":"2022-01-11T19:13:58","date_gmt":"2022-01-11T13:43:58","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=19310"},"modified":"2022-01-11T19:13:59","modified_gmt":"2022-01-11T13:43:59","slug":"setting-up-slf4j","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/logback\/setting-up-slf4j\/","title":{"rendered":"Setting Up SLF4J with Logback, Log4j2 and JUL"},"content":{"rendered":"\n<p><strong>SLF4J<\/strong> (<em>Simple Logging Facade for Java<\/em>) is a simple <a href=\"https:\/\/howtodoinjava.com\/design-patterns\/structural\/facade-design-pattern\/\">facade<\/a> or abstraction for various logging frameworks, such as Java Util Logging (JUL), <a href=\"https:\/\/howtodoinjava.com\/logback\/logback-tutorial\/\">Logback<\/a> and <a href=\"https:\/\/howtodoinjava.com\/log4j2\/log4j2-tutorial\/\">Log4j2<\/a>. We use the abstract SLF4J API in the application, and later we can plug in any desired logging framework as underlying implementation.<\/p>\n\n\n\n<p>Using <strong>SLF4J helps in migrating from one logging framework to another<\/strong>, just by replacing the configuration files. The application code is untouched.<\/p>\n\n\n\n<p>In this <em>SLF4J tutorial<\/em>, we will learn to use various logging frameworks with SLF4J.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-5c2febec \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-slf4j-dependency-and-api\">1. SLF4J Dependency and API<\/a><li class=\"uagb-toc__list\"><a href=\"#2-configuring-logback-with-slf4j\">2. Configuring Logback with SLF4J<\/a><li class=\"uagb-toc__list\"><a href=\"#3-configuring-log4j2-with-slf4j\">3. Configuring Log4j2 with SLF4J<\/a><li class=\"uagb-toc__list\"><a href=\"#4-configuring-java-util-logging-with-slf4j\">4. Configuring Java Util Logging with SLF4J<\/a><li class=\"uagb-toc__list\"><a href=\"#5-conclusion\">5. Conclusion<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. SLF4J Dependency and API<\/h2>\n\n\n\n<p>Note that the only mandatory dependency for using the SLF4J API is <code>slf4j-api<\/code>. Other dependencies are logging framework-specific, so we will be importing different dependencies for different logging framework integration.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/slf4j-with-logging-frameworks.png\"><img loading=\"lazy\" width=\"494\" height=\"460\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/slf4j-with-logging-frameworks.png\" alt=\"\" class=\"wp-image-19311\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/slf4j-with-logging-frameworks.png 494w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/01\/slf4j-with-logging-frameworks-300x279.png 300w\" sizes=\"(max-width: 494px) 100vw, 494px\" \/><\/a><\/figure><\/div>\n\n\n\n<ul><li>If no binding is found on the <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-classpath\/\">classpath<\/a>, then SLF4J will default to a <em>no-operation implementation<\/em>. It means that no logging will happen in runtime.<\/li><li>Since version 2.0.0, SLF4J requires Java 8 and introduces a backward-compatible fluent logging API. The fluent API through SLF4j works with all existing logging frameworks.<\/li><\/ul>\n\n\n\n<ul><li>If we are using Spring boot starter <code>spring-boot-starter-logging<\/code> configures <em>SLF4J with Logback<\/em>.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency>\r\n\t&lt;groupId>org.slf4j&lt;\/groupId>\r\n\t&lt;artifactId>slf4j-api&lt;\/artifactId>\r\n\t&lt;version>${slf4j-api-version}&lt;\/version>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<p>To <em>log messages in the classes<\/em>, we need to use <code>Logger<\/code> and <code>LoggerFactory<\/code> from the <code>org.slf4j<\/code> package.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n\/\/Create Logger\r\nLogger logger = LoggerFactory.getLogger(Main.class);\r\n\r\n\/\/Log messages\r\nlogger.info(\"Info Message Logged !!!\");<\/code><\/pre>\n\n\n\n<h2>2. Configuring Logback with SLF4J<\/h2>\n\n\n\n<p>To use Logback, include <code>logback-classic<\/code> dependency. Note that <code>logback-classic<\/code> transitively includes the <code>slf4j-api<\/code> and <code>logback-core<\/code>, so only having the <code>logback-classic<\/code> is enough to setup logback with slf4j.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency>\r\n    &lt;groupId>ch.qos.logback&lt;\/groupId>\r\n    &lt;artifactId>logback-classic&lt;\/artifactId>\r\n    &lt;version>${logback-classic-version}&lt;\/version>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<p>When using Logback with SLF4j, a <strong>console appender with DEBUG log level is configured automatically<\/strong>. For <a href=\"https:\/\/howtodoinjava.com\/logback\/logback-tutorial\/\">custom logback configuration<\/a>, we need to create <code>logback.xml<\/code> file and place it in the classpath.<\/p>\n\n\n\n<pre title=\"logback.xml\" class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;configuration debug=\"true\">\r\n  &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n    &lt;encoder>\r\n      &lt;pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;\/pattern>\r\n    &lt;\/encoder>\r\n  &lt;\/appender>\r\n\r\n  &lt;root level=\"debug\">\r\n    &lt;appender-ref ref=\"STDOUT\" \/>\r\n  &lt;\/root>\r\n&lt;\/configuration><\/code><\/pre>\n\n\n\n<h2>3. Configuring Log4j2 with SLF4J<\/h2>\n\n\n\n<p>To make Log4j2 work with SLF4J, we need to include three dependencies.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency>\r\n    &lt;groupId>org.apache.logging.log4j&lt;\/groupId>\r\n    &lt;artifactId>log4j-api&lt;\/artifactId>\r\n    &lt;version>${log4j2-version}&lt;\/version>\r\n&lt;\/dependency>\r\n&lt;dependency>\r\n    &lt;groupId>org.apache.logging.log4j&lt;\/groupId>\r\n    &lt;artifactId>log4j-core&lt;\/artifactId>\r\n    &lt;version>${log4j2-version}&lt;\/version>\r\n&lt;\/dependency>\r\n&lt;dependency>\r\n    &lt;groupId>org.apache.logging.log4j&lt;\/groupId>\r\n    &lt;artifactId>log4j-slf4j-impl&lt;\/artifactId>\r\n    &lt;version>${log4j2-version}&lt;\/version>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<p>Next, we need to provide a <em>log4j2.properties<\/em>, <em>log4j2.xml<\/em> or <em>log4j2.json<\/em> file which will configure the required loggers and appenders.<\/p>\n\n\n\n<pre title=\"log4j2.xml\" class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n&lt;Configuration status=\"WARN\" monitorInterval=\"30\">\r\n    &lt;Properties>\r\n        &lt;Property name=\"LOG_PATTERN\">%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1} - %m%n&lt;\/Property>\r\n    &lt;\/Properties>\r\n \r\n    &lt;Appenders>\r\n        &lt;Console name=\"console\" target=\"SYSTEM_OUT\" follow=\"true\">\r\n            &lt;PatternLayout pattern=\"${LOG_PATTERN}\"\/>\r\n        &lt;\/Console>\r\n    &lt;\/Appenders>\r\n \r\n    &lt;Loggers>\r\n        &lt;Root level=\"info\">\r\n            &lt;AppenderRef ref=\"console\"\/>\r\n        &lt;\/Root>\r\n    &lt;\/Loggers>\r\n&lt;\/Configuration><\/code><\/pre>\n\n\n\n<h2>4. Configuring Java Util Logging with SLF4J<\/h2>\n\n\n\n<p>To use the JUL as a logging implementation, we need to import <a href=\"https:\/\/mvnrepository.com\/artifact\/org.slf4j\/slf4j-jdk14\">slf4j-jdk14<\/a> dependency.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;dependency>\r\n    &lt;groupId>org.slf4j&lt;\/groupId>\r\n    &lt;artifactId>slf4j-jdk14&lt;\/artifactId>\r\n    &lt;version>${jul-version}&lt;\/version>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<p>Note that JUL logging default loads <code>logging.properties<\/code> from the <code>$JAVA_HOME\/jre\/lib\/<\/code> (<a href=\"https:\/\/howtodoinjava.com\/java-8-tutorial\/\">Java 8<\/a> and before); for <a href=\"https:\/\/howtodoinjava.com\/java9\/java9-new-features-enhancements\/\">Java 9<\/a> and above, the <code>logging.properties<\/code> file moved to <code>$JAVA_HOME\/conf<\/code>.<\/p>\n\n\n\n<p>A sample configuration file is:<\/p>\n\n\n\n<pre title=\"logger.properties\" class=\"wp-block-code\"><code lang=\"properties\" class=\"language-properties\"># Logging handlers\r\nhandlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler\r\n\r\n# Default global logging level\r\n.level = ALL\r\n\r\n# File Logging\r\n# default file output is in user's home directory\r\njava.util.logging.FileHandler.pattern = %h\/myApp.log\r\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\r\njava.util.logging.FileHandler.level = INFO\r\n\r\n# Console Logging\r\njava.util.logging.ConsoleHandler.level = INFO\r\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter<\/code><\/pre>\n\n\n\n<h2>5. Conclusion<\/h2>\n\n\n\n<p><strong>Using SLF4J abstract logging API is a highly recommended<\/strong> way to implement the logging in Java applications. It frees the developers from creating tight coupling between the application code and the logging framework.<\/p>\n\n\n\n<p>SLF4J provides other benefits as well. For example, <a href=\"https:\/\/howtodoinjava.com\/java\/library\/fluent-logging-with-flogger\/\">fluent API support<\/a>, more <strong>readable log messages using variable substitution<\/strong> in place of string concatenation. This <strong>helps in improving the performance of the overall logging<\/strong> in the application.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>SLF4J (Simple Logging Facade for Java) is a simple facade or abstraction for various logging frameworks, such as Java Util Logging (JUL), Logback and Log4j2. We use the abstract SLF4J API in the application, and later we can plug in any desired logging framework as underlying implementation. Using SLF4J helps in migrating from one logging &#8230; <a title=\"Setting Up SLF4J with Logback, Log4j2 and JUL\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/logback\/setting-up-slf4j\/\" aria-label=\"More on Setting Up SLF4J with Logback, Log4j2 and JUL\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":18773,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1401],"tags":[1392],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2-300x195.png",300,195,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",768,500,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/12\/Log4j2.png",120,78,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"SLF4J (Simple Logging Facade for Java) is a simple facade or abstraction for various logging frameworks, such as Java Util Logging (JUL), Logback and Log4j2. We use the abstract SLF4J API in the application, and later we can plug in any desired logging framework as underlying implementation. Using SLF4J helps in migrating from one logging&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19310"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=19310"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19310\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/18773"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=19310"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=19310"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=19310"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}