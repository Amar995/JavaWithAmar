{"id":4146,"date":"2014-08-17T18:19:34","date_gmt":"2014-08-17T18:19:34","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4146"},"modified":"2020-12-26T00:49:50","modified_gmt":"2020-12-25T19:19:50","slug":"android-tutorial-key-concepts","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/android\/android-tutorial-key-concepts\/","title":{"rendered":"Android Tutorial : Key Concepts"},"content":{"rendered":"<p>Let&#8217;s start with most <strong>basic android concepts<\/strong> which some of us may already know.<\/p>\n<p><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/Android-Image.jpg\" alt=\"Android\" width=\"800\" height=\"200\" class=\"aligncenter size-full wp-image-4149\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/Android-Image.jpg 800w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/Android-Image-300x75.jpg 300w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/p>\n<h2>Android Applications<\/h2>\n<p>An Android Application is something that a user might install from the <a href=\"https:\/\/play.google.com\/store\" target=\"_blank\" rel=\"noopener noreferrer\">Google Play Store<\/a> or otherwise download to their device from any remote location over internet\/ even from their local systems as well. This application <strong>should have some user interface<\/strong>, and it might have some other code designed to work in the background of application. Here I am assuming that you have some hands-on experience with Android devices, and therefore you are familiar with buttons like HOME and BACK, the built-in settings, the concept of a home screen and launcher, and so forth. If you have never used an Android device, I would like to strongly encourage you to get one and play with the device and apps which come installed on it\/ or download from app store. This will help you in understanding what you will be building after so much hard work.<\/p>\n<h2>Allowed Programming Languages<\/h2>\n<p>The vast majority of Android applications are written exclusively in Java. However, there are other options as well:<\/p>\n<ul>\n<li>You can write parts of the app in C\/C++. It is usually done for performance gains or porting over existing application&#8217;s code bases etc.<\/li>\n<li>You can write an entire applications in C\/C++. It is mostly done for games using OpenGL for 3D animations.<\/li>\n<li>You can write part of an android app in HTML, CSS, and JavaScript as well. There are tools which will package them into an Android application.<\/li>\n<\/ul>\n<p>But still the fact is that Java is most used and popular language to build android applications. If you want to deep dive into android app development, then there is no excuse for not learning java.<\/p>\n<h2>Major Android Components<\/h2>\n<p>Remember when you started learning java, your first program was &#8216;<em>Hello World<\/em>&#8216; application. You wrote a <code>main()<\/code> method and some print statement; then some magic happened and output was written in console. Similarly, when you entered into web programming area, normally you will learn\/write the http servlet first. You extend a class and write some code in it; and then something passes control to your servlet and it start executing.<\/p>\n<p>Android takes the second approach i.e. you extend some specific classes and define your configuration in some XML file and you are good to start your first android app. The subclasses you create, by extending base classes supplied by Android, are called components. Below are major 4 components you should know before hand:<\/p>\n<h4>1) Activities<\/h4>\n<p>The major building block of the <strong>user interface is called activity<\/strong>. You can think of an activity as an user interface as you see in classic windows application. Just like in windows where an application takes most of screen apart from toolbar strip, activity also leave area on mobile device screen only for strip on top contain device clock, signal strength indicators etc. Remember this term, you will be using it in every step of your app development.<\/p>\n<figure id=\"attachment_4147\" aria-describedby=\"caption-attachment-4147\" style=\"width: 390px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"size-full wp-image-4147\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example.jpg\" alt=\"Android Activities\" width=\"400\" height=\"308\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example.jpg 400w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example-300x231.jpg 300w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><figcaption id=\"caption-attachment-4147\" class=\"wp-caption-text\">Android Activities<\/figcaption><\/figure>\n<h4>2) Services<\/h4>\n<p>Activities are short-lived and can be shut down at any time, such as when the user presses the BACK button or HOME button. Services, on the other hand, are <strong>designed to keep running<\/strong>, if needed, independent of any activity inside application, for a short period of time. You might use a service for checking for updates to an RSS feed, or to play back music even if the controlling activity (i.e. media player) is no longer operating on front screen.<\/p>\n<h4>3) Content Providers<\/h4>\n<p>Content providers provide a level of <strong>abstraction for any data stored on the device<\/strong> that is accessible by &#8216;multiple&#8217; applications. The Android development model encourages you to make your own data available to other applications. Building a content provider lets you do that, while maintaining a degree of control over how your data gets accessed by other apps on same device.<\/p>\n<h4>4) Broadcast Receivers<\/h4>\n<p>The system, and\/or other apps, will send out broadcasts\/notifications from time to time for everything relevant e.g. for the battery is getting low, the screen turns off OR connectivity changes from WiFi to mobile data etc. A broadcast receiver in your application will be able to <strong>listen for these broadcasts\/notifications and respond accordingly<\/strong> the way you want.<\/p>\n<h2>Key Terms Used in Android Development<\/h2>\n<h4>a) Widgets<\/h4>\n<p>In Android terms, a widget is the <strong>&#8220;micro&#8221; unit of user interface<\/strong>. Fields, buttons, labels, lists, and so on are all widgets. Your activity\u2019s UI, therefore, is made up of one or more of these widgets. You can think of all text boxes, drop downs and other HTML UI elements in normal webpage. In Android, they are called widgets. Easy to remember.<\/p>\n<h4>b) Containers\/ Layout Managers<\/h4>\n<p>If you have more than one widget \u2014 which is fairly typical \u2014 you will need to tell Android how those widgets are organized on the screen. To do this, you will use various container classes referred to as &#8216;layout managers&#8217;. These will let you <strong>put things in rows, columns, or more complex arrangements as needed<\/strong>. To describe how the containers and widgets are connected, you will typically create a layout resource file and put in project&#8217;s resource folder from where android pick it up directly and render the whole UI for you automatically.<\/p>\n<p>In more familiar terms, they are equivalent to DIVs, SPANs or Table tags in HTML.<\/p>\n<h4>c) Resources<\/h4>\n<p>Resources in android refer to things like <strong>images, strings, and other similar things that your application uses on runtime<\/strong>. In android programming, you will be creating lot&#8217;s of such resource files for providing data on runtime of application; more like properties files in normal java applications.<\/p>\n<h4>d) Fragments<\/h4>\n<p>Normally you will design your app in such a way that <strong>UI will work across all sorts of devices<\/strong>: phones, tablets, televisions, etc. For example, Gmail app on a tablet will show your list of labels, the list of conversations in a selected label, and the list of messages in a selected conversation, all in one activity (screen) in a tablet. However, same Gmail app on a phone cannot do that, as there is not enough screen space, so it shows each of those (labels, conversations, messages) in separate activities (screens). Android supplies a construct called the fragment to help make it easier for you to implement these sorts of effects. We will learn them in coming posts in detail.<\/p>\n<h4>e) Apps and Packages<\/h4>\n<p>Given a bucket of source code and a basket of resources, the Android build tools will give you an application as a result. The application comes in the form of an APK file. It is APK file that you will upload to the Play Store or distribute by other means.<\/p>\n<p>Important thing to learn is that each android application has a unique package name and it must fulfill three requirements:<\/p>\n<ol>\n<li>It must be a valid java package name, as some java source code will be generated by the android build tools in this package.<\/li>\n<li>No two applications can exist on a device at the same time with the same package.<\/li>\n<li>No two applications can be uploaded to the Play Store having the same package.<\/li>\n<\/ol>\n<p>So, you will pick a package name following the &#8220;<a title=\"Reverse_domain_name_notation\" href=\"https:\/\/en.wikipedia.org\/wiki\/Reverse_domain_name_notation\" target=\"_blank\" rel=\"noopener noreferrer\">reverse domain name<\/a>&#8221; convention (e.g., com.howtodoinjava.android.app). That way, the domain name system ensures that your package name prefix (com.howtodoinjava) is unique, and it is up to you to ensure that the rest of the package name distinguishes one of your apps from any other.<\/p>\n<h2>Types of Android Devices<\/h2>\n<p>Android devices come in all shapes, sizes, and colors. However, there are three dominant &#8220;form factors&#8221;:<\/p>\n<ul>\n<li>Phone<\/li>\n<li>Tablet<\/li>\n<li>Television<\/li>\n<\/ul>\n<p>However, it is important that you understand that android has<em><strong> no built-in concept of a device being a &#8220;phone&#8221; or a &#8220;tablet&#8221; or a &#8220;TV&#8221;<\/strong><\/em>. Rather, android distinguishes devices based on capabilities and features. So, you will not see an <code>isPhone()<\/code> method anywhere, though you can ask android:<\/p>\n<ul>\n<li>what is the screen size?<\/li>\n<li>does the device have telephony capability? etc.<\/li>\n<\/ul>\n<p>Similarly, as you build your applications, rather than thinking of those three form factors, focus on what capabilities and features you need. Not only will this help you line up better with how android wants you to build your apps, but it will make it easier for you to adapt to other form factors that will come about such as:<\/p>\n<ul>\n<li>watches and other types of wearable devices<\/li>\n<li>airplane seat-back entertainment centers<\/li>\n<li>in-car navigation and entertainment devices etc.<\/li>\n<\/ul>\n<h2>Android Versions And API Levels<\/h2>\n<p>Android has come a long way since the early beta releases from late 2007. Each new Android OS version adds more capabilities to the platform and more things that developers can do to exploit those capabilities. Moreover, the core Android development team tries very hard to ensure forwards and backwards compatibility. An app you write today should work unchanged on future versions of Android (forwards compatibility), though it may perhaps miss some features or work in some sort of &#8220;compatibility mode&#8221;.<\/p>\n<p>To help us keep track of all the different OS versions that matter to us as developers, Android has API levels. A new API level is defined when an android version comes that contains changes that affect developers. When you create an emulator AVD (sort of VM) to test your app, you will indicate what API level that emulator should emulate. When you distribute your app, you will indicate the oldest API level your app supports, so the app is not installed on older devices.<\/p>\n<p>Below is list of <a title=\"Android_version_history\" href=\"https:\/\/en.wikipedia.org\/wiki\/Android_version_history\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>android versions<\/strong><\/a> and API levels. You will need this information when you want to have your application installed on devices having at least certain capabilities.<\/p>\n<ul>\n<li>API Level 3 (Android 1.5)<\/li>\n<li>API Level 4 (Android 1.6)<\/li>\n<li>API Level 7 (Android 2.1)<\/li>\n<li>API Level 8 (Android 2.2)<\/li>\n<li>API Level 9 (Android 2.3)<\/li>\n<li>API Level 11 (Android 3.0)<\/li>\n<li>API Level 15 (Android 4.0.3)<\/li>\n<li>API Level 16 (Android 4.1)<\/li>\n<li>API Level 17 (Android 4.2)<\/li>\n<li>API Level 18 (Android 4.3)<\/li>\n<li>API Level 19 (Android 4.4)<\/li>\n<\/ul>\n<h2>Dalvik Virtual Machine<\/h2>\n<p>Virtual machines are used by many programming languages, such as Java, Perl, and Smalltalk. The <a title=\"Dalvik\" href=\"https:\/\/en.wikipedia.org\/wiki\/Dalvik_%28software%29\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Dalvik VM<\/strong><\/a> is designed to work much like a Java VM, but optimized for embedded Linux environments. In development environment, you will using this VM for testing your code to see how it will look on a actual android device.<\/p>\n<p>Now let&#8217;s see, what really goes on when somebody writes an android application and run it:<\/p>\n<ol>\n<li>Developers write Java-syntax source code, leveraging class libraries published by the Android project and third parties.<\/li>\n<li>Build tools compile the source code into Java VM bytecode, using the javac compiler that comes with the Java SDK.<\/li>\n<li>Build tools translate the Java VM bytecode into Dalvik VM bytecode, which is packaged with other files into a ZIP archive with the .apk extension (the APK file).<\/li>\n<li>An Android device or emulator runs the APK file and you get what you build in form of an live app.<\/li>\n<\/ol>\n<p>From developer&#8217;s standpoint, most of this is hidden by the build tools. You simply pour java source code from the top, and the APK file comes out the bottom of a funnel.<\/p>\n<p>That&#8217;s all for this short <strong>Introductory Android Tutorial<\/strong>. I will revisit all above terms again in coming posts to develop more robust understanding of whole picture and things which run behind the scene.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s start with most basic android concepts which some of us may already know. Android Applications An Android Application is something that a user might install from the Google Play Store or otherwise download to their device from any remote location over internet\/ even from their local systems as well. This application should have some &#8230; <a title=\"Android Tutorial : Key Concepts\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/android\/android-tutorial-key-concepts\/\" aria-label=\"More on Android Tutorial : Key Concepts\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4147,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[782],"tags":[1411],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example.jpg",400,308,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example-300x231.jpg",300,231,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example.jpg",400,308,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example.jpg",400,308,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example.jpg",400,308,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example.jpg",400,308,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/08\/android_activity_example.jpg",120,92,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":7,"uagb_excerpt":"Let&#8217;s start with most basic android concepts which some of us may already know. Android Applications An Android Application is something that a user might install from the Google Play Store or otherwise download to their device from any remote location over internet\/ even from their local systems as well. This application should have some&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4146"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4146"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4146\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4147"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4146"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4146"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4146"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}