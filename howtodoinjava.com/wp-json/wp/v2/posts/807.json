{"id":807,"date":"2013-03-01T09:19:43","date_gmt":"2013-03-01T03:49:43","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=807"},"modified":"2022-01-25T01:46:26","modified_gmt":"2022-01-24T20:16:26","slug":"core-java-interview-questions","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/interview-questions\/core-java-interview-questions\/","title":{"rendered":"Core Java Interview Questions"},"content":{"rendered":"\n<p>Are you planning to learn core java? Or an interview is scheduled in the coming days? Do not worry and read all the <strong>Java interview questions<\/strong> given below to refresh your concepts and possibly have some new ones added to the list.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-98fe6d4c \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-how-to-create-an-immutable-object-in-java\">1. How to Create an Immutable Object in Java?<\/a><li class=\"uagb-toc__list\"><a href=\"#2-is-java-pass-by-reference-or-pass-by-value\">2. Is Java Pass by Reference or Pass by Value?<\/a><li class=\"uagb-toc__list\"><a href=\"#3-what-is-the-use-of-the-finally-block-is-finally-block-guaranteed-to-be-called-when-finally-block-is-not-called\">3. What is the use of the finally block? Is finally block guaranteed to be called? When finally block is NOT called?<\/a><li class=\"uagb-toc__list\"><a href=\"#4-why-there-are-two-date-classes-one-in-javautil-and-another-in-javasql\">4. Why there are two Date classes, One in java.util and another in java.sql?<\/a><li class=\"uagb-toc__list\"><a href=\"#5-explain-marker-interfaces\">5. Explain Marker Interfaces?<\/a><li class=\"uagb-toc__list\"><a href=\"#6-why-main-method-is-declared-as-public-static-void\">6. Why main() Method is Declared as public static void?<\/a><li class=\"uagb-toc__list\"><a href=\"#7-what-is-the-difference-between-string-objects-and-literals\">7. What is the Difference between String Objects and Literals?<\/a><li class=\"uagb-toc__list\"><a href=\"#8-how-does-substring-method-works\">8. How does substring() Method Works?<\/a><li class=\"uagb-toc__list\"><a href=\"#9-explain-internal-working-of-hashmap-how-duplicate-collision-is-resolved\">9. Explain Internal Working of HashMap. How Duplicate Collision is Resolved?<\/a><li class=\"uagb-toc__list\"><a href=\"#10-what-is-the-difference-between-interface-and-abstract-class\">10. What is the Difference between Interface and Abstract Class?<\/a><li class=\"uagb-toc__list\"><a href=\"#11-when-do-we-override-hashcode-and-equals-methods\">11. When do we Override hashCode() and equals() Methods?<\/a><li class=\"uagb-toc__list\"><a href=\"#12-what-is-the-difference-between-deep-copy-and-shallow-copy\">12. what is the Difference between Deep Copy and Shallow Copy?<\/a><li class=\"uagb-toc__list\"><a href=\"#13-what-is-synchronization-explain-object-level-lock-and-class-level-lock\">13. What is Synchronization? Explain Object-level Lock and Class-level Lock?<\/a><li class=\"uagb-toc__list\"><a href=\"#14-difference-between-sleep-and-wait-methods\">14. Difference between sleep() and wait() Methods?<\/a><li class=\"uagb-toc__list\"><a href=\"#15-can-we-assign-null-to-this-reference-variable\">15. Can We Assign &#8216;null&#8217; to &#8216;this&#8217; Reference Variable?<\/a><li class=\"uagb-toc__list\"><a href=\"#16-what-is-the-difference-between-and-operators\">16. What is the Difference between &#8216;&amp;&amp;&#8217; and &#8216;&amp;&#8217; Operators??<\/a><li class=\"uagb-toc__list\"><a href=\"#17-explain-all-access-modifiers\">17. Explain All Access Modifiers?<\/a><li class=\"uagb-toc__list\"><a href=\"#18-what-is-garbage-collection-can-we-enforce-it\">18. What is Garbage Collection? Can We Enforce It?<\/a><li class=\"uagb-toc__list\"><a href=\"#19-what-is-native-keyword-explain-in-detail\">19. What is &#8216;native&#8217; Keyword? Explain in Detail?<\/a><li class=\"uagb-toc__list\"><a href=\"#20-what-is-serialization-explain-the-catches\">20. What is Serialization? Explain the Catches?<\/a><li class=\"uagb-toc__list\"><a href=\"#21-can-we-use-hashmap-in-concurrent-environment\">21. Can we use HashMap in Concurrent Environment?<\/a><li class=\"uagb-toc__list\"><a href=\"#22-explain-abstraction-and-encapsulation-their-differences\">22. Explain Abstraction and Encapsulation? Their Differences?<\/a><li class=\"uagb-toc__list\"><a href=\"#23-how-stringbuffer-saves-the-memory\">23. How StringBuffer saves the Memory?<\/a><li class=\"uagb-toc__list\"><a href=\"#24-why-wait-and-notify-are-declared-in-object-instead-of-thread\">24. Why wait() and notify() are Declared in Object instead of Thread?<\/a><li class=\"uagb-toc__list\"><a href=\"#25-write-a-java-program-to-create-deadlock-and-fix-it\">25. Write a Java Program to Create Deadlock, and Fix It ?<\/a><li class=\"uagb-toc__list\"><a href=\"#26-explain-transient-and-volatile-keywords\">26. Explain transient and volatile Keywords?<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. How to Create an Immutable Object in Java?<\/h2>\n\n\n\n<p>An <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/\">immutable class<\/a> is one whose <strong>state can not be changed once created<\/strong>. Here, the state of the object essentially means the values stored in the instance variable in class whether they are primitive types or reference types.<\/p>\n\n\n\n<p>To make a class immutable, the below steps needs to be followed:<\/p>\n\n\n\n<ol><li>Don\u2019t provide &#8220;setter&#8221; methods or methods that modify fields or objects referred to by fields. Setter methods are meant to change the state of object and this is what we want to prevent here.<\/li><li>Make all fields <code>final<\/code> and <code>private<\/code>. Fields declared <code>private<\/code> will not be accessible outside the class and making them <code>final<\/code> will ensure the even accidentally you can not change them.<\/li><li>Don\u2019t allow subclasses to override methods. The simplest way to do this is to declare the class as <code>final<\/code>. Final classes in java can not be overridden.<\/li><li>Always remember that your instance variables will be either mutable or immutable. Identify them and return new objects with copied content for all mutable objects (object references). Immutable variables (primitive types) can be returned safely without extra effort.<\/li><\/ol>\n\n\n\n<p>Also, you should memorize the following benefits of the immutable class. You might need them during the interview.<\/p>\n\n\n\n<p>The immutable classes &#8211;<\/p>\n\n\n\n<ul><li>are simple to construct, test, and use<\/li><li>are automatically thread-safe and have no synchronization issues<\/li><li>do not need a copy constructor<\/li><li>do not need an implementation of clone<\/li><li>allow hashCode to use lazy initialization, and to cache its return value<\/li><li>do not need to be copied defensively when used as a field<\/li><li>make good <code>Map<\/code> keys and <code>Set<\/code> elements (these objects must not change state while in the collection)<\/li><li>have their class invariant established once upon construction, and it never needs to be checked again<\/li><li>always have &#8220;<strong>failure atomicity<\/strong>&#8221; (a term used by Joshua Bloch) : if an immutable object throws an exception, it\u2019s never left in an undesirable or indeterminate state.<a name=\"ques2\"><\/a><\/li><\/ul>\n\n\n\n<h2>2. Is Java Pass by Reference or Pass by Value?<\/h2>\n\n\n\n<p>The Java Spec says that <em><strong>everything in Java is pass-by-value<\/strong><\/em>. There is no such thing as &#8220;<em>pass-by-reference<\/em>&#8221; in Java. <\/p>\n\n\n\n<p>These terms are associated with method calling and passing variables as method parameters. Well, primitive types are always passed by value without any confusion. But, the concept should be understood in the context of method parameters of complex types.<\/p>\n\n\n\n<p>In java, when we pass a reference of complex types as any method parameters, always the memory address is copied to a new reference variable bit by bit. See in below picture:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value-5831061.jpg\" alt=\"pass-by-value-5831061\" class=\"wp-image-808\"\/><\/figure><\/div>\n\n\n\n<p>In the above example, address bits of the first instance are copied to another reference variable, thus resulting in both references to point to a single memory location where the actual object is stored. Remember, making another reference to null will not make the first reference also null. But, changing state from either reference variable has an impact seen in other references also.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <strong><a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-is-pass-by-value-lets-see-how\/\">Java Pass by Value or Reference?<\/a><\/strong><\/p><\/blockquote>\n\n\n\n<h2><a name=\"ques3\"><\/a>3. What is the use of the finally block? Is finally block guaranteed to be called? When finally block is NOT called?<\/h2>\n\n\n\n<p>The <code>finally<\/code> block always executes when the <code>try<\/code> block exits. This ensures that the <code>finally<\/code> block is executed even if an unexpected exception occurs. But <code>finally<\/code> is useful for more than just exception handling \u2014 it allows having cleanup code accidentally bypassed by a <code>return<\/code>, <code>continue<\/code>, or <code>break<\/code>. Putting cleanup code in a <code>finally<\/code> block is always a good practice, even when no exceptions are anticipated.<\/p>\n\n\n\n<p>If the JVM exits while the <code>try<\/code> or <code>catch<\/code> code is being executed, then the <code>finally<\/code> block may not execute. <\/p>\n\n\n\n<p>Likewise, if the thread executing the <code>try<\/code> or <code>catch<\/code> code is interrupted or killed, the <code>finally<\/code> block may not execute even though the application as a whole continues.<\/p>\n\n\n\n<h2><a name=\"ques4\"><\/a>4. Why there are two Date classes, One in java.util and another in java.sql?<\/h2>\n\n\n\n<p>A <code>java.util.Date<\/code> represents date and time of day, a <code>java.sql.Date<\/code> only represents a date. <\/p>\n\n\n\n<p>The compliment of <code>java.sql.Date<\/code> is <code>java.sql.Time<\/code>, which only represents a time of day.<br>The <code>java.sql.Date<\/code> is a subclass (an extension) of <code>java.util.Date<\/code>. So, what changed in <code>java.sql.Date<\/code>:<\/p>\n\n\n\n<ul><li><code>toString()<\/code> generates a different string representation i.e. <strong>yyyy-MM-dd<\/strong><\/li><li>a <code>static valueOf(String)<\/code> methods to create a date from a string with the above representation<\/li><li>the getters and setter for hours, minutes and seconds are deprecated<\/li><\/ul>\n\n\n\n<p>The <code>java.sql.Date<\/code> class is used with JDBC and it was intended to not have a time part, that is, hours, minutes, seconds, and milliseconds should be zero&#8230; but this is not enforced by the class.<a name=\"ques5\"><\/a><\/p>\n\n\n\n<h2>5. Explain Marker Interfaces?<\/h2>\n\n\n\n<p>The marker interface pattern is a design pattern in computer science, used with languages that <strong>provide run-time type information about objects<\/strong>. It provides a means to associate metadata with a class where the language does not have explicit support for such metadata. In Java, it is used as <strong>an interface with no method specified<\/strong>.<\/p>\n\n\n\n<p>A good example of the use of marker interface in java is the <a title=\"\" href=\"https:\/\/howtodoinjava.com\/java\/serialization\/java-serialization\/\">Serializable<\/a> interface. A class <code>Data<\/code> implementing the <em>Serializable<\/em> interface indicates that its non-transient data members can be written to byte stream or file system.<\/p>\n\n\n\n<p>A <em>major problem<\/em> with marker interfaces is that the interface defines a contract for implementing classes, and that contract is inherited by all subclasses. This means that <strong>we cannot &#8220;un-implement&#8221; a marker in child classes<\/strong>. <\/p>\n\n\n\n<p>In the example given, if you create a subclass of <code>Data<\/code> that we do not want to serialize (perhaps because it depends on the <a href=\"https:\/\/howtodoinjava.com\/java\/keywords\/transient-keyword-in-java-with-real-time-example\/\">transient<\/a> state), we must resort to explicitly throwing <em>NotSerializableException<\/em>.<\/p>\n\n\n\n<h2><a name=\"ques6\"><\/a>6. Why main() Method is Declared as public static void?<\/h2>\n\n\n\n<p><strong><em>Why public<\/em>?<\/strong> the <em>main()<\/em> method is <code>public<\/code> so that it can be accessible everywhere and to every object which may desire to use it for launching the application. Here, I am not saying that JDK\/JRE had similar reasons because <em>java.exe<\/em> or <em>javaw.exe<\/em> (for windows) use Java Native Interface (JNI) calls to invoke method, so they can have invoked it, either way, irrespective of any access modifier.<\/p>\n\n\n\n<p><strong><em>Why static<\/em>?<\/strong> Let us suppose we do not have <em>main()<\/em> method as <code>static<\/code>. Now, to invoke any method you need an instance of it. Right? Java can have overloaded constructors, we all know. Now, which one should be used and from where the parameters for overloaded constructors will come.<\/p>\n\n\n\n<p><strong><em>Why void<\/em>?<\/strong> Then there is no use of returning any value to JVM, who actually invokes this method. The only thing application would like to communicate to invoking process is <em>normal or abnormal termination<\/em>. This is already possible using <code>System.exit(int)<\/code>. A non-zero value means abnormal termination otherwise everything was fine.<\/p>\n\n\n\n<h2><a name=\"ques7\"><\/a>7. What is the Difference between String Objects and Literals?<\/h2>\n\n\n\n<p>When we create <code>String<\/code> with <code>new()<\/code> it\u2019s created in heap and also added into <a href=\"https:\/\/howtodoinjava.com\/java\/string\/string-constant-pool\/\">string pool<\/a>, while <code>String<\/code> created using literal are created in String pool area only.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String str1 = new String(\"test\");    \/\/String Object\nString str2 = \"test\";           \/\/String Literal<\/code><\/pre>\n\n\n\n<p>Well you really need to know the concept of string pool very deeply to answer this question or similar questions. <a name=\"ques8\"><\/a><\/p>\n\n\n\n<h2>8. How does substring() Method Works?<\/h2>\n\n\n\n<p>A string in Java is, like any other programming language, a sequence of characters. This is more like a utility class to work on that char sequence. This char sequence is maintained in the following variable:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/** The value is used for character storage. *\/\n private final char value[];<\/code><\/pre>\n\n\n\n<p>To access this array in different scenarios, the following variables are used:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/** The offset is the first index of the storage that is used. *\/\nprivate final int offset;\n\n\/** The count is the number of characters in the String. *\/\nprivate final int count;<\/code><\/pre>\n\n\n\n<p>Whenever we create a substring from any existing string instance<strong>, <code>substring()<\/code> method only set&#8217;s the new values of <code>offset<\/code> and <code>count<\/code> variables<\/strong>. The internal char array is unchanged. This is a possible source of a memory leak if <code>substring()<\/code> method is used without care. <a name=\"ques9\"><\/a><\/p>\n\n\n\n<h2>9. Explain Internal Working of HashMap. How Duplicate Collision is Resolved?<\/h2>\n\n\n\n<p>Most of you will agree that HashMap is most favorite topic for discussion in interviews now-a-days. If anybody asks me to describe &#8220;How HashMap works?&#8221;, I simply answer: &#8220;<strong>On principles of Hashing<\/strong>&#8220;. As simple as it is.<\/p>\n\n\n\n<p>Now, Hashing in its simplest form, is a way to assigning a unique code for any variable\/object after applying any formula\/ algorithm on its properties.<\/p>\n\n\n\n<p><strong>A map by definition is : &#8220;An object that maps keys to values&#8221;<\/strong>. Very easy.. right? So, <code>HashMap<\/code> has an inner class <code>Entry<\/code>, which looks like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">static class Entry&lt;k ,V&gt; implements Map.Entry&lt;k ,V&gt;\n{\nfinal K key;\nV value;\nEntry&lt;k ,V&gt; next;\nfinal int hash;\n...\/\/More code goes here\n}<\/code><\/pre>\n\n\n\n<p>When someone tries to store a key-value pair in a <code>HashMap<\/code>, following things happen:<\/p>\n\n\n\n<ul><li>First of all, <em>key<\/em> object is checked for null. If <em>key<\/em> is null, <em>value<\/em> is stored in <code>table[0]<\/code> position. Because the hashcode for null is always 0.<\/li><li>Then on the next step, a hash value is calculated using <em>key<\/em> hashcode by calling its <code>hashCode()<\/code> method. This hash value is used to calculate <em>index<\/em> in the array for storing <code>Entry<\/code> object. JDK designers well assumed that there might be some poorly written <code>hashCode()<\/code> functions that can return very high or low hash code value. To solve this issue, they introduced another <code>hash()<\/code> function, and passed the object\u2019s hash code to this <code>hash()<\/code> function to bring hash value in the range of array index size.<\/li><li>Now <code>indexFor(hash, table.length)<\/code> function is called to calculate the exact index position for storing the <code>Entry<\/code> object.<\/li><li>Here comes the main part. Now, as we know that two unequal objects can have the same hash code value, how two different objects will be stored in the same array location [called bucket]. The answer is <strong>LinkedList<\/strong>. If you remember, Entry class had an attribute \u201cnext\u201d. This attribute always points to the next object in the chain. This is exactly the behavior of <code>LinkedList<\/code>.<\/li><\/ul>\n\n\n\n<p>So, in case of <strong>collision<\/strong>, <code style=\"background-color: rgb(240, 244, 248);\">Entry<\/code><span style=\"font-size: inherit;\"> objects are stored in <\/span><code style=\"background-color: rgb(240, 244, 248);\">LinkedList<\/code><span style=\"font-size: inherit;\"> form. When an <\/span><code style=\"background-color: rgb(240, 244, 248);\">Entry<\/code><span style=\"font-size: inherit;\"> object needs to be stored in particular index, <\/span><code style=\"background-color: rgb(240, 244, 248);\">HashMap<\/code><span style=\"font-size: inherit;\"> checks whether there is already an entry?? If there is no entry already present, <\/span><code style=\"background-color: rgb(240, 244, 248);\">Entry<\/code><span style=\"font-size: inherit;\"> object is stored in this location.<\/span> <\/p>\n\n\n\n<p>If there is already an object sitting on the <span style=\"font-size: inherit;\"><em>calculated<\/em> index, its <\/span><code style=\"background-color: rgb(240, 244, 248);\">next<\/code><span style=\"font-size: inherit;\"> attribute is checked. If it is <\/span><strong style=\"font-size: inherit;\">null<\/strong><span style=\"font-size: inherit;\">, and the current <\/span><code style=\"background-color: rgb(240, 244, 248);\">Entry<\/code><span style=\"font-size: inherit;\"> object becomes next node in LinkedList. If next variable is not null, the procedure is followed until <\/span><code style=\"background-color: rgb(240, 244, 248);\">next<\/code><span style=\"font-size: inherit;\"> is evaluated as null.<\/span> <\/p>\n\n\n\n<p><p>What if we add another value object with same key as entered before. Logically, it should replace the old value. How it is done? Well, after determining the <code>index<\/code> position of <code>Entry<\/code> object, while iterating over <code>LinkedList<\/code> on calculated index, <code>HashMap<\/code> calls <code>equals()<\/code> method on key object for each <code>Entry<\/code> object. All these <code>Entry<\/code> objects in <code>LinkedList<\/code> will have similar hash code but <code>equals()<\/code> method will test for true equality. If <strong>key.equals(k)<\/strong> will be true then both keys are treated as same key object. This will cause the replacing of value object inside <code>Entry<\/code> object only.<\/p><\/p>\n\n\n\n<p>In this way, <code>HashMap<\/code> ensure the uniqueness of keys.<a name=\"ques10\"><\/a><\/p>\n\n\n\n<h2>10. What is the Difference between Interface and Abstract Class?<\/h2>\n\n\n\n<p>This is a very common question if you are appearing for an interview for a junior-level programmer. Well, the most noticeable differences are as below:<\/p>\n\n\n\n<ul><li>Variables declared in a Java interface is by default <code>final<\/code>. An abstract class may contain non-final variables.<\/li><li>Java interface are implicitly <code>abstract<\/code> and cannot have implementations. A Java abstract class can have instance methods that implements a default behavior.<\/li><li>Members of a Java interface are public by default. A Java abstract class can have the usual flavors of class members like <code>private<\/code> or <code>abstract<\/code> etc.<\/li><li>Java interface should be implemented using keyword &#8220;<strong>implements<\/strong>&#8220;; A Java abstract class should be extended using keyword &#8220;<strong>extends<\/strong>&#8220;.<\/li><li>A Java class can implement multiple interfaces but it can extend only one abstract class.<\/li><li>Interface is <del>absolutely abstract and<\/del> cannot be instantiated; A Java abstract class also cannot be instantiated, but can be invoked if a main() exists. Since Java 8, you can define <a href=\"https:\/\/howtodoinjava.com\/java8\/default-methods-in-java-8\/\"><strong>default methods in interfaces<\/strong><\/a>.<\/li><li>Abstract class are slightly faster than interface because interface involves a search before calling any overridden method in Java. This is not a significant difference in most of cases but if you are writing a time critical application than you may not want to leave any stone unturned.<a name=\"ques11\"><\/a><\/li><\/ul>\n\n\n\n<h2>11. When do we Override <em>hashCode()<\/em> and <em>equals()<\/em> Methods?<\/h2>\n\n\n\n<p>The <em>hashCode()<\/em> and <em>equals()<\/em> methods have been defined in <em>Object<\/em> class that is the parent class for all Java objects. For this reason, all Java objects inherit a default implementation of these methods.<\/p>\n\n\n\n<p>The <code>hashCode()<\/code> method is used to get a unique integer for a given object. This integer is used for determining the bucket location when this object needs to be stored in some HashTable like data structure. By default, the Object\u2019s hashCode() method returns an integer representation of the memory address where the object is stored. <\/p>\n\n\n\n<p>The <code>equals()<\/code> method is used to simply verify the equality of two objects. The default implementation simply checks the object references of two objects to verify their equality.<\/p>\n\n\n\n<p>Note that it is generally necessary to override the <em>hashCode()<\/em> method whenever <em>equals()<\/em> method is overridden, so as to maintain the general contract for the <code>hashCode()<\/code> method, which states that <strong>equal objects must have equal hash codes<\/strong>.<\/p>\n\n\n\n<ul><li><code>equals()<\/code> must define an equality relation (it must be <strong>reflexive, symmetric and transitive<\/strong>). In addition, it must be consistent (if the objects are not modified, then it must keep returning the same value). Furthermore, <code>o.equals(null)<\/code> must always return <code>false<\/code>.<\/li><li><code>hashCode()<\/code> must also be consistent (if the object is not modified in terms of <code>equals()<\/code>, it must keep returning the same value).<\/li><\/ul>\n\n\n\n<p>The relation between the two methods is:<\/p>\n\n\n\n<p>Whenever <code>a.equals(b)<\/code> then <code>a.hashCode()<\/code> must be the same as <code>b.hashCode()<\/code>.<\/p>\n\n\n\n<h2>12. what is the Difference between Deep Copy and Shallow Copy?<\/h2>\n\n\n\n<p>A clone is an exact copy of the original. In java, it essentially means the ability to create an object with a similar state as the original object. The <em>clone()<\/em> method provides this functionality.<\/p>\n\n\n\n<p><strong>Shallow copies<\/strong> duplicate as little as possible.&nbsp; <strong>By default, Java cloning is shallow copy or \u2018field by field copy\u2019<\/strong>. Because the Object class can not have any idea about the structure of class on which <em>clone()<\/em> method will be invoked, JVM when called for cloning, do the following things:<\/p>\n\n\n\n<ul><li>If the class has only primitive data type members then a completely new copy of the object will be created and the reference to the new object copy will be returned.<\/li><li>If the class contains members of any class type then only the object references to those members are copied and hence the member references in both the original object as well as the cloned object refer to the same object.<\/li><\/ul>\n\n\n\n<p><strong>Deep copies<\/strong> <strong>duplicate everything<\/strong>. A deep copy of a collection results in two collections with all of the elements in the original collection duplicated. Here, we want a clone that is independent of the original and making changes in the clone should not affect the original.<\/p>\n\n\n\n<p><em>Deep cloning requires the satisfaction of following rules.<\/em><\/p>\n\n\n\n<ol><li>No need to separately copy primitives.<\/li><li>All the member classes in original class should support cloning and in clone method of original class in context should call super.clone() on all member classes.<\/li><li>If any member class does not support cloning then in clone method, one must create a new instance of that member class and copy all its attributes one by one to new member class object. This new member class object will be set in cloned object.<\/li><\/ol>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read more: <a href=\"https:\/\/howtodoinjava.com\/java\/cloning\/a-guide-to-object-cloning-in-java\/\">Java clone \u2013 deep and shallow copy \u2013 copy constructors<\/a><\/p><\/blockquote>\n\n\n\n<h2>13. What is Synchronization? Explain Object-level Lock and Class-level Lock?<\/h2>\n\n\n\n<p><em><strong>Synchronization<\/strong> <\/em>refers to adding the thread-safety behavior in concurrent applications. <\/p>\n\n\n\n<p>Java supports executing multiple threads parallelly. This may cause two or more threads to access the same fields or objects. Synchronization is a process that keeps all concurrent threads in execution to be in synch. Synchronization avoids memory consistency errors caused due to inconsistent views of shared memory. <\/p>\n\n\n\n<p>When a method is declared as <strong>synchronized<\/strong>; the thread holds the monitor for that method&#8217;s object If another thread is executing the synchronized method, your thread is blocked until that thread releases the monitor.<\/p>\n\n\n\n<p>Synchronization in Java is achieved using <code>synchronized<\/code> keyword. we can use <em>synchronized<\/em> keyword in our class on defined methods or blocks. Keywords can not be used with variables or attributes in the class definition.<\/p>\n\n\n\n<p><em><strong>Object-level locking is a <\/strong><\/em>mechanism when you want to synchronize a non-static method or non-static code block such that only one thread will be able to execute the code block on a given instance of the class. This should always be done to <strong>make instance-level data thread-safe<\/strong>.<\/p>\n\n\n\n<p><em><strong>Class-level locking<\/strong><\/em> prevents multiple threads to enter in <em>synchronized<\/em> block in any of all available instances on runtime. This means if in runtime there are 100 instances of&nbsp;a class, then only one thread will be able to execute a method in any one instance at a time, and all other instances will be locked for other threads. This should always be done to <strong>make static data thread-safe<\/strong>.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/object-vs-class-level-locking\/\">Object level lock vs Class level lock in Java<\/a><\/p><\/blockquote>\n\n\n\n<h2>14. Difference between <em>sleep()<\/em> and <em>wait()<\/em> Methods?<\/h2>\n\n\n\n<ul><li>The <em><strong>sleep()<\/strong><\/em> is used to hold the process for a few seconds or the time we passed as the method argument. But in the case of <strong>wait()<\/strong> method, the thread goes in a waiting state and it won&#8217;t come back automatically until another thread invokes the <em>notify()<\/em> or <em>notifyAll()<\/em>.<\/li><li>The major difference is that <strong><em>wait()<\/em> releases the lock while <em>sleep()<\/em> doesn&#8217;t release the lock or monitor while waiting.<\/strong><\/li><li><strong> <\/strong>The <em>wait()<\/em> is used for inter-thread communication while <em>sleep()<\/em> is used to introduce pause on execution, generally.<\/li><\/ul>\n\n\n\n<p>Thread.<em>sleep()<\/em> sends the current thread into the <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/java-thread-life-cycle-and-thread-states\/\">&#8220;<em>Not Runnable<\/em>&#8221; state<\/a> for some time. The thread keeps the monitors it has acquired &#8212; i.e. if the thread is currently in a <em>synchronized<\/em> block or method no other thread can enter this block or method. <\/p>\n\n\n\n<p>If another thread calls <em>t.interrupt()<\/em> it will wake up the sleeping thread. Note that sleep is a <em>static<\/em> method, which means that it always affects the current thread (the one that is executing the sleep method). <strong>A common mistake is to call <em>t.sleep()<\/em> where t is a different thread; even then, it is the current thread that will sleep, not the <em>t<\/em> thread.<\/strong><\/p>\n\n\n\n<p>The object.wait() sends the current thread into the &#8220;Not Runnable&#8221; state, like sleep(), but with a twist. The <strong>wait() is called on an object, not a thread<\/strong>; we call this object the &#8220;lock object.&#8221; <\/p>\n\n\n\n<p>Before <em>lock.wait()<\/em> is called, the current thread must synchronize on the lock object; <em>wait()<\/em> then releases this lock, and adds the thread to the &#8220;<em>waitlist<\/em>&#8221; associated with the lock. <\/p>\n\n\n\n<p>Later, another thread can synchronize on the same lock object and call <em>lock.notify()<\/em>. This wakes up the original, waiting thread. Basically, wait()\/notify() is like sleep()\/interrupt(), only the active thread does not need a direct pointer to the sleeping thread, but only to the shared lock object.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/sleep-vs-wait\/\">Difference between sleep() and wait() in Java<\/a><\/p><\/blockquote>\n\n\n\n<h2>15. Can We Assign &#8216;<em>null<\/em>&#8216; to &#8216;<em>this<\/em>&#8216; Reference Variable?<\/h2>\n\n\n\n<p>NO. We can&#8217;t. In java, left-hand side of an assignment statement must be a variable. &#8216;<em>this<\/em>&#8216; is a special keyword that represents the current instance always. This is not any variable.<\/p>\n\n\n\n<p>Similarly, <em>null<\/em> can not be assigned to &#8216;<em>super<\/em>&#8216; or any such keyword for that matter.<\/p>\n\n\n\n<h2>16. What is the Difference between &#8216;&amp;&amp;&#8217; and &#8216;&amp;&#8217; Operators??<\/h2>\n\n\n\n<p><code>&amp;<\/code> is <strong>bitwise operator<\/strong> and <code>&amp;&amp;<\/code> is <strong>logical comparison operator<\/strong>.<\/p>\n\n\n\n<ul><li><em>&amp;<\/em> evaluates both sides of the operation.<\/li><li><em>&amp;&amp;<\/em> evaluates the left side of the operation, if it&#8217;s <em>true<\/em>, it continues and evaluates the right side.<\/li><\/ul>\n\n\n\n<h2>17. Explain All Access Modifiers?<\/h2>\n\n\n\n<p>Java classes, fields, constructors and methods can have one of the four different access modifiers:<\/p>\n\n\n\n<p><strong>private<\/strong>: If a method or variable is marked as private, then only code inside the same class can access the variable, or call the method. Code inside subclasses cannot access the variable or method, nor can code from any external class.<br>If a class is marked as private then no external class can access the class. This doesn&#8217;t really make so much sense for classes though. Therefore, the access modifier private is mostly used for fields, constructors and methods.<\/p>\n\n\n\n<p><strong>default<\/strong>: The default access level is declared by not writing any access modifier at all. Default access levels means that code inside the class itself + code inside classes in the same package as this class, can access the class, field, constructor or method. Therefore, the default access modifier is also sometimes called a package access modifier.<\/p>\n\n\n\n<p>Subclasses cannot access methods and member variables in the superclass, if they have default accessibility declared, unless the subclass is located in the same package as the superclass.<\/p>\n\n\n\n<p><strong>protected<\/strong>: The protected access modifier does the same as the default access, except subclasses can also access protected methods and member variables of the superclass. This is true even if the subclass is not located in the same package as the superclass.<\/p>\n\n\n\n<p><strong>public<\/strong>: The public access modifier means that all code can access the class, field, constructor or method, regardless of where the accessing code is located.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"mtr-table mtr-tr-td\"><tbody><tr><td data-mtr-content=\"Modifiers\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong><em>Modifiers<\/em><\/strong><\/div><\/td><td data-mtr-content=\"Same Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><em>Same Class<\/em><\/div><\/td><td data-mtr-content=\"Same Package\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><em>Same Package<\/em><\/div><\/td><td data-mtr-content=\"Subclass\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><em>Subclass<\/em><\/div><\/td><td data-mtr-content=\"Other packages\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><em>Other packages<\/em><\/div><\/td><\/tr><tr><td data-mtr-content=\"Modifiers\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">public<\/div><\/td><td data-mtr-content=\"Same Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Same Package\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Subclass\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Other packages\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><\/tr><tr><td data-mtr-content=\"Modifiers\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">protected<\/div><\/td><td data-mtr-content=\"Same Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Same Package\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Subclass\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Other packages\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">N<\/div><\/td><\/tr><tr><td data-mtr-content=\"Modifiers\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">default<\/div><\/td><td data-mtr-content=\"Same Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Same Package\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Subclass\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">N<\/div><\/td><td data-mtr-content=\"Other packages\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">N<\/div><\/td><\/tr><tr><td data-mtr-content=\"Modifiers\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">private<\/div><\/td><td data-mtr-content=\"Same Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Y<\/div><\/td><td data-mtr-content=\"Same Package\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">N<\/div><\/td><td data-mtr-content=\"Subclass\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">N<\/div><\/td><td data-mtr-content=\"Other packages\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">N<\/div><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>18. What is Garbage Collection? Can We Enforce It?<\/h2>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/garbage-collection\/all-garbage-collection-algorithms\/\">Garbage collection<\/a> is an <strong>automatic memory management<\/strong> feature in many modern programming languages, such as Java and languages in the .NET framework. Languages that use garbage collection are often interpreted or run within a virtual machine like the JVM. <\/p>\n\n\n\n<p>In each case, the <strong>environment that runs the code is also responsible for garbage collection<\/strong>. A GC has two goals: any unused memory should be freed, and no memory should be freed unless the program will not use it anymore.<\/p>\n\n\n\n<p>Can you force garbage collection?? Nope, <em>System.gc()<\/em> is as close as you can get. Our best option is to call <em>System.gc()<\/em> which simply is a hint to the garbage collector that you want to invoke the garbage collection. <\/p>\n\n\n\n<p>There is no way to force an immediate collection though as the garbage collector is non-deterministic. Also, under the documentation for <strong>OutOfMemoryError<\/strong> it declares that it will not be thrown unless the VM has failed to reclaim memory following a full garbage collection. So if you keep allocating memory until you get the error, you will have already forced a full garbage collection.<\/p>\n\n\n\n<h2>19. What is &#8216;<em>native<\/em>&#8216; Keyword? Explain in Detail?<\/h2>\n\n\n\n<p>The <code>native<\/code> keyword is applied to a method to indicate that the <strong>method is implemented in native code using JNI<\/strong>. It marks a method, that it will be implemented in other languages, not in Java.<\/p>\n\n\n\n<p>Native methods were used in the past to write performance-critical sections but with Java getting faster this is now less common. Native methods are currently needed when<\/p>\n\n\n\n<ul><li>You need to call a library from Java that is written in other language.<\/li><li>You need to access system or hardware resources that are only reachable from the other language (typically C). Actually, many system functions that interact with real computer (disk and network IO, for instance) can only do this because they call native code.<\/li><\/ul>\n\n\n\n<p>The downsides of using native code libraries are also significant:<\/p>\n\n\n\n<ol><li>JNI \/ JNA have a tendency to destabilize the JVM, especially if you try to do something complicated. If your native code gets native code memory management wrong, there&#8217;s a chance that you will crash the JVM. If your native code is non-reentrant and gets called from more than one Java thread, bad things will happen &#8230; sporadically. And so on.<\/li><li>Java with native code is harder to debug than pure Java or pure C\/C++.<\/li><li>Native code can introduce significant platform dependencies \/ issues for an otherwise platform independent Java app.<\/li><li>Native code requires a separate build framework, and that may have platform \/ portability issues as well.<\/li><\/ol>\n\n\n\n<h2>20. What is Serialization? Explain the Catches?<\/h2>\n\n\n\n<p>In computer science, in the context of data storage and transmission, <strong>serialization is the process of translating data structures or object states into a format that can be stored and &#8220;resurrected&#8221; later in the same or another computer<\/strong> environment.\u00a0 When the resulting series of bits is reread according to the serialization format, it can be used to create a semantically identical clone of the original object.<\/p>\n\n\n\n<p>Java provides automatic serialization which requires that the object be marked by implementing the <code>java.io.Serializable<\/code> interface. Implementing the interface marks the class as &#8220;okay to serialize,&#8221; and Java then handles serialization internally. <\/p>\n\n\n\n<p>There are no serialization methods defined on the <em>Serializable<\/em> interface (<em>marker interface<\/em>), but a serializable class can optionally define methods with certain special names and signatures that if defined, will be called as part of the serialization\/deserialization process.<\/p>\n\n\n\n<p>Once an object is serialized, changes in its class break the <a href=\"https:\/\/howtodoinjava.com\/java\/serialization\/how-deserialization-process-happen-in-java\/\">de-serialization process<\/a>. To identify the future changes in your class which will be compatible and others that will prove incompatible, please read the <a href=\"https:\/\/howtodoinjava.com\/java\/serialization\/java-serialization\/\">full guide here<\/a>. In short, I am listing down here:<\/p>\n\n\n\n<p><strong>Incompatible changes<\/strong><\/p>\n\n\n\n<ul><li>Deleting fields<\/li><li>Moving classes up or down the hierarchy<\/li><li>Changing a non-static field to static or a non-transient field to transient<\/li><li>Changing the declared type of a primitive field<\/li><li>Changing the writeObject or readObject method so that it no longer writes or reads the default field data<\/li><li>Changing a class from Serializable to Externalizable or vice-versa<\/li><li>Changing a class from a non-enum type to an enum type or vice versa<\/li><li>Removing either Serializable or Externalizable<\/li><li>Adding the writeReplace or readResolve method to a class<\/li><\/ul>\n\n\n\n<p><strong>Compatible changes<\/strong><\/p>\n\n\n\n<ul><li>Adding fields<\/li><li>Adding\/ Removing classes<\/li><li>Adding writeObject\/readObject methods [defaultReadObject or defaultWriteObject should be called first]<\/li><li>Removing writeObject\/readObject methods<\/li><li>Adding java.io.Serializable<\/li><li>Changing the access to a field<\/li><li>Changing a field from static to non-static or transient to non transient<\/li><\/ul>\n\n\n\n<h2>21. Can we use HashMap in Concurrent Environment?<\/h2>\n\n\n\n<p>We know that <code>HashMap<\/code> is a non-synchronized collection whereas its synchronized counterpart is HashTable. <strong>We should not use HashMap in a concurrent environment<\/strong>.<\/p>\n\n\n\n<p>So, when you are accessing the collection in a multithreaded environment and all threads are accessing a single instance of collection, then it&#8217;s safer to use HashTable for various obvious reasons e.g. to avoid dirty reads and to maintain data consistency. In the worst case, this multithreaded environment can result in an infinite loop as well.<\/p>\n\n\n\n<h2>22. Explain Abstraction and Encapsulation? Their Differences?<\/h2>\n\n\n\n<h4>Abstraction<\/h4>\n\n\n\n<p><a href=\"\/\/howtodoinjava.com\/object-oriented\/understanding-abstraction-in-java\/\">Abstraction<\/a> captures only those details about an object that are relevant to the current perspective. In <a href=\"\/\/howtodoinjava.com\/object-oriented\/object-oriented-principles\/\">object-oriented programming<\/a> theory, abstraction involves the facility to define objects that represent abstract \u201cactors\u201d that can perform work, report on and change their state, and \u201ccommunicate\u201d with other objects in the system.<\/p>\n\n\n\n<p>Abstraction in any programming language works in many ways. It can be seen from creating subroutines to defining interfaces for making low-level language calls. Some abstractions try to limit the breadth of concepts a programmer needs, by completely hiding the abstractions they, in turn, are built on, e.g. design patterns.<\/p>\n\n\n\n<p>Typically abstraction can be seen in two ways:<\/p>\n\n\n\n<p><strong>Data abstraction<\/strong> is the way to create complex data types and expose only meaningful operations to interact with the data type, whereas hiding all the implementation details from outside works.<\/p>\n\n\n\n<p><strong>Control abstraction<\/strong> is the process of identifying all such statements and exposing them as a unit of work. We normally use this feature when we create a function to perform any work.<\/p>\n\n\n\n<h4>Encapsulation<\/h4>\n\n\n\n<p>Wrapping data and methods within classes in combination with implementation hiding (through access control) is often called encapsulation. The result is a data type with characteristics and behaviors. Encapsulation essentially has both i.e. information hiding and implementation hiding.<\/p>\n\n\n\n<p>\u201c<em><strong>Whatever changes, encapsulate it<\/strong><\/em>\u201c. It has been quoted as a famous design principle. For that matter in any class, changes can happen in data in runtime and changes in implementation can happen in future releases. So, encapsulation applies to both i.e. data as well as implementation.<\/p>\n\n\n\n<p>SO, they can relate like following :<\/p>\n\n\n\n<p>&#8211; Abstraction is more about \u2018What\u2018 a class can do. [Idea]<br>&#8211; Encapsulation is more about \u2018How\u2018 to achieve that functionality. [Implementation]<\/p>\n\n\n\n<h2>23. How StringBuffer saves the Memory?<\/h2>\n\n\n\n<p>A <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/lang\/String.html\">String<\/a> is implemented as an <a href=\"\/\/howtodoinjava.com\/java\/related-concepts\/how-to-make-a-java-class-immutable\/\">immutable object<\/a>; that is when you initially decide to put something into a <code>String<\/code> object, the JVM allocates a fixed-width array of exactly the size of your initial value. This is then treated as a constant inside the JVM, which allows for very significant performance savings in the case where the String&#8217;s value is not changed. <\/p>\n\n\n\n<p>However, if you decide to change the String&#8217;s contents in any way, what the JVM then essentially does is copy the contents of the original String into a temporary space, make your changes, then save those changes into a whole new memory array. Thus, making changes to a String&#8217;s value after initialization is a fairly expensive operation.<\/p>\n\n\n\n<p><a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/lang\/StringBuffer.html\">StringBuffer<\/a>, on the other hand, is <strong>implemented as a dynamically &#8211; growable array inside the JVM<\/strong>, which means that any update operation can occur on the existing memory location, with new memory allocated only as needed. <\/p>\n\n\n\n<p>However, there is no opportunity for the JVM to make optimizations around the <code>StringBuffer<\/code>, since its contents are assumed to be changeable at any instance.<\/p>\n\n\n\n<h2>24. Why <em>wait()<\/em> and <em>notify()<\/em> are Declared in Object instead of Thread?<\/h2>\n\n\n\n<p><a href=\"\/\/howtodoinjava.com\/java\/multi-threading\/how-to-work-with-wait-notify-and-notifyall-in-java\/\">Wait, notify, notifyAll methods<\/a> are only required when you want your threads to access a shared resource and a shared resource could be any java object which is on the heap. So, these methods are defined on the core Object class so that each object has control of allowing threads to wait on its monitor. <\/p>\n\n\n\n<p>Java doesn&#8217;t have any special object which is used for sharing a common resource. No such data structure is defined. So, the onus is given on the Object class to be able to become shared resource providing it will helper methods like <code>wait()<\/code>,<code>notify()<\/code> and <code>notifyAll()<\/code>.<\/p>\n\n\n\n<p>Java is based on <a href=\"https:\/\/en.wikipedia.org\/wiki\/Tony_Hoare\">Hoare<\/a>&#8216;s monitors idea. In Java, all object has a monitor. Threads wait on monitors so, to perform a wait, we need 2 parameters:<\/p>\n\n\n\n<p>&#8211; a Thread<br>&#8211; a monitor (any object)<\/p>\n\n\n\n<p>In the Java design, the thread can not be specified, it is always the current thread running the code. However, we can specify the monitor (which is the object we call wait on). This is a good design because if we could make any other thread to wait on the desired monitor, this would lead to an &#8220;intrusion&#8221;, posing difficulties in designing \/programming concurrent programs. <\/p>\n\n\n\n<p>Remember that in Java all operations that are intrusive in another thread&#8217;s execution are deprecated (e.g. <em>stop()<\/em>).<\/p>\n\n\n\n<h2>25. Write a Java Program to Create Deadlock, and Fix It ?<\/h2>\n\n\n\n<p>In java, a deadlock is a situation where a minimum of two threads are holding the lock on some different resource, and both are waiting for another resource to complete its task. And, none is able to leave the lock on the resource it is holding.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <a href=\"\/\/howtodoinjava.com\/java\/multi-threading\/writing-a-deadlock-and-resolving-in-java\/\">Writing a deadlock and resolving in java<\/a><\/p><\/blockquote>\n\n\n\n<h2>26. Explain <em>transient<\/em> and <em>volatile<\/em> Keywords?<\/h2>\n\n\n\n<h4>Transient<\/h4>\n\n\n\n<p>&#8220;<em>The <strong>transient<\/strong> keyword in Java is used to indicate that a field should not be serialized.<\/em>&#8221; According to language specification: Variables may be marked <code>transient<\/code> to indicate that they are not part of the persistent state of an object. For example, you may have fields that are derived from other fields, and should only be done so programmatically, rather than having the state be persisted via serialization.<\/p>\n\n\n\n<p>For example, in class <code>BankPayment.java<\/code> fields like <code>principal<\/code> and <code>rate<\/code> can be serialized while <code>interest<\/code> can be calculated any time even after de-serialization.<\/p>\n\n\n\n<p>If we recall, each thread in java has its own local memory space as well and it does all read\/write operations in its local memory. Once all operations are done, it write back the modified state of variable in the main memory from where all threads access this variable. <\/p>\n\n\n\n<p>Normally, this is the default flow inside JVM. But, the <code>volatile<\/code> modifier tells the JVM that a thread accessing the variable must always reconcile its own private copy of the variable with the master copy in memory. It means every time thread want to read the state of variable, it must flush its local memory state and update the variable from main memory.<\/p>\n\n\n\n<h4>Volatile<\/h4>\n\n\n\n<p><code>volatile<\/code> is most useful in lock-free algorithms. You mark the variable holding shared data as volatile when you are not using locking to access that variable and you want changes made by one thread to be visible in another, or you want to create a &#8220;happens-after&#8221; relation to ensure that computation is not re-ordered, again, to ensure changes become visible at the appropriate time.<\/p>\n\n\n\n<p>The <code>volatile<\/code> should be used to safely publish immutable objects in a multi-threaded Environment. Declaring a field like public <code>volatile<\/code> ImmutableObject foo secures that all threads always see the currently available instance reference.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Are you planning to learn core java? Or an interview is scheduled in the coming days? Do not worry and read all the Java interview questions given below to refresh your concepts and possibly have some new ones added to the list. 1. How to Create an Immutable Object in Java? An immutable class is &#8230; <a title=\"Core Java Interview Questions\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/interview-questions\/core-java-interview-questions\/\" aria-label=\"More on Core Java Interview Questions\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":808,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[15],"tags":[272],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value1.jpg",597,300,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value1-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value1-300x150.jpg",300,150,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value1.jpg",597,300,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value1.jpg",597,300,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value1.jpg",597,300,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value1.jpg",597,300,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2013\/03\/pass-by-value1.jpg",120,60,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":53,"uagb_excerpt":"Are you planning to learn core java? Or an interview is scheduled in the coming days? Do not worry and read all the Java interview questions given below to refresh your concepts and possibly have some new ones added to the list. 1. How to Create an Immutable Object in Java? An immutable class is&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/807"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=807"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/807\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/808"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=807"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=807"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=807"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}