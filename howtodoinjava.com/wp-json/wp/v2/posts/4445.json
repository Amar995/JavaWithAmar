{"id":4445,"date":"2015-01-20T12:39:38","date_gmt":"2015-01-20T12:39:38","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4445"},"modified":"2022-04-10T11:21:20","modified_gmt":"2022-04-10T05:51:20","slug":"how-to-create-a-new-file-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/io\/how-to-create-a-new-file-in-java\/","title":{"rendered":"Creating a New File in Java"},"content":{"rendered":"\n<p>Learn to <strong>create a new file<\/strong> using different techniques including <em>NIO Path<\/em>, IO <em>File<\/em>, <em>OutputStream,<\/em> and open-source libraries such as Guava and Apache commons.<\/p>\n\n\n\n<p>There are separate articles on <a href=\"https:\/\/howtodoinjava.com\/java\/io\/create-a-temporary-file-in-java\/\">creating temporary files<\/a> and <a href=\"https:\/\/howtodoinjava.com\/java\/io\/make-a-file-read-only-in-java\/\">making the file read-only<\/a>.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-7275e3de \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-create-new-file-using-java-nio\">1. Create New File using Java NIO<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#example-1-create-a-new-writable-file\">Example 1: Create a new writable file<\/a><li class=\"uagb-toc__list\"><a href=\"#example-2-create-a-new-read-only-file\">Example 2: Create a new read-only file<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#2-using-filecreatenewfile\">2. Using File.createNewFile()<\/a><li class=\"uagb-toc__list\"><a href=\"#3-using-fileoutputstream\">3. Using FileOutputStream<\/a><li class=\"uagb-toc__list\"><a href=\"#4-guava-filestouch\">4. Guava Files.touch()<\/a><li class=\"uagb-toc__list\"><a href=\"#5-apache-commons-ios-fileutils\">5. Apache Commons IO&#8217;s FileUtils<\/a><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"1-create-new-file-using-java-nio\">1. Create New File using Java NIO<\/h2>\n\n\n\n<p>The <em><a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/nio\/file\/Files.html#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)\" target=\"_blank\" rel=\"noreferrer noopener\">Files.createFile(path, attribs)<\/a><\/em> is the <strong>best way to create a new, empty and writable file<\/strong> in Java and it should be your preferred approach in the future if you are not already using it.<\/p>\n\n\n\n<ul><li>The <em>createFile()<\/em> method takes the <em>Path<\/em>&nbsp;interface instead of the <em>File<\/em>. It checks if the file already exists, and creates the file thereafter. <\/li><li>Checking any existing file and creating the file is done in a <strong>single atomic operation<\/strong>.<\/li><li>The <em>attribs<\/em> an optional list of file attributes to set atomically when creating the file.<\/li><li>It returns <a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/nio\/file\/FileAlreadyExistsException.html\"><em>FileAlreadyExistsException<\/em><\/a> If a file of that name already exists.<\/li><li>It returns <a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/io\/IOException.html\"><em>IOException<\/em><\/a> if an I\/O error occurs or the parent directory does not exist.<\/li><\/ul>\n\n\n\n<h3 id=\"example-1-create-a-new-writable-file\">Example 1: Create a new writable file<\/h3>\n\n\n\n<pre title=\"Create New Empty File\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String TEXT_FILE = \"C:\/temp\/io\/textFile.txt\";\n\nPath textFilePath = Paths.get(TEXT_FILE);\nFiles.createFile(textFilePath);<\/code><\/pre>\n\n\n\n<h3 id=\"example-2-create-a-new-read-only-file\">Example 2: Create a new read-only file<\/h3>\n\n\n\n<p>Set the file attributes while creating the file. In the given example, we are setting read-only (&#8220;<code>r<\/code>&#8220;) access for the <em>owner<\/em>, <em>group<\/em>, and <em>others<\/em> using the string <em>&#8220;r&#8211;r&#8211;r&#8211;&#8220;<\/em>.<\/p>\n\n\n\n<pre title=\"Create read only file\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String TEXT_FILE = \"C:\/temp\/io\/textFile.txt\";\n\nSet&lt;PosixFilePermission&gt; permissions = PosixFilePermissions\n  .fromString(\"r--r--r--\");\nFileAttribute&lt;Set&lt;PosixFilePermission&gt;&gt; attribs = PosixFilePermissions\n  .asFileAttribute(permissions);\n\nPath textFilePath = Paths.get(TEXT_FILE);\nFiles.createFile(textFilePath, attribs); <\/code><\/pre>\n\n\n\n<h2 id=\"2-using-file-createnewfile\">2. Using <em>File.createNewFile()<\/em><\/h2>\n\n\n\n<p>Use <code><a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/io\/File.html#createNewFile()\" target=\"_blank\" rel=\"noreferrer noopener\">File.createNewFile()<\/a><\/code> method to create a new file if and only if a file with this name does not yet exist. Checking any existing file and creating the file is an <strong>atomic operation<\/strong>.<\/p>\n\n\n\n<p>This method returns a boolean value &#8211;<\/p>\n\n\n\n<ul><li><code>true<\/code> if the file is created successfully.<\/li><li><code>false<\/code> if the file already exists.<\/li><li><code>IOException<\/code> If an I\/O error occurred.<\/li><\/ul>\n\n\n\n<pre title=\"Create new file with File class\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String TEXT_FILE = \"C:\/temp\/io\/textFile.txt\";\n\nFile textFile = new File(TEXT_FILE);\nboolean isFileCreated = textFile.createNewFile(); <\/code><\/pre>\n\n\n\n<h2 id=\"3-using-fileoutputstream\">3. Using FileOutputStream<\/h2>\n\n\n\n<p>The constructor automatically <strong>creates a new file<\/strong> in the given location. Note that if a file with a given name&nbsp;<strong>already exists, it will be overwritten<\/strong>.<\/p>\n\n\n\n<p>It throws <em>FileNotFoundException<\/em> if the given file path represents a directory, or a new file cannot be created for any reason.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String TEXT_FILE = \"C:\/temp\/io\/textFile.txt\";\n\ntry(FileOutputStream fos = new FileOutputStream(TEXT_FILE)){\n  \/\/ We can write data as byte[]\n  \/\/ fos.write(data, 0, data.length);\n}<\/code><\/pre>\n\n\n\n<h2 id=\"4-guava-files-touch\">4. Guava <em>Files.touch()<\/em><\/h2>\n\n\n\n<p>To include <a href=\"https:\/\/mvnrepository.com\/artifact\/com.google.guava\/guava\" target=\"_blank\" rel=\"noreferrer noopener\">Guava<\/a>, add the following to <em>pom.xml<\/em>.<\/p>\n\n\n\n<pre title=\"pom.xml\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;dependency&gt;\n    &lt;groupId&gt;com.google.guava&lt;\/groupId&gt;\n    &lt;artifactId&gt;guava&lt;\/artifactId&gt;\n    &lt;version&gt;31.1-jre&lt;\/version&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<p>The <em><a href=\"https:\/\/guava.dev\/releases\/31.1-jre\/api\/docs\/com\/google\/common\/io\/Files.html#touch(java.io.File)\" target=\"_blank\" rel=\"noreferrer noopener\">Files.touch()<\/a><\/em> method is similar to the <strong>Unix touch command<\/strong>. It creates an empty file or updates the last updated timestamp<\/p>\n\n\n\n<p>The <em>touch<\/em> command, when used without any option, creates an empty file assuming the file doesn&#8217;t exist. If the file exists it changes the timestamp.<\/p>\n\n\n\n<pre title=\"Touch the file in Unix style\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String TEXT_FILE = \"C:\/temp\/io\/textFile.txt\";\n\ncom.google.common.io.Files.touch(new File(TEXT_FILE));<\/code><\/pre>\n\n\n\n<h2 id=\"5-apache-commons-io-s-fileutils\">5. Apache Commons IO&#8217;s FileUtils<\/h2>\n\n\n\n<p>To include <a href=\"https:\/\/mvnrepository.com\/artifact\/commons-io\/commons-io\" target=\"_blank\" rel=\"noreferrer noopener\">Apache Commons IO<\/a>, add the following to <em>pom.xml<\/em>.<\/p>\n\n\n\n<pre title=\"pom.xml\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;dependency&gt;\n    &lt;groupId&gt;commons-io&lt;\/groupId&gt;\n    &lt;artifactId&gt;commons-io&lt;\/artifactId&gt;\n    &lt;version&gt;2.11.0&lt;\/version&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<p>The <em>FileUtils.touch()<\/em> is very similar to the previous example. It also implements the same behavior as the &#8220;touch&#8221; utility on Unix.&nbsp;<\/p>\n\n\n\n<p>Also, as from v1.3 this method <strong>creates parent directories if they do not exist<\/strong>. It throws an <em>IOException<\/em> if the last modified date of the file cannot be set.<\/p>\n\n\n\n<pre title=\"Touch the file with Apache Commons\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String TEXT_FILE = \"C:\/temp\/io\/textFile.txt\";\n\norg.apache.commons.io.FileUtils.touch(new File(TEXT_FILE));<\/code><\/pre>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Core-Java\/tree\/master\/src\/main\/java\/com\/howtodoinjava\/io\" target=\"_blank\" rel=\"noreferrer noopener\">Sourceocde on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Learn to create a new file using different techniques including NIO Files and Path, IO File, File OutputStream, and open-source libraries.<\/p>\n","protected":false},"author":2,"featured_media":20207,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[19],"tags":[1418,814],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-300x170.jpg",300,170,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-120x120.jpg",120,120,true]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn to create a new file using different techniques including NIO Files and Path, IO File, File OutputStream, and open-source libraries.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4445"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4445"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4445\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/20207"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4445"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4445"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4445"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}