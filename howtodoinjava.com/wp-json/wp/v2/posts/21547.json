{"id":21547,"date":"2022-06-25T16:28:24","date_gmt":"2022-06-25T10:58:24","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=21547"},"modified":"2022-06-25T16:28:25","modified_gmt":"2022-06-25T10:58:25","slug":"easymock-tutorial","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/library\/easymock-tutorial\/","title":{"rendered":"Getting Started with EasyMock and JUnit"},"content":{"rendered":"\n<p>Learn to use <strong><em>EasyMock<\/em><\/strong> to create test mocks, record and replay the expectations and verify method invocations on mocked instances. We will be setting up <em>EasyMock with JUnit<\/em> 4 and <a href=\"https:\/\/howtodoinjava.com\/junit-5-tutorial\/\">JUnit 5<\/a>, both.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-fbcc6c99 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-easymock-dependencies\">1. EasyMock Dependencies<\/a><li class=\"uagb-toc__list\"><a href=\"#2-test-steps-with-easymock\">2. Test Steps with EasyMock<\/a><li class=\"uagb-toc__list\"><a href=\"#3-setting-up-easymock-with-junit\">3. Setting Up EasyMock with JUnit<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-with-junit-4\">3.1. With JUnit 4<\/a><li class=\"uagb-toc__list\"><a href=\"#32-with-junit-5\">3.2. With JUnit 5<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#4-easymock-demo\">4. EasyMock Demo<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-system-under-test\">4.1. System Under Test<\/a><li class=\"uagb-toc__list\"><a href=\"#42-a-simple-test\">4.2. A Simple Test<\/a><li class=\"uagb-toc__list\"><a href=\"#43-a-test-using-using-annotations\">4.3. A Test using Using Annotations<\/a><li class=\"uagb-toc__list\"><a href=\"#44-a-test-using-using-easymocksupport\">4.4. A Test using Using EasyMockSupport<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#5-advance-concepts\">5. Advance Concepts<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#51-mock-vs-strict-mock-vs-nice-mock\">5.1. Mock vs Strict Mock vs Nice Mock<\/a><li class=\"uagb-toc__list\"><a href=\"#52-mocking-exceptions\">5.2. Mocking Exceptions<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#6-conclusion\">6. Conclusion<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. EasyMock Dependencies<\/h2>\n\n\n\n<p>Include the <a href=\"https:\/\/mvnrepository.com\/artifact\/org.easymock\/easymock\" target=\"_blank\" rel=\"noreferrer noopener\">latest version of easymock<\/a> from the Maven repository into the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency>\r\n    &lt;groupId>org.easymock&lt;\/groupId>\r\n    &lt;artifactId>easymock&lt;\/artifactId>\r\n    &lt;version>4.3&lt;\/version>\r\n    &lt;scope>test&lt;\/scope>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<h2>2. Test Steps with EasyMock<\/h2>\n\n\n\n<p><strong>EasyMock framework creates the mock objects using the <code>java.lang.reflect.Proxy<\/code><\/strong> object. When we create a mock object, during test execution, the proxy object takes the place of the real object. The proxy object gets its fields and methods from the interface or class we pass when creating the mock.<\/p>\n\n\n\n<p>A typical test with <strong>EasyMock has four stages<\/strong>: <em>create mock<\/em>, <em>expect<\/em>, <em>replay<\/em> and <em>verify<\/em>.<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><a href=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle.png\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-1024x627.png\" alt=\"\" class=\"wp-image-21548\" width=\"438\" height=\"268\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-1024x627.png 1024w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-300x184.png 300w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-768x470.png 768w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-1536x940.png 1536w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle.png 1746w\" sizes=\"(max-width: 438px) 100vw, 438px\" \/><\/a><\/figure><\/div>\n\n\n<ul><li><strong>Create Mock<\/strong>: Use <code>EasyMock.mock()<\/code> to create mocks of target classes whose behavior we want to delegate to the proxy objects. Generally, we mock the classes that interact with external systems or classes that should not be part of the test code.<\/li><li><strong>Record Expectations<\/strong>: Use <code>EasyMock.expect()<\/code> to record the expectations from the mock objects. These expectations include simulating a method with certain arguments, the return value of the invoked method and the number of times the method should be invoked.<\/li><li><strong>Replay<\/strong>: The <code>EasyMock.replay()<\/code> method makes the Mock object available. In <em>&#8216;replay&#8217;<\/em> mode, when the test invokes a recorded method then the mock will return the recorded results in the previous step.<\/li><li><strong>Verify<\/strong>: The <code>EasyMock.verify()<\/code> verifies that, during the test execution, all expectations were executed as recorded and that no unexpected call was performed on a mock.<\/li><\/ul>\n\n\n\n<p>We will see how to perform all these steps in <em>section 4<\/em>.<\/p>\n\n\n\n<h2>3. Setting Up EasyMock with JUnit<\/h2>\n\n\n\n<p>Before moving further, it is important to learn that we need to follow different approaches to run the tests on the basis underlying JUnit version is 4 or 5. So you can select one of the following solutions as per your project requirements.<\/p>\n\n\n\n<p>The following solutions are used to process <strong>@Mock<\/strong> and <strong>@TestSubject<\/strong> annotations in the test class. If we are not using these annotations, then we can skip using the following solutions.<\/p>\n\n\n\n<h3>3.1. With JUnit 4<\/h3>\n\n\n\n<p>The legacy JUnit 4 uses the <strong>EasyMockRunner<\/strong> class to run the tests. Note that this runner only works with JUnit 4.5 or higher.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@RunWith(EasyMockRunner.class)\r\npublic class EasyMockTests {\r\n\r\n}<\/code><\/pre>\n\n\n\n<p>In JUnit 4, we can also use the <strong>EasyMockRule<\/strong> instead of EasyMockRunner, with the same effect.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class EasyMockTests {\r\n\r\n\t@Rule\r\n\tpublic EasyMockRule mockRule = new EasyMockRule(this);\r\n\r\n}<\/code><\/pre>\n\n\n\n<h3>3.2. With JUnit 5<\/h3>\n\n\n\n<p>In JUnit 5, Rules can&#8217;t be used anymore. The new JUnit 5 uses the <strong>EasyMockExtension<\/strong> class to run the tests. Since EasyMock 4.1, EasyMock ships with this JUnit 5 extension out of the box.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@ExtendWith(EasyMockExtension.class)\r\npublic class EasyMockTests {\r\n\r\n}<\/code><\/pre>\n\n\n\n<h2>4. EasyMock Demo<\/h2>\n\n\n\n<p>Let&#8217;s understand all the steps in easymock with an example. We will first a few classes and the dependencies to mock, then we will write a test for it.<\/p>\n\n\n\n<h3>4.1. System Under Test<\/h3>\n\n\n\n<p>We have a <code>RecordService<\/code> class that can be used to save <em>Record<\/em> data in a backend database. The <em>RecordService<\/em> is dependent on <code>RecordDao<\/code> to interact with database and <code>SequenceGenerator<\/code> to get the next valid sequence number used as <em>Record<\/em> id.<\/p>\n\n\n\n<pre title=\"Record.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Data\r\n@NoArgsConstructor\r\npublic class Record {\r\n  public Record(String name) {\r\n    this.name = name;\r\n  }\r\n\r\n  private long id;\r\n  private String name;\r\n}<\/code><\/pre>\n\n\n\n<pre title=\"SequenceGenerator.jabva\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Log\r\npublic class SequenceGenerator {\r\n  private long value = 1;\r\n\r\n  public long getNext() {\r\n    log.info(\"Get Next Id in SequenceGenerator\");\r\n    return value++;\r\n  }\r\n}<\/code><\/pre>\n\n\n\n<pre title=\"RecordDao.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Log\r\npublic class RecordDao {\r\n\r\n  public Record saveRecord(Record record) {\r\n    log.info(\"Saving Record in RecordDao\");\r\n    return record;\r\n  }\r\n}<\/code><\/pre>\n\n\n\n<pre title=\"RecordService.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Log\r\npublic class RecordService {\r\n  private final RecordDao dao;\r\n  private final SequenceGenerator generator;\r\n\r\n  public RecordService(SequenceGenerator generator, RecordDao dao) {\r\n    this.generator = generator;\r\n    this.dao = dao;\r\n  }\r\n\r\n  public Record saveRecord(Record record) {\r\n    log.info(\"Saving Record in RecordService\");\r\n    record.setId(generator.getNext());\r\n    return dao.saveRecord(record);\r\n  }\r\n}<\/code><\/pre>\n\n\n\n<h3>4.2. A Simple Test<\/h3>\n\n\n\n<p>In the given test, we are testing the <code>RecordService.saveRecord()<\/code> method. The service depends on <em>RecordDao<\/em> and <em>SequenceGenerator<\/em>. The Dao interacts with database and sequence generator also interacts with database to fetch the next <em>record id<\/em>. We need to <strong>mock both dependencies<\/strong> as they are out of scope for this testcase.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Prepare mocks\r\nRecordDao mockDao = EasyMock.mock(RecordDao.class);\r\nSequenceGenerator mockGenerator = EasyMock.mock(SequenceGenerator.class);<\/code><\/pre>\n\n\n\n<p>The next step is to <strong>record expectations in both mocks<\/strong>. In the following lines, we are setting expectations of method invocations in both mocks, what value to return if method is invoked and how many times the method is expected to be invoked.<\/p>\n\n\n\n<p><em>We can <a href=\"https:\/\/easymock.org\/user-guide.html#verification-expectations\">flexible matchers<\/a> such as anyObject(), isA(), notNull() etc to write expectations that match a number of arguments. But we must return a concrete value from the result matchers such as andReturn() or andThrow() methods.<\/em><\/p>\n\n\n\n<p>The invocation count is mentioned using <em>once()<\/em>, <em>times(exactCount)<\/em>, <em>times(min, max)<\/em>, <em>atLeastOnce()<\/em> and <em>anyTimes()<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Record record = new Record();\r\nrecord.setName(\"Test Record\");\r\n\r\nexpect(mockGenerator.getNext()).andReturn(100L).once();\r\nexpect(mockDao.saveRecord(EasyMock.anyObject(Record.class)))\r\n        .andReturn(record).once()<\/code><\/pre>\n\n\n\n<p>To put the test execution in <strong>replay mode<\/strong>, we can use replay the mocks either one by one or combine all mocks in a single replay call.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">replay(mockGenerator, mockDao);\r\n\r\n\/\/or\r\n\r\nreplay(mockGenerator);\r\nreplay(mockDao);<\/code><\/pre>\n\n\n\n<p>If we do not want to keep track of all mocks in the test, we can use <strong>EasyMockSupport<\/strong> to replay all mocks at once.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class MockEasyTests {\r\n\tEasyMockSupport support = new EasyMockSupport();\r\n\r\n\t@Test\r\n\tpublic void test() {\r\n\t\t\/\/...\r\n\t\tsupport.replayAll();\r\n\t\t\/\/...\r\n\t}\r\n}<\/code><\/pre>\n\n\n\n<p>In the replay mode, we <strong>perform the operation in the system under test<\/strong>. This shall invoke the recorded methods in expectations and return values from mock objects.<\/p>\n\n\n\n<p>Finally, we <strong>verify the mocks<\/strong> that all expectations were met and no unexpected call happened on the mock objects. The syntax of <em>verify()<\/em> is similar to <em>replay()<\/em> method. Use one of the following options to trigger verification of mocks.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">verify(mockGenerator, mockDao);\r\n\r\n\/\/or\r\n\r\nverify(mockGenerator);\r\nverify(mockDao);\r\n\r\n\/\/or\r\n\r\nEasyMockSupport support = new EasyMockSupport();\r\nsupport.verifyAll();<\/code><\/pre>\n\n\n\n<p>A complete example of the testcase, involving all the above steps, is as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class EasyMockTests {\r\n\r\n  @Test\r\n  public void whenSaveCorrectRecord_ItSavedSuccessfully() {\r\n    \/\/Prepare mocks\r\n    RecordDao mockDao = EasyMock.mock(RecordDao.class);\r\n    SequenceGenerator mockGenerator = EasyMock.mock(SequenceGenerator.class);\r\n\r\n    Record record = new Record();\r\n    record.setName(\"Test Record\");\r\n\r\n    \/\/Set expectations\r\n    \/\/expect(mockGenerator.getNext()).andReturn(100L).once();\r\n    mockGenerator.getNext();\r\n    expectLastCall().andReturn((long) 100);\r\n    expect(mockDao.saveRecord(EasyMock.anyObject(Record.class)))\r\n        .andReturn(record).once();\r\n\r\n    \/\/Replay\r\n    replay(mockGenerator, mockDao);\r\n\r\n    \/\/Test and assertions\r\n    RecordService service = new RecordService(mockGenerator, mockDao);\r\n    Record savedRecord = service.saveRecord(record);\r\n\r\n    assertEquals(\"Test Record\", savedRecord.getName());\r\n    assertEquals(100L, savedRecord.getId());\r\n\r\n    \/\/Verify\r\n    verify(mockGenerator, mockDao);\r\n  }\r\n}<\/code><\/pre>\n\n\n\n<h3>4.3. A Test using Using Annotations<\/h3>\n\n\n\n<p>The previous example directly the <code>mock()<\/code> method to create mocks and then inject the mocks into the <em>RecordService<\/em> class. We can use <strong>@Mock<\/strong> and <strong>@TestSubject<\/strong> annotations to do this declaratively.<\/p>\n\n\n\n<p>Note that all other steps i.e. recording expectations, replaying and verifying do not change. <strong>Only mocking is affected by this change.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@ExtendWith(EasyMockExtension.class)\r\npublic class EasyMockTestsWithAnnotationsJUnit5 {\r\n\r\n\t@Mock\r\n\tRecordDao mockDao;\r\n\r\n\t@Mock\r\n\tSequenceGenerator mockGenerator;\r\n\r\n\t@TestSubject\r\n\tRecordService service = new RecordService(mockGenerator, mockDao);\r\n\r\n\t@Test\r\n\tpublic void whenSaveCorrectRecord_ItSavedSuccessfully() {\r\n\t\t\/\/test code\r\n\t}\r\n}<\/code><\/pre>\n\n\n\n<h3>4.4. A Test using Using EasyMockSupport<\/h3>\n\n\n\n<p>Apart from creating the instance of <code>EasyMockSupport<\/code>, we can extend the test class from <em>EasyMockSupport<\/em>. In this way, we can directly access the <em>replayAll()<\/em> and <em>verifyAll()<\/em> methods.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@ExtendWith(EasyMockExtension.class)\r\npublic class EasyMockTestsWithEasyMockSupport extends EasyMockSupport {\n\r\n\t@Test\r\n\tpublic void whenSaveCorrectRecord_ItSavedSuccessfully() {\r\n\t\t\/\/create mock\r\n\t\t\/\/record expecations\r\n\r\n\t\treplayAll();\r\n\r\n\t\t\/\/test operation\r\n\r\n\t\tverifyAll();\r\n\t}\r\n}<\/code><\/pre>\n\n\n\n<h2>5. Advance Concepts<\/h2>\n\n\n\n<h3>5.1. Mock vs Strict Mock vs Nice Mock<\/h3>\n\n\n\n<p><code>EasyMock<\/code> supports three types of mock objects. Use the following methods to create mocks:<\/p>\n\n\n\n<ul><li><code>EasyMock.mock()<\/code><\/li><li><code>EasyMock.strictMock()<\/code><\/li><li><code>EasyMock.niceMock()<\/code><\/li><\/ul>\n\n\n\n<p>We can also use <code>EasyMock.createMock()<\/code> method to create these mocks:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Default Mock\r\nEasyMock.createMock(RecordDao.class);\r\n\/\/---or---\r\nEasyMock.createMock(MockType.DEFAULT, RecordDao.class);\r\n\r\n\/\/Nice Mock\r\nEasyMock.createMock(MockType.NICE, RecordDao.class);\r\n\r\n\/\/Strict Mock\r\nEasyMock.createMock(MockType.STRICT, RecordDao.class);<\/code><\/pre>\n\n\n\n<p>The behavior of these mocks is different when verifying the recorded expectations.<\/p>\n\n\n\n<ul><li><strong>Default Mock<\/strong>: A test fails if a method is called that is not expected or if a method that is expected is not called. Order of method calls does not matter.<\/li><li><strong>Nice Mock<\/strong>: A test fails if a method is expected but not called. Methods that are called but are not expected are returned with a type-appropriate default value (<em>0<\/em>, <em>null<\/em> or <em>false<\/em>). Order of method calls does not matter.<\/li><li><strong>Strict Mock<\/strong>: Similar to default mock except the order of method calls does matter.<\/li><\/ul>\n\n\n\n<p>Note that for mocks created by <code>mock()<\/code> and <code>strictMock()<\/code>, any unexpected method call would cause an <code>AssertionError<\/code>.<\/p>\n\n\n\n<p>The <code>niceMock()<\/code> allows any unexpected method calls on the mock without failing the test when the method returns a type-appropriate default value.<\/p>\n\n\n\n<h3>5.2. Mocking Exceptions<\/h3>\n\n\n\n<p>In order to be able to test that a method throws the appropriate exceptions when required, a mock object must be able to throw an exception when called.<\/p>\n\n\n\n<p>Use <strong>andThrow()<\/strong> method to record the expectation of an exception class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">EasyMock.expect(...)\r\n   .andThrow(new IOException());<\/code><\/pre>\n\n\n\n<h2>6. Conclusion<\/h2>\n\n\n\n<p>In this <strong>EasyMock tutorial<\/strong>, we learned to configure easymock with Junit and execute the tests under junit 4 and junit 5 platforms. We learned the basic concepts of testing with easymock, including test steps such as mock, expect, replay and verify.<\/p>\n\n\n\n<p>Finally, we learned to write a complete test with an example.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Spring-Boot-Examples\/tree\/master\/Testing-Libraries\">Sourcecode on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Learn to use EasyMock with JUnit 4 and 5 to create test mocks, record and replay the expectations and verify method invocations on mocks.<\/p>\n","protected":false},"author":2,"featured_media":21548,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[1566,1562,1471],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle.png",1746,1069,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-300x184.png",300,184,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-768x470.png",768,470,true],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-1024x627.png",1024,627,true],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-1536x940.png",1536,940,true],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle.png",1746,1069,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-120x120.png",120,120,true]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn to use EasyMock with JUnit 4 and 5 to create test mocks, record and replay the expectations and verify method invocations on mocks.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/21547"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=21547"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/21547\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/21548"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=21547"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=21547"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=21547"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}