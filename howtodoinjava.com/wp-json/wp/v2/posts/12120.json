{"id":12120,"date":"2018-11-14T13:34:31","date_gmt":"2018-11-14T08:04:31","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=12120"},"modified":"2022-01-30T00:05:30","modified_gmt":"2022-01-29T18:35:30","slug":"java-naming-conventions","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/java-naming-conventions\/","title":{"rendered":"Java Naming Conventions"},"content":{"rendered":"\n<p><strong>Java naming conventions<\/strong> are sort of guidelines that application programmers are expected to follow to produce consistent and readable code throughout the application. If teams do not follow these conventions, they may collectively write an application code that is hard to read and difficult to understand.<\/p>\n\n\n\n<p>Java heavily uses <a href=\"https:\/\/en.wikipedia.org\/wiki\/Camel_case\" target=\"_blank\" rel=\"noopener noreferrer\">Camel Case<\/a> notations for naming the methods, variables etc. and <a href=\"https:\/\/en.wikipedia.org\/wiki\/Letter_case\" target=\"_blank\" rel=\"noopener noreferrer\">TitleCase<\/a> notations for <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-classes-objects\/\" target=\"_blank\" rel=\"noopener noreferrer\">classes<\/a> and interfaces.<\/p>\n\n\n\n<p>Let&#8217;s understand these naming conventions in detail with examples.<\/p>\n\n\n\n<h2 id=\"1-naming-packages\">1. Naming Packages<\/h2>\n\n\n\n<p>Package names must be a group of words starting with all lowercase domain names (e.g. com, org, net, etc). Subsequent parts of the package name may be different according to an organization\u2019s own internal naming conventions.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">package com.howtodoinjava.webapp.controller;\n\npackage com.company.myapplication.web.controller;\n\npackage com.google.search.common;<\/code><\/pre>\n\n\n\n<h2 id=\"2-naming-classes\">2. Naming Classes<\/h2>\n\n\n\n<p>In Java, class names generally should be <strong>nouns<\/strong>, in title-case with the first letter of each separate word capitalized. e.g.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class ArrayList {}\n\npublic class Employee {}\n\npublic class Record {}\n\npublic class Identity {}<\/code><\/pre>\n\n\n\n<h2 id=\"3-naming-interfaces\">3. Naming Interfaces<\/h2>\n\n\n\n<p>In Java, interfaces names, generally, should be <strong>adjectives<\/strong>. Interfaces should be in the title case with the first letter of each separate word capitalized. In some cases, interfaces can be <strong>nouns<\/strong> as well when they present a family of classes e.g. <code>List<\/code> and <code>Map<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public interface Serializable {}\n\npublic interface Clonable {}\n\npublic interface Iterable {}\n\npublic interface List {}<\/code><\/pre>\n\n\n\n<h2 id=\"4-naming-methods\">4. Naming Methods<\/h2>\n\n\n\n<p>Methods always should be <strong>verbs<\/strong>. They represent action and the method name should clearly state the action they perform. The method name can be single or 2-3 words as needed to clearly represent the action. Words should be in camel case notation.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public Long getId() {}\n\npublic void remove(Object o) {}\n\npublic Object update(Object o) {}\n\npublic Report getReportById(Long id) {}\n\npublic Report getReportByName(String name) {}<\/code><\/pre>\n\n\n\n<h2 id=\"5-naming-variables\">5. Naming Variables<\/h2>\n\n\n\n<p>All instance, static and method parameter variable names should be in camel case notation. They should be short and enough to describe their purpose. Temporary variables can be a single character e.g. the counter in the loops.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public Long id;\n\npublic EmployeeDao employeeDao;\n\nprivate Properties properties;\n\nfor (int i = 0; i &lt; list.size(); i++) {\n\n}<\/code><\/pre>\n\n\n\n<h2 id=\"6-constant-naming-conventions\">6. Constant Naming Conventions<\/h2>\n\n\n\n<p>Java constants should be all <strong>UPPERCASE<\/strong> where words are separated by <strong>underscore<\/strong> character (&#8220;_&#8221;). Make sure to use the <em>final<\/em> modifier with constant variables.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public final String SECURITY_TOKEN = \"...\";\n\npublic final int INITIAL_SIZE = 16;\n\npublic final Integer MAX_SIZE = Integer.MAX;<\/code><\/pre>\n\n\n\n<h2 id=\"7-naming-generic-types\">7. Naming Generic Types<\/h2>\n\n\n\n<p>Generic type parameter names should be uppercase single letters. The letter <code>'T'<\/code> for type is typically recommended. In JDK classes, <code>E<\/code> is used for collection elements, <code>S<\/code> is used for service loaders, and <code>K and V<\/code> are used for map keys and values.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public interface Map &lt;K,V> {}\n\npublic interface List&lt;E> extends Collection&lt;E> {}\n\nIterator&lt;E> iterator() {}<\/code><\/pre>\n\n\n\n<h2 id=\"8-naming-enums\">8. Naming Enums<\/h2>\n\n\n\n<p>Similar to class constants, enumeration names should be all uppercase letters.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">enum Direction {NORTH, EAST, SOUTH, WEST}<\/code><\/pre>\n\n\n\n<h2 id=\"9-naming-annotations\">9. Naming Annotations<\/h2>\n\n\n\n<p>Annotation names follow title case notation. They can be adjectives, verbs, or nouns based on the requirements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public @interface FunctionalInterface {}\n\npublic @interface Deprecated {}\n\npublic @interface Documented {}\n\npublic @Async Documented {\n\npublic @Test Documented {}<\/code><\/pre>\n\n\n\n<p>In this post, we discussed the <strong>naming conventions in Java<\/strong> to be followed for consistent writing of code which makes the code more readable and maintainable.<\/p>\n\n\n\n<p>Naming conventions are probably the first <a href=\"https:\/\/howtodoinjava.com\/java-best-practices\/\">best practice<\/a> to follow while writing clean code in any programming language.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java naming conventions are sort of guidelines that application programmers are expected to follow to produce consistent and readable code throughout the application. If teams do not follow these conventions, they may collectively write an application code that is hard to read and difficult to understand. Java heavily uses Camel Case notations for naming the &#8230; <a title=\"Java Naming Conventions\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-naming-conventions\/\" aria-label=\"More on Java Naming Conventions\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4758,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[3,4],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":7,"uagb_excerpt":"Java naming conventions are sort of guidelines that application programmers are expected to follow to produce consistent and readable code throughout the application. If teams do not follow these conventions, they may collectively write an application code that is hard to read and difficult to understand. Java heavily uses Camel Case notations for naming the&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12120"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=12120"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12120\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4758"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=12120"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=12120"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=12120"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}