{"id":528,"date":"2012-12-07T03:06:01","date_gmt":"2012-12-06T21:36:01","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=528"},"modified":"2020-12-26T01:08:57","modified_gmt":"2020-12-25T19:38:57","slug":"enum-tutorial","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/","title":{"rendered":"Java enum tutorial"},"content":{"rendered":"<p><strong>Java enum<\/strong>, also called Java <strong>enumeration type<\/strong>, is a type whose fields consist of a <strong>fixed set of constants<\/strong>. The very purpose of enum is to <strong>enforce compile time type safety<\/strong>. <code>enum<\/code> keyword is reserved keyword in Java.<\/p>\n<p>We should use enum when we know all possible values of a variable at compile time or design time, though we can add more values in future as and when we identify them. In this <em>java enum tutorial<\/em>, we will learn what enums are and what problems they solve?<\/p>\n<pre>Table of Contents\r\n\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/#what_is_enum\">1. What is enum in Java<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/#constructors\">2. enum constructors<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/#enum-methods\">3. enum methods<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/#enum-extends\">4. enum inheritance<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/#compare-enums\">5. Compare enums<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/#collections\">6. EnumMap and EnumSet<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/#notes\">7. Summary<\/a><\/pre>\n<p><a name=\"what_is_enum\"><\/a><\/p>\n<h2>1. enum in Java<\/h2>\n<p><a title=\"Enumeration\" href=\"https:\/\/en.wikipedia.org\/wiki\/Enumeration\">Enumerations<\/a> (in general) are generally a set of related constants. They have been in other programming languages like C++ from beginning. After JDK 1.4, Java designers decided to support it in Java also, and it was <strong>officially released in JDK 1.5 release.<\/strong><\/p>\n<p><strong>Enumeration in Java<\/strong> is supported by keyword <code>enum<\/code>. enums are a special type of class that always extends <a title=\"java.lang.Enum\" href=\"https:\/\/docs.oracle.com\/javase\/10\/docs\/api\/java\/lang\/Enum.html\">java.lang.Enum<\/a>. <\/p>\n<h2>1.1. enum is reserved keyword<\/h2>\n<p><code>enum<\/code> in Java is reserved keyword. It means you cannot define a variable of name <code>enum<\/code>. e.g. It will result in compile time error <code>\"invalid VariableDeclaratorId\"<\/code>.<\/p>\n<figure id=\"attachment_11107\" aria-describedby=\"caption-attachment-11107\" style=\"width: 534px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/enum-is-reserved-keyword.png\" alt=\"enum is reserved keyword\" width=\"544\" height=\"174\" class=\"size-full wp-image-11107\" \/><figcaption id=\"caption-attachment-11107\" class=\"wp-caption-text\">enum is reserved keyword<\/figcaption><\/figure>\n<h4>1.2. Java enum declaration<\/h4>\n<p>A simple example to <strong>create enum<\/strong>. As we know, generally we deal with four directions in daily life. Their names, angles and other properties are fixed. So, in programs, we can create enum for them. <strong>Syntax<\/strong> to create an enum is as below:<\/p>\n<pre class=\"brush: java; title: Direction.java; notranslate\" title=\"Direction.java\">\r\npublic enum Direction \r\n{\r\n   EAST, WEST, NORTH, SOUTH;\r\n}<\/pre>\n<p>Logically, <strong>each enum is an instance of enum type<\/strong> itself. So given enum can be seen as below declaration. <strong>JVM internally adds ordinal and value methods<\/strong> to this class which we can call while working with enum.<\/p>\n<pre class=\"brush: java; title: Direction.java; notranslate\" title=\"Direction.java\">\r\nfinal class Direction extends Enum&amp;lt;Direction&amp;gt; \r\n{\r\n    public final static Direction EAST = new Direction();\r\n    public final static Direction WEST = new Direction();\r\n    public final static Direction NORTH = new Direction();\r\n    public final static Direction SOUTH = new Direction();\r\n}\r\n<\/pre>\n<h4>1.3. Java enum example<\/h4>\n<p>We can use the enum just like we use <code>final<\/code> <code>static<\/code> class fields.<\/p>\n<pre class=\"brush: java; title: EnumExample.java; notranslate\" title=\"EnumExample.java\">\r\npublic class EnumExample \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Direction north = Direction.NORTH;\r\n        \r\n        System.out.println(north);        \/\/Prints NORTH\r\n    }\r\n}\r\n<\/pre>\n<h4>1.4. enum ordinal()<\/h4>\n<p>The <code>ordinal()<\/code> method returns the order of an enum instance. It represents the <strong>sequence in the enum declaration<\/strong>, where the initial constant is assigned an ordinal of <code>'0'<\/code>. It is very much like <strong>array indexes<\/strong>.<\/p>\n<p>It is designed for use by sophisticated enum-based data structures, such as <code>EnumSet<\/code> and <code>EnumMap<\/code>.<\/p>\n<pre class=\"brush: java; title: enum ordinal; notranslate\" title=\"enum ordinal\">\r\nDirection.EAST.ordinal();     \/\/0\r\n\r\nDirection.NORTH.ordinal();    \/\/2\r\n<\/pre>\n<h4>1.5. enum values() and valueOf()<\/h4>\n<p>The <strong>enum values()<\/strong> method returns all the enum values in an <strong>enum array<\/strong>.<\/p>\n<pre class=\"brush: java; title: enum values(); notranslate\" title=\"enum values()\">\r\nDirection[] directions = Direction.values();\r\n\r\nfor (Direction d : directions) {\r\n    System.out.println(d);\r\n}\r\n\r\n\/\/Output:\r\n\r\nEAST\r\nWEST\r\nNORTH\r\nSOUTH\r\n<\/pre>\n<p>The <strong>enum valueOf()<\/strong> method helps to <strong>convert string to enum<\/strong> instance.<\/p>\n<pre class=\"brush: java; title: enum valueOf(); notranslate\" title=\"enum valueOf()\">\r\nDirection east = Direction.valueOf(&amp;quot;EAST&amp;quot;);\r\n        \r\nSystem.out.println(east);\r\n\r\n\/\/Output:\r\n\r\nEAST\r\n<\/pre>\n<h4>1.6. enum naming convention<\/h4>\n<p>By convention, enums are <strong>constants<\/strong>. In Java, constants are defined in all <strong>UPPER_CASE<\/strong> letters. This follows are enums also. <\/p>\n<ul>\n<li>enum name should be in <a href=\"https:\/\/howtodoinjava.com\/java\/string\/convert-string-to-titlecase\/\">title case<\/a> (same as class names).<\/li>\n<li>enum fields should be in all UPPER CASE (same as static final constants).<\/li>\n<\/ul>\n<p><a name=\"constructors\"><\/a><\/p>\n<h2>2. enum constructors<\/h2>\n<p>By default, <strong>enums don&#8217;t require constructor<\/strong> definitions and their default values are always the string used in the declaration. Though, you can give define your own constructors to initialize the state of enum types.<\/p>\n<p>For example, we can add <code>angle<\/code> attribute to direction. All directions have some angle. So let&#8217;s add them.<\/p>\n<pre class=\"brush: java; title: enum with constructor; notranslate\" title=\"enum with constructor\">\r\npublic enum Direction \r\n{\r\n    \/\/ enum fields\r\n    EAST(0), WEST(180), NORTH(90), SOUTH(270);\r\n\r\n    \/\/ constructor\r\n    private Direction(final int angle) {\r\n        this.angle = angle;\r\n    }\r\n\r\n    \/\/ internal state\r\n    private int angle;\r\n\r\n    public int getAngle() {\r\n        return angle;\r\n    }\r\n}\r\n<\/pre>\n<p>If we want to access angle for any direction, we can make a simple method call in enum field reference.<\/p>\n<pre class=\"brush: java; title: EnumExample.java; notranslate\" title=\"EnumExample.java\">\r\nDirection north = Direction.NORTH;\r\n        \r\nSystem.out.println( north );                      \/\/NORTH\r\n\r\nSystem.out.println( north.getAngle() );           \/\/90\r\n\r\nSystem.out.println( Direction.NORTH.getAngle() ); \/\/90\r\n<\/pre>\n<p><a name=\"enum-methods\"><\/a><\/p>\n<h2>3. enum methods<\/h2>\n<p>Remember that enum is basically a special class type, and can have methods and fields just like any other class. You can add methods which are <strong>abstract<\/strong> as well as <strong>concrete methods<\/strong> as well. Both methods are allowed in enum.<\/p>\n<h4>3.1. concrete methods in enum<\/h4>\n<p>Adding a concrete method in enum is similar to add same method in any other class. You can use any access specifier e.g. <code>public<\/code>, <code>private<\/code> or <code>protected<\/code>. You can return values from enum methods or simply use them to perform internal logic.<\/p>\n<pre class=\"brush: java; highlight: [18]; title: enum - non-abstract method; notranslate\" title=\"enum - non-abstract method\">\r\npublic enum Direction \r\n{\r\n    \/\/ enum fields\r\n    EAST, WEST, NORTH, SOUTH;\r\n    \r\n    protected String printDirection() \r\n    {\r\n        String message = &amp;quot;You are moving in &amp;quot; + this + &amp;quot; direction&amp;quot;;\r\n        System.out.println( message );\r\n        return message;\r\n    }\r\n}\r\n<\/pre>\n<p>You can call <code>printDirection()<\/code> method as simple method calls on <strong>enum instance<\/strong>.<\/p>\n<pre class=\"brush: java; title: EnumExample.java; notranslate\" title=\"EnumExample.java\">\r\nDirection.NORTH.printDirection(); \/\/You are moving in NORTH direction\r\n        \r\nDirection.EAST.printDirection();  \/\/You are moving in EAST direction\r\n<\/pre>\n<h4>3.2. abstract methods in enum<\/h4>\n<p>We can add <strong>abstract method in enums<\/strong>. In this case, we must <strong>implement the abstract method at each enum field<\/strong>, individually.<\/p>\n<pre class=\"brush: java; highlight: [33]; title: ; notranslate\" title=\"\">\r\npublic enum Direction \r\n{\r\n    \/\/ enum fields\r\n    EAST {\r\n        @Override\r\n        public String printDirection() {\r\n            String message = &amp;quot;You are moving in east. You will face sun in morning time.&amp;quot;;\r\n            return message;\r\n        }\r\n    },\r\n    WEST {\r\n        @Override\r\n        public String printDirection() {\r\n            String message = &amp;quot;You are moving in west. You will face sun in evening time.&amp;quot;;\r\n            return message;\r\n        }\r\n    },\r\n    NORTH {\r\n        @Override\r\n        public String printDirection() {\r\n            String message = &amp;quot;You are moving in north. You will face head in daytime.&amp;quot;;\r\n            return message;\r\n        }\r\n    },\r\n    SOUTH {\r\n        @Override\r\n        public String printDirection() {\r\n            String message = &amp;quot;You are moving in south. Sea ahead.&amp;quot;;\r\n            return message;\r\n        }\r\n    };\r\n\r\n    public abstract String printDirection();\r\n}\r\n<\/pre>\n<p>Re-run above example.<\/p>\n<pre class=\"brush: java; title: EnumExample.java; notranslate\" title=\"EnumExample.java\">\r\nDirection.NORTH.printDirection(); \/\/You are moving in north. You will face head in daytime.\r\n        \r\nDirection.EAST.printDirection();  \/\/You are moving in east. You will face sun in morning time.\r\n<\/pre>\n<p>You can <strong>enforce a contract for all enums<\/strong> to be created in this way. It can serve as <strong>template for enum creation<\/strong>. <\/p>\n<p>For example, If we want that each enum type of <code>Direction<\/code> should be able to print the direction name with a custom message when needed. This can be done by defining a <code>abstract<\/code> method inside <code>Direction<\/code>, which each enum has to override. In future, in any more directions are added (really?), then we must add a custom message as well.<\/p>\n<p><a name=\"enum-extends\"><\/a><\/p>\n<h2>4. enum inheritance<\/h2>\n<p>As mentioned earlier, <strong>enums extends Enum<\/strong> class. <code>java.lang.Enum<\/code> is an abstract class. This is the common base class of all Java enumeration types.<\/p>\n<pre class=\"brush: java; title: java.lang.Enum.java; notranslate\" title=\"java.lang.Enum.java\">\r\npublic abstract class Enum&amp;lt;E extends Enum&amp;lt;E&amp;gt;&amp;gt; \r\n\t\t\t\t\textends Object \r\n\t\t\t\t\timplements Comparable&amp;lt;E&amp;gt;, Serializable {\r\n    \r\n}\r\n<\/pre>\n<p>It means that all enums are <strong><a title=\"When to use comparable and comparator interfaces in java\" href=\"https:\/\/howtodoinjava.com\/java\/sort\/comparable-comparator\/\"><strong>comparable<\/strong><\/a> and <a title=\"A mini guide for implementing serializable interface in java\" href=\"https:\/\/howtodoinjava.com\/java\/serialization\/java-serialization\/\"><strong>serializable<\/strong><\/a> implicitly<\/strong>. Also, all enum types in Java are <strong><a title=\"Singleton design pattern in java\" href=\"https:\/\/howtodoinjava.com\/design-patterns\/creational\/singleton-design-pattern-in-java\/\"><strong>singleton<\/strong><\/a><\/strong> by default. <\/p>\n<p>As noted all enums extends <code>java.lang.Enum<\/code>, so <strong>enum cannot extend any other class<\/strong> because Java does not support <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/multiple-inheritance-in-java\/\"><strong>multiple inheritance<\/strong><\/a> this way. But enums can implement any number of interfaces.<\/p>\n<p><a name=\"compare-enums\"><\/a><\/p>\n<h2>5. Compare enums<\/h2>\n<p>All enums are by default <strong>comparable and singletons<\/strong> as well. It means you can compare them with <code>equals()<\/code> method, even with <code>\"==\"<\/code> operator.<\/p>\n<pre class=\"brush: java; title: EnumExample.java; notranslate\" title=\"EnumExample.java\">\r\nDirection east = Direction.EAST;\r\nDirection eastNew = Direction.valueOf(&amp;quot;EAST&amp;quot;);\r\n\r\nSystem.out.println( east == eastNew );           \/\/true\r\nSystem.out.println( east.equals( eastNew ) );    \/\/true\r\n<\/pre>\n<blockquote><p>You can <strong>compare enum types<\/strong> using <code>'=='<\/code> operator or <code>equals()<\/code> method, because enums are singlton and comparable by default.<\/p><\/blockquote>\n<p><a name=\"collections\"><\/a><\/p>\n<h2>6. Enum collections &#8211; EnumSet and EnumMap<\/h2>\n<p>Two classes have been added to <code>java.util<\/code> package in support of enums &#8211; <code><a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/EnumSet.html\">EnumSet<\/a><\/code> (a high-performance Set implementation for enums; all members of an enum set must be of the same enum type) and <code><a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/EnumMap.html\">EnumMap<\/a><\/code> (a high-performance Map implementation for use with enum keys).<\/p>\n<h4>6.1. java.util.EnumSet<\/h4>\n<p><strong>EnumSet<\/strong> class is defined as follows:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic abstract class EnumSet&amp;lt;E extends Enum&amp;lt;E&amp;gt;&amp;gt; \r\n\t\t\t\t\t\textends AbstractSet&amp;lt;E&amp;gt; \r\n\t\t\t\t\t\timplements Cloneable, Serializable {\r\n  \r\n}\r\n<\/pre>\n<p>A specialized <code>Set<\/code> implementation for use with enum types. All of the elements in an enum set must come from a single enum type that is specified, explicitly or implicitly, when the set is created.<\/p>\n<h4>6.1.1. EnumSet Example<\/h4>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class Test \r\n{\r\n   public static void main(String[] args) \r\n   {\r\n     Set enumSet = EnumSet.of(  Direction.EAST,\r\n                                Direction.WEST,\r\n                                Direction.NORTH,\r\n                                Direction.SOUTH\r\n                              );\r\n   }\r\n }<\/pre>\n<p>Like most collection implementations <strong><code>EnumSet<\/code> is not synchronized<\/strong>. If multiple threads access an enum set concurrently, and at least one of the threads modifies the set, it should be synchronized externally.<\/p>\n<p><code>null<\/code> elements are not permitted. Also, these sets guarantee the ordering of the elements in the set based on their order in the enumeration constants is declared. Performance and memory benefits are very high in comparison to a regular set implementation.<\/p>\n<h4>6.2. java.util.EnumMap<\/h4>\n<p><strong>EnumMap<\/strong> is declared as:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class EnumMap&amp;lt;K extends Enum&amp;lt;K&amp;gt;,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements Serializable, Cloneable {\r\n  \r\n}\r\n<\/pre>\n<p>A specialized <code>Map<\/code> implementation for use with enum type keys. Also, all of the keys in an enum map must come from a single enum type that is specified, explicitly or implicitly, when the map is created.<\/p>\n<p>Like <code>EnumSet<\/code>, <code>null<\/code> keys are not permitted and is <strong>not synchronized<\/strong> as well.<\/p>\n<h4>6.2.1. EnumMap Example<\/h4>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class Test \r\n{\r\n  public static void main(String[] args)\r\n  {\r\n    \/\/Keys can be only of type Direction\r\n    Map enumMap = new EnumMap(Direction.class);\r\n\r\n    \/\/Populate the Map\r\n    enumMap.put(Direction.EAST, Direction.EAST.getAngle());\r\n    enumMap.put(Direction.WEST, Direction.WEST.getAngle());\r\n    enumMap.put(Direction.NORTH, Direction.NORTH.getAngle());\r\n    enumMap.put(Direction.SOUTH, Direction.SOUTH.getAngle());\r\n  }\r\n}\r\n<\/pre>\n<p><a name=\"notes\"><\/a><\/p>\n<h2>7. Summary<\/h2>\n<ol>\n<li>enums are implicitly <strong>final subclasses<\/strong> of <code>java.lang.Enum<\/code> class<\/li>\n<li>if an enum is a member of a class, it&#8217;s implicitly <code>static<\/code><\/li>\n<li><code>new<\/code> keyword can not be used to intialize an enum, even within the enum type itself<\/li>\n<li><code>name()<\/code> and <code>valueOf()<\/code> methods simply use the text of the enum constants, while <code>toString()<\/code> method may be overridden to provide any content, if desired<\/li>\n<li>for <strong>enum constants<\/strong>, <code>equals()<\/code> and <code>\"==\"<\/code> evaluates to same result, and can be used interchangeably<\/li>\n<li>enum constants are implicitly <code>public static final<\/code><\/li>\n<li>the <strong>order of appearance of list of enum constants<\/strong> is called their &#8220;<strong>natural order<\/strong>&#8220;, and defines the order used by other items as well : <code>compareTo()<\/code> method, iteration order of values in <code>EnumSet<\/code>, <code>EnumSet.range()<\/code>.<\/li>\n<li>Enum constructors should be declared as <code>private<\/code>. The compiler allows <strong>non private constructors<\/strong>, but this seems misleading to the reader, since new can never be used with enum types.<\/li>\n<li>Since these enumeration instances are all effectively singletons, they can be compared for equality using identity (<code>\"==\"<\/code>).<\/li>\n<li>you can use <strong>enum in switch statement<\/strong> like int or char primitive data type<\/li>\n<\/ol>\n<p>In this article, we explored the <strong>Java enum<\/strong> from the language basics to more advanced and interesting real-world use cases.<\/p>\n<p>Happy Learning !!<\/p>\n<p>References:<\/p>\n<p><a href=\"https:\/\/stackoverflow.com\/questions\/18883646\/java-enum-methods-return-opposite-direction-enum\/18883717#18883717\">SO Thread<\/a><br \/>\n<a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/java\/javaOO\/enum.html\">Enum Java Doc<\/a><br \/>\n<a href=\"https:\/\/www3.ntu.edu.sg\/home\/ehchua\/programming\/java\/JavaEnum.html\">Java 1.5 enumeration<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java enum example. The purpose of enum is to enforce compile time type safety. Learn enum constructors, methods, inheritance, EnumMap and EnumSet etc.<\/p>\n","protected":false},"author":2,"featured_media":11111,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[973],"tags":[1448],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/Java-enum.png",377,259,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/Java-enum.png",150,103,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/Java-enum.png",300,206,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/Java-enum.png",377,259,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/Java-enum.png",377,259,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/Java-enum.png",377,259,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/Java-enum.png",377,259,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2012\/12\/Java-enum.png",120,82,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":33,"uagb_excerpt":"Java enum example. The purpose of enum is to enforce compile time type safety. Learn enum constructors, methods, inheritance, EnumMap and EnumSet etc.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/528"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=528"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/528\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11111"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=528"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=528"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=528"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}