{"id":13028,"date":"2019-11-10T22:36:17","date_gmt":"2019-11-10T17:06:17","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=13028"},"modified":"2022-01-12T21:30:05","modified_gmt":"2022-01-12T16:00:05","slug":"spring-boot-interview-questions","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/interview-questions\/spring-boot-interview-questions\/","title":{"rendered":"Spring Boot Interview Questions"},"content":{"rendered":"\n<p>Spring boot makes application development easier, but we may face some tough <strong>interview questions<\/strong> when it comes to testing your knowledge on how it all works. This article will help in <strong>preparing for the next job interview<\/strong>.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-e1cfab5f \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-what-is-spring-boot-how-it-is-different-from-spring-framework\">1. What is Spring Boot? How it is Different from Spring Framework?<\/a><li class=\"uagb-toc__list\"><a href=\"#2-advantages-and-disadvantages-of-spring-boot\">2. Advantages and Disadvantages of Spring Boot?<\/a><li class=\"uagb-toc__list\"><a href=\"#3-how-can-we-set-up-a-spring-boot-application-with-maven\">3. How Can We Set Up a Spring Boot Application With Maven?<\/a><li class=\"uagb-toc__list\"><a href=\"#4-what-is-autoconfiguration-how-to-enable-or-disable-a-certain-configuration\">4. What is AutoConfiguration? How to Enable or Disable a Certain Configuration?<\/a><li class=\"uagb-toc__list\"><a href=\"#5-what-are-starter-dependencies\">5. What are Starter Dependencies?<\/a><li class=\"uagb-toc__list\"><a href=\"#6-list-down-important-annotations\">6. List down Important Annotations?<\/a><li class=\"uagb-toc__list\"><a href=\"#7-how-to-create-a-rest-api\">7. How to Create a REST API?<\/a><li class=\"uagb-toc__list\"><a href=\"#8-difference-between-restcontroller-and-controller-annotations\">8. Difference between @RestController and @Controller annotations?<\/a><li class=\"uagb-toc__list\"><a href=\"#9-what-is-the-difference-between-requestmapping-and-getmapping\">9. What is the difference between @RequestMapping and @GetMapping?<\/a><li class=\"uagb-toc__list\"><a href=\"#10-how-do-you-add-a-filter-to-an-application\">10. How do you add a Filter to an application?<\/a><li class=\"uagb-toc__list\"><a href=\"#11-explaing-embedded-server-support-in-spring-boot\">11. Explaing Embedded Server Support in Spring Boot?<\/a><li class=\"uagb-toc__list\"><a href=\"#12-can-we-disable-the-default-web-server\">12. Can We Disable the Default Web Server?<\/a><li class=\"uagb-toc__list\"><a href=\"#13-how-to-enable-debug-logging\">13. How to Enable Debug Logging?<\/a><li class=\"uagb-toc__list\"><a href=\"#14-how-to-check-all-the-environment-properties-in-the-application\">14. How to Check all the Environment Properties in the Application?<\/a><li class=\"uagb-toc__list\"><a href=\"#15-how-do-we-define-and-load-properties\">15. How do we Define and Load Properties?<\/a><li class=\"uagb-toc__list\"><a href=\"#16-how-to-connect-to-the-database-using-jpa\">16. How to Connect to the Database using JPA?<\/a><li class=\"uagb-toc__list\"><a href=\"#17-why-we-use-spring-boot-maven-plugin\">17. Why we use Spring Boot Maven Plugin?<\/a><li class=\"uagb-toc__list\"><a href=\"#18-how-to-package-an-application-as-executable-jar-or-war-file\">18. How to Package an Application as Executable .jar or .war File?<\/a><li class=\"uagb-toc__list\"><a href=\"#19-how-to-configure-logging-in-spring-boot\">19. How to Configure Logging in Spring Boot?<\/a><li class=\"uagb-toc__list\"><a href=\"#20-what-is-spring-actuator-what-are-its-advantages\">20. What is Spring Actuator? What are its Advantages?<\/a><li class=\"uagb-toc__list\"><a href=\"#21-what-are-relaxed-bindings\">21. What are Relaxed Bindings?<\/a><li class=\"uagb-toc__list\"><a href=\"#22-how-to-perform-unit-testing-and-integration-testing\">22. How to Perform Unit Testing and Integration Testing?<\/a><li class=\"uagb-toc__list\"><a href=\"#23-what-are-spring-profiles\">23. What are Spring Profiles?<\/a><li class=\"uagb-toc__list\"><a href=\"#24-what-isspring-boot-devtools-used-for\">24. What Is\u00a0Spring Boot DevTools Used For?<\/a><li class=\"uagb-toc__list\"><a href=\"#25-how-to-enable-hot-deployment-and-live-reload-on-browser\">25. How to enable Hot Deployment and Live Reload on browser?<\/a><li class=\"uagb-toc__list\"><a href=\"#26-what-is-cross-site-request-forgery-attack\">26. What is Cross-Site Request Forgery attack?<\/a><li class=\"uagb-toc__list\"><a href=\"#27-explain-cors-in-spring-boot\">27. Explain CORS in Spring Boot?<\/a><li class=\"uagb-toc__list\"><a href=\"#28-how-to-enable-httpsssl-support-in-spring-boot\">28. How to enable HTTPS\/SSL support in Spring boot?<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. What is Spring Boot? How it is Different from Spring Framework?<\/h2>\n\n\n\n<div class=\"wp-block-image size-full wp-image-11119\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"450\" height=\"338\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png\" alt=\"Spring boot modules\" class=\"wp-image-11119\"\/><figcaption>Spring boot modules<\/figcaption><\/figure><\/div>\n\n\n\n<p>Spring Boot is a Spring framework module that <strong>provides RAD (Rapid Application Development) features<\/strong> to the Spring framework with<strong> the help of <a href=\"https:\/\/github.com\/spring-projects\/spring-boot\/tree\/master\/spring-boot-project\/spring-boot-starters\/\" target=\"_default\" rel=\"noopener noreferrer\">starter templates<\/a> and <em>auto-configuration<\/em> features<\/strong> which are very powerful and work flawlessly.<\/p>\n\n\n\n<p>Spring Boot starters take an <em>opinionated view<\/em> of the Spring platform and third-party libraries. It means that as soon as we include any dependency into an application, spring boot assumes its general purpose and automatically configures the most used classes in the library as spring beans <strong>with sensible defaults<\/strong>.<\/p>\n\n\n\n<p>For example, if we create a WebMVC application, only including the maven dependency <code>spring-boot-starter-web<\/code> brings all jars\/libraries used for building web, including RESTful, applications using Spring WebMVC. It also includes Tomcat as the <strong>default embedded server<\/strong>.<\/p>\n\n\n\n<p>It also <strong>provides a range of non-functional features<\/strong> such as embedded servers, security, metrics, health checks, and externalized configuration out of the box without extra configurations.<\/p>\n\n\n\n<p>Suppose we have to identify the difference between the Spring framework and Spring boot. In that case, we can say that Spring Boot is an extension of the Spring framework, which eliminated the boilerplate configurations required for setting up a working production-ready application.<\/p>\n\n\n\n<p>It takes an opinionated view of the Spring and third-party libraries imported into the project and configures the behavior for us. <\/p>\n\n\n\n<h2>2. Advantages and Disadvantages of Spring Boot?<\/h2>\n\n\n\n<h3>Advantages:<\/h3>\n\n\n\n<p>The two best advantages of spring boot are <strong>simplified &amp; version-conflict-free dependency management through the starte<\/strong>r POMs and <strong>opinionated auto-configuration<\/strong> of most commonly used libraries and behaviors.<\/p>\n\n\n\n<p>The embedded jars enable package the web applications as jar files that we can run anywhere.<\/p>\n\n\n\n<p>The actuator module provides HTTP endpoints to access application internals like detailed performance metrics, health status, etc.<\/p>\n\n\n\n<h3> Disadvantages:<\/h3>\n\n\n\n<p>On the disadvantages side, they are very few. Still, many developers may see the <strong>transitive dependencies included with starter poms as a burden<\/strong> to deployment packaging.<\/p>\n\n\n\n<p>Also, its <em>auto-configuration feature may enable many such features that we may never use in the application lifecycle. They<\/em> will sit there all the time, initialized and fully configured. It may cause some unnecessary resource utilization.<\/p>\n\n\n\n<h2>3. How Can We Set Up a Spring Boot Application With Maven?<\/h2>\n\n\n\n<p>The easiest and recommended way to set up a new Spring boot application is using the <strong><em><a href=\"https:\/\/start.spring.io\/\" target=\"_blank\" rel=\"noreferrer noopener\">Spring Initializr<\/a><\/em> tool<\/strong>. It ensures that we are using the latest artifact versions, automatically. The tool can generate the project with various configurations such as Java version, Maven or Gradle build, jar or war packaging, etc. We can also select all the features our application needs, such as Web, JPA, H2 etc.<\/p>\n\n\n\n<p>Another way to create a project is to <strong>Create New Maven Project wizard in IDEs<\/strong> such as Eclipse or IntelliJ. After creating the maven project, we need to include the <em>spring-boot-starter-parent<\/em> dependency in the <em>pom.xml<\/em> file, if the tool didn&#8217;t included it already.<\/p>\n\n\n\n<h2>4. What is AutoConfiguration? How to Enable or Disable a Certain Configuration?<\/h2>\n\n\n\n<p>Spring boot autoconfiguration scans the classpath, finds the libraries in the classpath and then attempts to guess the best default configuration for them, and finally configure all such beans.<\/p>\n\n\n\n<p>Autoconfiguration tries to be as intelligent as possible and backs away as we define more of our own custom configuration. Autoconfiguration is always applied after user-defined custom beans have been registered.<\/p>\n\n\n\n<p>Autoconfiguration works with the help of <strong>@Conditional<\/strong> annotations such as <code>@ConditionalOnBean<\/code> and <code>@ConditionalOnClass<\/code>.<\/p>\n\n\n\n<p>For example, look at <code>AopAutoConfiguration<\/code> class. If classpath scanning finds <em>EnableAspectJAutoProxy<\/em>, <em>Aspect<\/em>, <em>Advice<\/em> and <em>AnnotatedElement<\/em> classes and <code>spring.aop.auto=false<\/code> is not present in the properties file, then Spring boot will configure the Spring AOP module for us.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Configuration\n@ConditionalOnClass({ EnableAspectJAutoProxy.class,\n\t\t\tAspect.class,\n\t\t\tAdvice.class,\n\t\t\tAnnotatedElement.class })\n@ConditionalOnProperty(prefix = \"spring.aop\",\n\t\t\tname = \"auto\",\n\t\t\thavingValue = \"true\",\n\t\t\tmatchIfMissing = true)\npublic class AopAutoConfiguration\n{\n\t\/\/code\n}<\/code><\/pre>\n\n\n\n<p> To <strong>enable an autoconfiguration<\/strong>, just importing the correct starter dependency is enough. Everything else works as discussed above.<\/p>\n\n\n\n<p>To <strong>disable an autoconfiguration<\/strong>, use the <em>exclude<\/em>&nbsp;attribute of the&nbsp;<em>@EnableAutoConfiguration<\/em>&nbsp;annotation. For instance, this code snippet disables the&nbsp;<em>DataSourceAutoConfiguration<\/em>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@EnableAutoConfiguration(exclude = DataSourceAutoConfiguration.class)\npublic class MyConfiguration { }<\/code><\/pre>\n\n\n\n<h2>5. What are Starter Dependencies?<\/h2>\n\n\n\n<p>Spring Boot starters are maven templates that contain a <strong>collection of all the relevant transitive dependencies that are needed to start a particular functionality<\/strong>.<\/p>\n\n\n\n<p>For example, If we want to create a Spring WebMVC application, we would have included all required dependencies ourselves in a traditional setup. It leaves the <em>chances of version conflict<\/em> which ultimately results in <em>ClassCastException<\/em>.<\/p>\n\n\n\n<p>With Spring boot, to create a WebMVC application, all we need to import is <code><a href=\"https:\/\/mvnrepository.com\/artifact\/org.springframework.boot\/spring-boot-starter-web\" target=\"_blank\" rel=\"noreferrer noopener\">spring-boot-starter-web<\/a><\/code> dependency. Transitively, this starter brings in all other required dependencies to build a web application, for example, <em>spring-webmvc<\/em>, <em>spring-web<\/em>, <em>hibernate-validator<\/em>, <em>tomcat-embed-core<\/em>, <em>tomcat-embed-el<\/em>, <em>tomcat-embed-websocket<\/em>, <em>jackson-databind<\/em>, <em>jackson-datatype-jdk8<\/em>, <em>jackson-datatype-jsr310<\/em> and <em>jackson-module-parameter-names<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<h2>6. List down Important Annotations?<\/h2>\n\n\n\n<p>The most commonly used and important <a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/spring-boot-annotations\/\">spring boot annotations<\/a> are as below:<\/p>\n\n\n\n<ul><li><code>@ComponentScan<\/code> &#8211; enables component scanning in application classpath.<\/li><li><code>@EnableAutoConfiguration<\/code> &#8211; enables auto-configuration mechanism that attempts to guess and configure beans that you are likely to need.<\/li><li><code>@Configuration<\/code> &#8211; indicates that a class declares one or more @Bean methods to generate bean definitions and service requests for those beans at runtime.<\/li><li><code>@SpringBootApplication<\/code> &#8211; is a composite annotation composed on above 3 annotations. This enables auto-configuration mechanism, enable component scanning and register extra beans in the context.<\/li><li><code>@ImportAutoConfiguration<\/code> &#8211; imports and apply only the specified auto-configuration classes. We should use this when we don\u2019t want to enable the default autoconfiguration.<\/li><li><code>@AutoConfigureBefore, @AutoConfigureAfter, @AutoConfigureOrder<\/code> &#8211; shall be used if the configuration needs to be applied in a specific order (before of after).<\/li><li><code>@Conditional<\/code> &#8211; annotations such as <em>@ConditionalOnBean<\/em>, <em>@ConditionalOnWebApplication<\/em> or <em>@ConditionalOnClass<\/em> allow to register a bean only when the condition meets.<\/li><\/ul>\n\n\n\n<h2>7. How to Create a REST API?<\/h2>\n\n\n\n<ul><li>Creating REST APIs is part of <em>Sping WebMVC<\/em> module that is imported via <em>spring-boot-starter-web<\/em> dependency. <\/li><li>With the web module, we get the annotations for creating REST APIs such as <em>@RestController<\/em>, <em>@GetMapping<\/em>, <em>@PostMapping<\/em> etc.<\/li><li>We <em>start with defining the REST resource model<\/em> that is generally a POJO object with necessary fields and accessor methods. <\/li><li>Next, we write the <em>REST controllers that handle the requests coming to resource mapping URLs<\/em>. At this step, we connect to autowired DAO and other components to fetch the data from backend systems and return the response along with appropriate response codes.<\/li><li>Also, we can use the annotations, such as <code>@ControllerAdvice<\/code>, to create a <em>central exception handling mechanism<\/em>.<\/li><li>Optionally, based on requirements, we can plug-in additional functionalities such as <em>request validations<\/em> and <em>HATEOAS<\/em>.<\/li><\/ul>\n\n\n\n<h2>8. Difference between @RestController and @Controller annotations?<\/h2>\n\n\n\n<p>The <code>@Controller<\/code> annotation serves as a specialization of\u00a0<code>@Component<\/code>, allowing for implementation classes to be auto-detected through classpath scanning. The <code>@RequestMapping<\/code> annotated methods, in the controller class, act as request handlers for the mapped URLs.<\/p>\n\n\n\n<p>If we need to return raw JSON or XML from the @Controller class methods, we need to annotate the method with <code>@ResponseBody<\/code> that indicates a method return value should be bound to the web response body.<\/p>\n\n\n\n<p>The <code>@RestController<\/code> is a composite annotation that is a combination of @Controller and @ResponseBody. When we annotate a class with @RestController, all the handler methods automatically have @ResponseBody annotation applied. So all handler methods automatically return the raw JSON\/XML response bodies.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@RestController = @Controller + @ResponseBody<\/code><\/pre>\n\n\n\n<h2>9. What is the difference between @RequestMapping and @GetMapping?<\/h2>\n\n\n\n<p>The <em>@GetMapping<\/em> is a specialized composed version of <em>@RequestMapping<\/em> annotation that is used on handler methods for HTTP GET APIs.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@GetMapping = @RequestMapping(method = { RequestMethod.GET })<\/code><\/pre>\n\n\n\n<p>Similarly, <em>@PostMapping<\/em> annotation maps HTTP POST requests onto specific handler methods. It is a shorter form to write <em>@RequestMapping(method = RequestMethod.POST)}<\/em>.<\/p>\n\n\n\n<h2>10. How do you add a Filter to an application?<\/h2>\n\n\n\n<p>To create a filter, we simply need to implement the\u00a0<code>javax.servlet.Filter<\/code>\u00a0interface. Also, for Spring to recognize a filter, we need to define it as a bean with the\u00a0<em>@Component<\/em>\u00a0annotation.<\/p>\n\n\n\n<p>Based on application needs, we override the filter methods <em>init()<\/em>, <em>doFilter()<\/em> and <em>destroy()<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Component\npublic class TraceLoggingFilter implements Filter {\n\n    @Override\n    public void doFilter(\n      ServletRequest request, \n      ServletResponse response, \n      FilterChain chain) throws IOException, ServletException {\n\n      \/\/...\n    }\n}<\/code><\/pre>\n\n\n\n<p>To apply the filter on URL patterns, we need to register it as <em>FilterRegistrationBean<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Bean\npublic FilterRegistrationBean&lt;TraceLoggingFilter&gt; tracingFilter()\n{\n    FilterRegistrationBean&lt;TraceLoggingFilter&gt; filterBean \n    \t= new FilterRegistrationBean&lt;&gt;();\n    filterBean.setFilter(new TraceLoggingFilter());\n    filterBean.addUrlPatterns(\"\/*\");\n    filterBean.setOrder(1);\n    return filterBean;    \n}<\/code><\/pre>\n\n\n\n<h2>11. Explaing Embedded Server Support in Spring Boot?<\/h2>\n\n\n\n<p>Spring boot applications include embedded servers as part of <em>spring-boot-starter-web<\/em> dependency and configure <em><strong>Tomcat as the default embedded server<\/strong><\/em>. It means that we can run a web application from the command prompt without setting up any complex server infrastructure.<\/p>\n\n\n\n<p>If we want, we can exclude Tomcat and include any other embedded server. Or we can exclude the server environment altogether. It is all configuration-based.<\/p>\n\n\n\n<p>For example, the below configuration<strong> excludes Tomcat and includes jetty<\/strong> as the embedded server.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;\/artifactId&gt;\n        &lt;\/exclusion&gt;\n    &lt;\/exclusions&gt;\n&lt;\/dependency&gt;\n  \n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-jetty&lt;\/artifactId&gt;\n&lt;\/dependency&gt;<\/pre>\n\n\n\n<h2>12. Can We Disable the Default Web Server?<\/h2>\n\n\n\n<p>Yes, we can disable all embedded servers from a spring boot application. We need to look into the maven dependency tree and exclude the Tomcat library from whichever dependency is including it.<\/p>\n\n\n\n<p>Another way to disable all embedded servers is by using the property <em>spring.main.web-application-type<\/em> to <em>none<\/em> in <em>application.properties<\/em> file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\"> spring.main.web-application-type=none<\/code><\/pre>\n\n\n\n<p>A similar configuration can be done using the Java configuration when starting the application by setting the application type to <em>NONE<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">SpringApplication application = new SpringApplication(MainApplication.class);\napplication.setWebApplicationType(WebApplicationType.NONE);\napplication.run(args);<\/code><\/pre>\n\n\n\n<h2>13. How to Enable Debug Logging?<\/h2>\n\n\n\n<p>The easiest way to enable debug logging is setting it through properties file:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"properties\" class=\"language-properties\">debug=true\n\n# For trace level logging\n# trace=true <\/code><\/pre>\n\n\n\n<p>We can pass the <code>debug<\/code> flag during application startup as well.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">java -jar application.jar --debug<\/code><\/pre>\n\n\n\n<h2>14. How to Check all the Environment Properties in the Application?<\/h2>\n\n\n\n<p>The easiest way to list down all the properties in an application is by including the <strong>actuator module<\/strong> and accessing the URL endpoint <code>\/env<\/code>.<\/p>\n\n\n\n<p>Do not forget to enable the endpoint in properties configuration.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"properties\" class=\"language-properties\">management.endpoints.web.exposure.include=env<\/code><\/pre>\n\n\n\n<h2>15. How do we Define and Load Properties?<\/h2>\n\n\n\n<p>Spring boot provides many ways to set up and access properties in an application.<\/p>\n\n\n\n<ul><li>Typically, spring boot reads and applies all configurations from <strong>application.properties<\/strong> file from the classpath.<\/li><li>To specify a different file name or location, use the startup argument <code>spring.config.location<\/code>. For example, <code> --spring.config.location=config\/*.properties<\/code> will load the properties files from the <em>config<\/em> folder.<\/li><li>The <em><strong>@PropertySource<\/strong><\/em> annotation is a convenient mechanism for adding property sources. Note that it is a repeatable annotation so we can apply this annotation multiple times in a class. In the event of a property name collision, the last source read takes precedence.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Configuration\n@PropertySource(\"classpath:foo.properties\")\n@PropertySource(\"classpath:bar.properties\")\npublic class AppProperties {\n    \/\/...\n}<\/code><\/pre>\n\n\n\n<ul><li>We can use <em><strong>@Value<\/strong><\/em> annotation to inject a property directly into a field.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Value( \"${jdbc.url}\" )\nprivate String jdbcUrl;<\/code><\/pre>\n\n\n\n<ul><li>To load the test-specific properties file, the most straightforward way is to use the <code>@TestPropertySource<\/code> annotation.<\/li><li>To load the profile-specific properties files, <code>application-{environment}.properties<\/code>&nbsp;file in the&nbsp;<em>src\/main\/resources<\/em>&nbsp;directory, and then set a Spring profile with the same <em>environment<\/em> name.<\/li><\/ul>\n\n\n\n<h2>16. How to Connect to the Database using JPA?<\/h2>\n\n\n\n<p>To work with JPA-based repositories, first, we need to include <em>spring-boot-starter<\/em>\u00a0and<em>\u00a0spring-boot-starter-data-jpa\u00a0<\/em>dependencies. These starters have all the autoconfiguration and hibernate-related dependencies.<\/p>\n\n\n\n<p>Spring Boot configures\u00a0<strong><em>Hibernate<\/em>\u00a0as the default JPA provider,<\/strong> so the application will automatically have all necessary beans such as <em>entityManagerFactory<\/em>. <\/p>\n\n\n\n<p>For connecting with a database, we need to specify the datasource configuration in the <em>application.properties<\/em> file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"properties\" class=\"language-properties\">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.username=root\nspring.datasource.password=sa\nspring.datasource.url=jdbc:mysql:\/\/localhost:3306\/testDb?createDatabaseIfNotExist=true<\/code><\/pre>\n\n\n\n<p>Also, note that spring boot2 uses <strong>HikariCP as the default connection pool<\/strong>. So if you need to change the connection pool, configure the respective properties.<\/p>\n\n\n\n<h2>17. Why we use Spring Boot Maven Plugin?<\/h2>\n\n\n\n<p>The plugin provides Spring Boot support in Maven, letting us <strong>package executable jar or war archives<\/strong> and <strong>run an application in-place<\/strong>. To use it, we must use Maven 3.2 (or later).<\/p>\n\n\n\n<p>The <a href=\"https:\/\/docs.spring.io\/spring-boot\/docs\/2.2.1.RELEASE\/maven-plugin\/usage.html\">plugin<\/a> provides several goals to work with a Spring Boot application:<\/p>\n\n\n\n<ul><li><code>spring-boot:repackage<\/code>: create a jar or war file that is auto-executable. It can replace the regular artifact or can be attached to the build lifecycle with a separate classifier.<\/li><li><code>spring-boot:run<\/code>: run your Spring Boot application with several options to pass parameters to it.<\/li><li><code>spring-boot:start<\/code> and <code>stop<\/code>: integrate your Spring Boot application to the <code>integration-test<\/code> phase so that the application starts before it.<\/li><li><code>spring-boot:build-info<\/code>: generate a build information that can be used by the Actuator.<\/li><\/ul>\n\n\n\n<h2>18. How to Package an Application as Executable .jar or .war File?<\/h2>\n\n\n\n<p>Executable jars (sometimes called&#8221;<strong>fat jar<\/strong>\u201d) are archives containing the compiled classes and all of the jar dependencies that the application needs to run.<\/p>\n\n\n\n<p>To <strong>create an executable jar<\/strong>, we shall add <code>spring-boot-maven-plugin<\/code> in <code>pom.xml<\/code>. By default, this plugin package the application as <code>.jar<\/code> file only.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;\/artifactId&gt;\n        &lt;\/plugin&gt;\n    &lt;\/plugins&gt;\n&lt;\/build&gt;<\/code><\/pre>\n\n\n\n<p>The first logical step to <strong><a href=\"https:\/\/howtodoinjava.com\/spring-boot\/war-packaging-example\/\">create a war file<\/a><\/strong> is to declare the packaging type &#8216;<strong>war<\/strong>\u2019 in <em>pom.xml<\/em> file.<\/p>\n\n\n\n<p>The second thing is set the scope of embedded server dependency to &#8216;<em>provided<\/em>&#8216; because server dependencies will be provided by the application server where we will deploy the war file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;packaging&gt;war&lt;\/packaging&gt;\n \n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;\/artifactId&gt;\n    &lt;scope&gt;provided&lt;\/scope&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<h2>19. How to Configure Logging in Spring Boot?<\/h2>\n\n\n\n<p>Spring Boot uses&nbsp;<a href=\"https:\/\/commons.apache.org\/logging\" target=\"_blank\" rel=\"noreferrer noopener\">Commons Logging<\/a>&nbsp;for all logging internal to the framework and thus it is a mandatory dependency. For other logging needs, Spring boot supports default configuration for&nbsp;<a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/logging\/package-summary.html\" target=\"_blank\" rel=\"noreferrer noopener\">Java Util Logging<\/a>,&nbsp;<a href=\"https:\/\/logging.apache.org\/log4j\/2.x\/\" target=\"_blank\" rel=\"noreferrer noopener\">Log4J2<\/a>, and&nbsp;<a href=\"https:\/\/logback.qos.ch\/\" target=\"_blank\" rel=\"noreferrer noopener\">Logback<\/a>.<\/p>\n\n\n\n<p>When added directly or transitively, <em>spring-boot-starter-logging<\/em> module configures the <strong>default logging with Logback and SLF4J<\/strong>. <\/p>\n\n\n\n<p>The <strong>default logging uses a console logger with a log level set to <em>DEBUG<\/em><\/strong>, which we can change in the custom <em>logback.xml<\/em> file.<\/p>\n\n\n\n<p>To use Log4j2, we must exclude <em>spring-boot-starter-logging<\/em> module and import <em>spring-boot-starter-log4j2<\/em> module. The custom configuration can be done in the <em>log4j2.xml<\/em> file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-logging&lt;\/artifactId&gt;\n        &lt;\/exclusion&gt;\n    &lt;\/exclusions&gt;\n&lt;\/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;\/artifactId&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<h2>20. What is Spring Actuator? What are its Advantages?<\/h2>\n\n\n\n<p>Spring boot&#8217;s <a href=\"https:\/\/howtodoinjava.com\/spring-boot\/actuator-endpoints-example\/\">actuator module<\/a> allows us to monitor and manage application usages in the production environment, without coding and configuration for any of them. This monitoring and management information is exposed via <a href=\"https:\/\/restfulapi.net\/\">REST<\/a> like endpoint URLs.<\/p>\n\n\n\n<p>The simplest way to enable the features is to add a dependency to the <code>spring-boot-starter-actuator<\/code> starter pom file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;\/artifactId&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<p><strong>The actuator module includes several built-in endpoints<\/strong> and lets us add our own. Further, each individual endpoint can be <em>enabled<\/em> or <em>disabled<\/em> as well.<\/p>\n\n\n\n<p>Some of the important and widely used actuator endpoints are given below:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"mtr-table mtr-tr-th\"><tbody><tr><th data-mtr-content=\"Endpoint\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Endpoint<\/div><\/th><th data-mtr-content=\"Usage\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Usage<\/div><\/th><\/tr><tr><td data-mtr-content=\"Endpoint\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>\/env<\/code><\/div><\/td><td data-mtr-content=\"Usage\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Returns list of properties in the current environment<\/div><\/td><\/tr><tr><td data-mtr-content=\"Endpoint\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>\/health<\/code><\/div><\/td><td data-mtr-content=\"Usage\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Returns application health information.<\/div><\/td><\/tr><tr><td data-mtr-content=\"Endpoint\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>\/auditevents<\/code><\/div><\/td><td data-mtr-content=\"Usage\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Returns all auto-configuration candidates and the reason why they \u2018were\u2019 or \u2018were not\u2019 applied.<\/div><\/td><\/tr><tr><td data-mtr-content=\"Endpoint\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>\/beans<\/code><\/div><\/td><td data-mtr-content=\"Usage\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Returns a complete list of all the Spring beans in your application.<\/div><\/td><\/tr><tr><td data-mtr-content=\"Endpoint\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>\/trace<\/code><\/div><\/td><td data-mtr-content=\"Usage\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Returns trace logs (by default the last 100 HTTP requests).<\/div><\/td><\/tr><tr><td data-mtr-content=\"Endpoint\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>\/dump<\/code><\/div><\/td><td data-mtr-content=\"Usage\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">It performs a thread dump.<\/div><\/td><\/tr><tr><td data-mtr-content=\"Endpoint\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>\/metrics<\/code><\/div><\/td><td data-mtr-content=\"Usage\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">It shows several useful metrics information like JVM memory used, system CPU usage, open files, and much more.<\/div><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>21. What are Relaxed Bindings?<\/h2>\n\n\n\n<p>Spring Boot uses some <strong>relaxed rules for resolving configuration property names<\/strong> such that we can write a simple property name in multiple ways.<\/p>\n\n\n\n<p>For example, a simple property <code>log.level.my-package<\/code> can be written in the following ways and all are correct and will be resolved by framework for its value based on property source.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"properties\" class=\"language-properties\">log.level.my-package = debug    \t\/\/Kebab case\nlog.level.my_package = debug \t\t\/\/Underscore notation\nlog.level.myPackage = debug \t\t\/\/Camel case\nLOG.LEVEL.MY-PACKAGE = debug \t\t\/\/Upper case format<\/code><\/pre>\n\n\n\n<p>Following is a list of the relaxed binding rules per property source.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"mtr-table mtr-thead-th\"><thead><tr><th data-mtr-content=\"Property Source\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Property Source<\/div><\/th><th data-mtr-content=\"Types Allowed\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Types Allowed<\/div><\/th><\/tr><\/thead><tbody><tr><td data-mtr-content=\"Property Source\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Properties Files<\/div><\/td><td data-mtr-content=\"Types Allowed\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Camel case, kebab case, or underscore notation<\/div><\/td><\/tr><tr><td data-mtr-content=\"Property Source\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">YAML Files<\/div><\/td><td data-mtr-content=\"Types Allowed\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Camel case, kebab case, or underscore notation<\/div><\/td><\/tr><tr><td data-mtr-content=\"Property Source\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Environment Variables<\/div><\/td><td data-mtr-content=\"Types Allowed\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Upper case format with an underscore as the delimiter. <code>_<\/code> should not be used within a property name<\/div><\/td><\/tr><tr><td data-mtr-content=\"Property Source\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">System properties<\/div><\/td><td data-mtr-content=\"Types Allowed\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Camel case, kebab case, or underscore notation<\/div><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>22. How to Perform Unit Testing and Integration Testing?<\/h2>\n\n\n\n<p>Typically any software application is divided into different modules and components. When one such component is tested in isolation, it is called unit testing.<\/p>\n\n\n\n<p><strong>Unit tests<\/strong> do not verify whether the application code works with external dependencies correctly. It focuses on a single component and mocks all dependencies this component interacts with.<\/p>\n\n\n\n<p>We can <strong>perform unit testing help of specialized annotations<\/strong> such as :<\/p>\n\n\n\n<ul><li><code>@JdbcTest<\/code> \u2013 can be used for a typical jdbc test when a test focuses only on jdbc-based components.<\/li><li><code>@JsonTest<\/code> \u2013 It is used when a test focuses only on JSON serialization.<\/li><li><code>@RestClientTest<\/code> \u2013 is used to test REST clients.<\/li><li><code>@WebMvcTest<\/code> &#8211; used for Spring MVC tests with configuration relevant to only MVC tests.<\/li><\/ul>\n\n\n\n<p><strong>Integration tests<\/strong> can put the whole application in scope or only certain components \u2013 based on what is being tested. They may need to require resources like database instances and hardware to be allocated for them. Though these interactions can be mocked out as well to improve the test performance.<\/p>\n\n\n\n<p>In integration testing, we shall focus on testing complete request processing from controller to persistence layer.<\/p>\n\n\n\n<p>The <code>@SpringBootTest<\/code> annotation helps in writing integration tests. It starts the embedded server and fully initializes the application context. We can inject the dependencies in the test class using <em>@Autowired<\/em> annotation.<\/p>\n\n\n\n<p>We can also provide test specific beans configuration using <em>nested @Configuration class<\/em> or explicit <code>@TestConfiguration<\/code> classes.<\/p>\n\n\n\n<p>It also registers a <code>TestRestTemplate<\/code> and\/or <code>WebTestClient<\/code> bean for use in web tests.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@SpringBootTest(classes = SpringBootDemoApplication.class, \n        webEnvironment = WebEnvironment.RANDOM_PORT)\npublic class EmployeeControllerIntegrationTests \n{\n    @LocalServerPort\n    private int port;\n  \n    @Autowired\n    private TestRestTemplate restTemplate;\n  \n    \/\/tests\n}<\/code><\/pre>\n\n\n\n<h2>23. What are Spring Profiles?<\/h2>\n\n\n\n<p>We can assume profiles as the various runtime environments where we will deploy the application, and we expect the application to behave differently. For example, <em>localhost<\/em>, <em>dev<\/em>, <em>test<\/em> and <em>prod<\/em>.<\/p>\n\n\n\n<p><strong>Spring profiles allow us to map our beans to different profiles<\/strong>. And <strong>based on the profile, only mapped beans will be activated<\/strong> and other beans will be deactivated.<\/p>\n\n\n\n<p>To create a new profile, we can use the <em><strong>@Profile<\/strong><\/em> annotation. In the given example, we have configured two profiles <em>localhost<\/em> and <em>non-localhost<\/em> environments for datasource configuration. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Profile(\"localhost\")\npublic class LocalhostDatasourceConfig {\n   \/\/...\n}\n\n@Profile(\"!localhost\")\npublic class DatasourceConfig {\n   \/\/...\n}<\/code><\/pre>\n\n\n\n<p><strong>To activate a profile, we can pass the <em>Spring.profiles.active<\/em> property<\/strong> during the application startup. This property can also be defined using the system property in the respective machines.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">java -jar app.jar -Dspring.profiles.active=localhost<\/code><\/pre>\n\n\n\n<p>We can specify the <strong>default profile using the property s<em>pring.profiles.default<\/em><\/strong>.<\/p>\n\n\n\n<h2>24. <strong>What I<\/strong>s&nbsp;Spring Boot DevTools Used For?<\/h2>\n\n\n\n<p>The Spring boot dev tools module provides many useful developer features for improving the development experience such as caching static resources, automatic restarts, live reload, global settings and running the remote applications.<\/p>\n\n\n\n<p>To enable dev tools, add the&nbsp;<code>spring-boot-devtools<\/code>&nbsp;dependency in the build file.<\/p>\n\n\n\n<p>Read the linked article to know the <a href=\"https:\/\/howtodoinjava.com\/spring-boot\/developer-tools-module-tutorial\/\">complete list of features offered by the dev tools module<\/a>.<\/p>\n\n\n\n<h2>25. How to enable Hot Deployment and Live Reload on browser?<\/h2>\n\n\n\n<p>Most modern IDEs support hot-swapping of bytecode, and most code changes should reload cleanly with no side effects. Additionally, the <strong><code>spring-boot-devtools<\/code> module includes support for automatic application restarts whenever files on the classpath change<\/strong>.<\/p>\n\n\n\n<p>By default, any entry on the classpath that points to a folder is monitored for changes. Note that certain resources, such as static assets and view templates, do not need to restart the application.<\/p>\n\n\n\n<p>The <code>spring-boot-devtools<\/code> module includes an <strong>embedded LiveReload server<\/strong> that can be used to trigger a browser refresh when a resource is changed. <em>LiveReload browser extensions<\/em> are freely available for Chrome, Firefox and Safari from <em>livereload.com<\/em>.<\/p>\n\n\n\n<p>To enable\/disable LiveReload server, change value of <code>spring.devtools.livereload.enabled<\/code> property to <code>true<\/code> (default value) or <code>false<\/code>.<\/p>\n\n\n\n<h2>26. What is Cross-Site Request Forgery attack?<\/h2>\n\n\n\n<p>CSRF stands for <em>Cross-Site Request Forgery<\/em> or <strong>session riding<\/strong>. It targets an end-user to, unknowingly, execute unwanted actions on a web application in which they are currently authenticated.<\/p>\n\n\n\n<p>The unwanted actions are generally the form of URL requests that may happen either by clicking on injected links by the bad actor or by image URLs that do not need even a click.<\/p>\n\n\n\n<p>In a Spring application, CSRF protection is&nbsp;<strong>enabled by default<\/strong>. We can disable it using the following spring <strong>HttpSecurity<\/strong> interface configuration.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n      .csrf().disable();\n}<\/code><\/pre>\n\n\n\n<h2>27. Explain CORS in Spring Boot?<\/h2>\n\n\n\n<p><strong><a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/spring-cors-configuration\/\" target=\"_blank\" rel=\"noreferrer noopener\">CORS<\/a><\/strong>&nbsp;(<em>Cross-origin resource sharing<\/em>) allows a webpage to request additional resources into the browser from other domains e.g. fonts, CSS or static images from CDN. <strong>CORS helps in serving web content from multiple domains<\/strong> into browsers that usually have the&nbsp;same-origin&nbsp;security policy.<\/p>\n\n\n\n<p>In Spring, \u00a0<code>@CrossOrigin<\/code>\u00a0annotation marks the annotated method or type as permitting cross-origin requests. If applied to a controller, all the handler methods permit the cross-origin requests.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@CrossOrigin(origins = \"*\", allowedHeaders = \"*\")\n@Controller\npublic class HomeController \n{\n    \/\/\n}\n\n\/\/or\n\n@Controller\npublic class HomeController \n{\n    @CrossOrigin(origins = \"*\", allowedHeaders = \"*\")\n    @GetMapping(path=\"\/\")\n    public String homeInit(Model model) {\n        return \"home\";\n    }\n}<\/code><\/pre>\n\n\n\n<p>To enable CORS for the whole application, use&nbsp;<code>WebMvcConfigurer<\/code>&nbsp;to add&nbsp;<code>CorsRegistry<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Configuration\n@EnableWebMvc\npublic class CorsConfiguration implements WebMvcConfigurer\n{\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"\/**\")\n                .allowedMethods(\"GET\", \"POST\");\n    }\n}<\/code><\/pre>\n\n\n\n<h2>28. How to enable HTTPS\/SSL support in Spring boot?<\/h2>\n\n\n\n<p>The <a href=\"https:\/\/howtodoinjava.com\/spring-boot\/spring-boot-ssl-https-example\/\">SSL support in spring boot<\/a> project can be added via <code>application.properties<\/code> and by adding the below entries.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><pre class=\"brush: java; title: application.properties; notranslate\" title=\"application.properties\">\nserver.port=8443\nserver.ssl.key-alias=selfsigned_localhost_sslserver\nserver.ssl.key-password=changeit\nserver.ssl.key-store=classpath:ssl-server.jks\nserver.ssl.key-store-provider=SUN\nserver.ssl.key-store-type=JKS\n<\/pre><\/pre>\n\n\n\n<p>Please share with us any more <em>spring boot interview questions<\/em>, you have encountered in past.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Spring boot makes application development easier but we may face some tough interview questions when it comes to test your knowledge on how it all works. Be prepare for the next job interview with given Spring boot interview questions and answers.<\/p>\n","protected":false},"author":2,"featured_media":11119,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[15,935],"tags":[272],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",150,113,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",300,225,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",450,338,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/spring-boot-modules.png",120,90,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Spring boot makes application development easier but we may face some tough interview questions when it comes to test your knowledge on how it all works. Be prepare for the next job interview with given Spring boot interview questions and answers.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/13028"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=13028"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/13028\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11119"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=13028"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=13028"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=13028"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}