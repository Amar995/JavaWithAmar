{"id":8472,"date":"2017-06-29T13:16:40","date_gmt":"2017-06-29T07:46:40","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=8472"},"modified":"2022-01-25T14:54:43","modified_gmt":"2022-01-25T09:24:43","slug":"java-constructors","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/java-constructors\/","title":{"rendered":"Constructors in Java"},"content":{"rendered":"<p><strong>Java constructors<\/strong> are special methods (without return type) which allow you to fully initialize the object state before it can be used by other classes inside application. Constructors in java are invoked using <code>new<\/code> keyword.<\/p>\n<p>Let&#8217;s learn about constructors in more depth.<\/p>\n<pre>Table of Contents\r\n\r\n<a href=\"#constructor-definition\">What is Java Constructor<\/a>\r\n<a href=\"#constructor-types\">Types of Constructors<\/a>\r\n\ti) <a href=\"#default-constructor\">Default Constructor (no-arg constructor)<\/a>\r\n\tii) <a href=\"#parameterized-constructor\">Parameterized Constructor<\/a>\r\n<a href=\"#constructor-rules\">Constructor Rules<\/a>\r\n<a href=\"#constructor-chaining\">Constructor Chaining<\/a>\r\n<a href=\"#private-constructor\">Private Constructor<\/a><\/pre>\n<p><a id=\"constructor-definition\"><\/a><\/p>\n<h2>What are Constructors in Java<\/h2>\n<p>Constructors are special method like (no exactly methods) constructs which helps programmer in writing <a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/java\/javaOO\/objectcreation.html\" target=\"_blank\" rel=\"noopener noreferrer\">object initialization<\/a> code, before the object is available for use by other objects in the application. <\/p>\n<p>Whenever application needs a new instance of any class, JVM allocates a memory area inside heap. Then JVM executes the invoked constructor (class can have multiple constructors) and initialize the object state. Inside constructor, you can access all object attributes and assign them to their default values or any desired values.  <\/p>\n<blockquote><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java\/garbage-collection\/java-memory-model\/\">Java Memory Model<\/a><\/p><\/blockquote>\n<p><a id=\"constructor-types\"><\/a><\/p>\n<h2>Types of Constructors<\/h2>\n<ol>\n<li><a id=\"default-constructor\"><\/a><strong>Default Constructor (no-arg constructor)<\/strong>\n<p>In case, programmer does not provide any constructor in class definition &#8211; JVM provides a default constructor to the class in runtime. <\/p>\n<p>Programmer also can override default constructor in class. Let&#8217;s look at the syntax.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class Employee \r\n{\t\r\n\tpublic Employee() {\r\n\t\t\r\n\t}\r\n}\r\n<\/pre>\n<p>In default constructor, name of the constructor MUST match the class name and it should not have any parameters.<\/li>\n<li><a id=\"parameterized-constructor\"><\/a><strong>Parameterized Constructor via Constructor Overloading<\/strong>\n<p>As stated above, there can be multiple constructors inside a class. This is possible by having overloaded constructors. In <strong>constructor overloading<\/strong>, you can pass list of arguments as per requirements i.e. how many ways a class can be initialized.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class Employee {\r\n\tprivate String firstName;\r\n\tprivate String lastName;\r\n\r\n\tpublic Employee() {\t\/\/constructor 1\r\n\r\n\t}\r\n\r\n\tpublic Employee(String firstName) { \/\/constructor 2\r\n\r\n\t}\r\n\r\n\tpublic Employee(String firstName, String lastName) { \/\/constructor 3\r\n\r\n\t}\r\n}\r\n<\/pre>\n<p>In above class, we have defined 3 constructors to handle 3 situations &#8211; how the employee object might be required to create by the application i.e. without name, with first name only and with first and last name both.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nEmployee employee1 = new Employee();\r\nEmployee employee2 = new Employee(&quot;Lokesh&quot;);\r\nEmployee employee3 = new Employee(&quot;Lokesh&quot;, &quot;Gupta&quot;);\r\n<\/pre>\n<\/li>\n<\/ol>\n<p><a id=\"constructor-rules\"><\/a><\/p>\n<h2>Constructor Rules<\/h2>\n<p>There are few mandatory rules for creating the constructors in java.<\/p>\n<ol>\n<li>Constructor name MUST be same as name of the class.<\/li>\n<li>There cannot be any return type in constructor definition.<\/li>\n<li>There cannot be any return statement in constructor.<\/li>\n<li>Constructors can be overloaded by different arguments.<\/li>\n<li>If you want to use <code>super()<\/code> i.e. super class constructor then it must be first statement inside constructor.<\/li>\n<\/ol>\n<p><a id=\"constructor-chaining\"><\/a><\/p>\n<h2>Constructor Chaining<\/h2>\n<p>In java, it&#8217;s possible to call other constructors inside a constructor. It&#8217;s just like method calling but without any reference variable (obviously as instance is fully initialized as of now).<\/p>\n<p>Now we can call constructors of either same class or of parent class. Both uses different syntax.<\/p>\n<h4>Call same class constructor<\/h4>\n<p>To call other constructors from same class, use <strong>this<\/strong> keyword. For example,<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic Employee() {\t\r\n\t\r\n}\r\n\r\npublic Employee(String firstName) { \r\n\tthis();\t\t\/\/calling default constructor\r\n}\r\n\r\npublic Employee(String firstName, String lastName) {\r\n\tthis(firstName);\t\/\/calling constructor with single argument of String type\r\n}\r\n<\/pre>\n<h4>Call super class constructor<\/h4>\n<p>To call constructors from super or parent class, use <strong>super<\/strong> keyword. The usage of super keyword is similar to <code>this<\/code> keyword &#8211; only difference is that <code>super<\/code> refers to super class and <code>this<\/code> refers to current instance. <\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic Employee() {\t\r\n\t\/\/refer to Object class constructor \r\n\t\/\/as it is parent class for every class\r\n\tsuper();\t\r\n}\r\n<\/pre>\n<p><a id=\"private-constructor\"><\/a><\/p>\n<h2>Private Constructors<\/h2>\n<p>Sometimes you want to protect the constructor from being called by other classes. Altogether you want that nobody should be able to create a new instance of the class.<\/p>\n<p>Why anybody would want that? Well, it&#8217;s necessary for <a href=\"\/\/howtodoinjava.com\/design-patterns\/creational\/singleton-design-pattern-in-java\/\">singleton pattern<\/a>. In singleton, an application wants to have one and only one instance of any class.<\/p>\n<p>A common singleton class definition looks like this:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class DemoSingleton implements Serializable \r\n{\r\n    private static final long serialVersionUID = 1L;\r\n \r\n    private DemoSingleton() {\r\n        \/\/ private constructor\r\n    }\r\n \r\n    private static class DemoSingletonHolder {\r\n        public static final DemoSingleton INSTANCE = new DemoSingleton();\r\n    }\r\n \r\n    public static DemoSingleton getInstance() {\r\n        return DemoSingletonHolder.INSTANCE;\r\n    }\r\n \r\n    protected Object readResolve() {\r\n        return getInstance();\r\n    }\r\n}\r\n<\/pre>\n<p>That&#8217;s all about <strong>constructors in java<\/strong>. Drop me your questions in comments section.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java constructors are special methods (without return type) which allow you to fully initialize the object state before it can be used by other classes inside application. Constructors in java are invoked using new keyword.<\/p>\n","protected":false},"author":2,"featured_media":8475,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1516,1454],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Java-Constructors.png",591,332,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Java-Constructors.png",150,84,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Java-Constructors.png",300,169,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Java-Constructors.png",591,332,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Java-Constructors.png",591,332,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Java-Constructors.png",591,332,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Java-Constructors.png",591,332,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Java-Constructors.png",120,67,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":3,"uagb_excerpt":"Java constructors are special methods (without return type) which allow you to fully initialize the object state before it can be used by other classes inside application. Constructors in java are invoked using new keyword.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/8472"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=8472"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/8472\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/8475"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=8472"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=8472"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=8472"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}