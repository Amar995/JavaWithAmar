{"id":11997,"date":"2018-10-30T12:02:53","date_gmt":"2018-10-30T06:32:53","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=11997"},"modified":"2022-07-01T15:41:14","modified_gmt":"2022-07-01T10:11:14","slug":"java-comparable-interface","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/collections\/java-comparable-interface\/","title":{"rendered":"Java Comparable Interface"},"content":{"rendered":"\n<p><strong>Java Comparable<\/strong> interface is part of <a href=\"https:\/\/howtodoinjava.com\/java-collections\/\">Collection Framework<\/a>. Learn the purpose of <em>Comparable<\/em> interface and use it in different scenarios.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-4e202b73 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-comparable-interface\">1. Comparable Interface<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#11-why-implement-comparable\">1.1. Why Implement Comparable?<\/a><li class=\"uagb-toc__list\"><a href=\"#12-implementing-comparable\">1.2. Implementing Comparable<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#2-using-comparable\">2. Using Comparable<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-collectionssort-and-arrayssort\">2.1. Collections.sort() and Arrays.sort()<\/a><li class=\"uagb-toc__list\"><a href=\"#22-collectionsreverseorder\">2.2. Collections.reverseOrder()<\/a><li class=\"uagb-toc__list\"><a href=\"#23-sorted-collections\">2.3. Sorted Collections<\/a><li class=\"uagb-toc__list\"><a href=\"#24-streams\">2.4. Streams<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-comparable-examples\">3. Comparable Examples<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-sorting-strings\">3.1. Sorting Strings<\/a><li class=\"uagb-toc__list\"><a href=\"#32-sort-strings-in-reverse-order\">3.2. Sort Strings in Reverse Order<\/a><li class=\"uagb-toc__list\"><a href=\"#33-sorting-integers\">3.3. Sorting Integers<\/a><li class=\"uagb-toc__list\"><a href=\"#34-sort-list-of-custom-objects\">3.4. Sort List of Custom Objects<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#4-conclusion\">4. Conclusion<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"h-1-comparable-interface\">1. Comparable Interface<\/h2>\n\n\n\n<h3>1.1. Why Implement <em>Comparable<\/em>?<\/h3>\n\n\n\n<p>In Java, if we want to sort a <em>List<\/em> of elements then we can <em><a href=\"https:\/\/howtodoinjava.com\/java\/sort\/collections-sort\/\">Collections.sort()<\/a><\/em> method. It sorts the list items according to the&nbsp;natural ordering. All Java wrapper classes, date-time classes and <em>String<\/em> etc. implement <em>Comparable<\/em> interface and so they have their natural order defined.<\/p>\n\n\n\n<p>For example, <em>java.lang.<\/em><strong><em>String<\/em> class has <em>lexicographical order<\/em><\/strong> (or <em>dictionary order<\/em>) as its natural order. So if we sort a list of <em>String<\/em> objects, they will be sorted as they will appear in a dictionary. Similarly, <strong><em>Integer<\/em> objects will be sorted in ascending order<\/strong>, naturally.<\/p>\n\n\n\n<p>But we need to define the natural ordering of the custom domain classes that we create in the application. For example, <em>Employee<\/em>, <em>Order<\/em> etc. This is required if we want to sort a <em>list<\/em> of employees or orders using the <em>Collections.sort()<\/em> method or any such method that expects the list items to be <em>Comparable<\/em>.<\/p>\n\n\n\n<p>So, the primary purpose of <strong><em>Comparable<\/em> interface is to define the natural sort order of the classes that implement it<\/strong>. <\/p>\n\n\n\n<h3>1.2. Implementing <em>Comparable<\/em><\/h3>\n\n\n\n<p><em>Comparable<\/em> interface has a single abstract method <em><strong>compareTo()<\/strong><\/em> that objects need to implement to have a natural ordering. <\/p>\n\n\n\n<ul><li>The objects must be mutually comparable and must not throw <em>ClassCastException<\/em> for any <em>key<\/em> in the collection.<\/li><li>The <em>compareTo()<\/em> method must return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.<\/li><li>Note that <em>compareTo()<\/em> must throw an exception if <code>y.compareTo(x)<\/code> throws an exception. <\/li><li>Also, the relationship between the comparable objects must be <strong>transitive<\/strong> i.e. <code>(x.compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0)<\/code> implies <code>x.compareTo(z)&gt;0<\/code>.<\/li><li><code>null<\/code>&nbsp;is not an instance of any class so&nbsp;<code>e.compareTo(null)<\/code>&nbsp;should throw a&nbsp;<code>NullPointerException<\/code>.<\/li><\/ul>\n\n\n\n<pre title=\"Comparable.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public interface Comparable&lt;T&gt; \n{\n    public int compareTo(T o);\n}<\/code><\/pre>\n\n\n\n<p>For example, for <code>Employee<\/code> class, the natural ordering can be based on the <code>id<\/code> field.<\/p>\n\n\n\n<pre title=\"Employee.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.time.LocalDate;\n \npublic class Employee implements Comparable&lt;Employee&gt; {\n \n    private Long id;\n    private String name;\n    private LocalDate dob;\n     \n    @Override\n    public int compareTo(Employee o) \n    {\n        return this.getId().compareTo( o.getId() );\n    }\n}<\/code><\/pre>\n\n\n\n<p>Using <em>Comparable<\/em> interface, we can sort all types of objects including strings, wrapper classes or custom objects.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default info\"><p>See Also: <a href=\"https:\/\/howtodoinjava.com\/java\/sort\/comparable-comparator\/\" target=\"_blank\" rel=\"noreferrer noopener\">Sorting with Comparable and Comparator<\/a><\/p><\/blockquote>\n\n\n\n<h2 id=\"h-2-using-comparable\">2. Using Comparable<\/h2>\n\n\n\n<p>We can use sort the objects, that implement <em>Comparable<\/em> interface, using the following ways:<\/p>\n\n\n\n<h3 id=\"h-2-1-collections-sort-and-arrays-sort\">2.1. Collections.sort() and Arrays.sort()<\/h3>\n\n\n\n<ul><li>Use <code><a href=\"https:\/\/howtodoinjava.com\/java\/sort\/collections-sort\/\" target=\"_blank\" rel=\"noreferrer noopener\">Collections.sort()<\/a><\/code> method sort a <strong>List<\/strong> of objects.<\/li><li>Use <code>Arrays.sort()<\/code> method <a href=\"https:\/\/howtodoinjava.com\/java\/sort\/java-array-sorting\/\">sort an <strong>array<\/strong><\/a> of objects.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Collections.sort(items);  \nArrays.sort(items); <\/code><\/pre>\n\n\n\n<h3 id=\"h-2-2-collections-reverseorder\">2.2. Collections.reverseOrder()<\/h3>\n\n\n\n<p>This utility method returns a <em><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-comparator\/\">Comparator<\/a><\/em> that <strong>imposes the reverse of the <em>natural ordering<\/em><\/strong> on a collection of objects.<\/p>\n\n\n\n<p>This enables a simple idiom for sorting (or maintaining) collections (or arrays) of objects that implement the <em>Comparable<\/em> interface in <strong>reverse-natural-order<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Collections.sort(items, Collections.reverseOrder());    \nArrays.sort(items, Collections.reverseOrder()); <\/code><\/pre>\n\n\n\n<h3 id=\"h-2-3-sorted-collections\">2.3. Sorted Collections<\/h3>\n\n\n\n<p>Objects that implement this interface can be used as keys in a&nbsp;<a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/util\/SortedMap.html\">sorted map<\/a>&nbsp;or as elements in a&nbsp;<a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/util\/SortedSet.html\">sorted set<\/a> (e.g. <em>TreeSet<\/em>), without the need to specify a&nbsp;comparator.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/All all items are automatically sorted\nSortedSet&lt;Item&gt; itemsSet = new TreeSet&lt;&gt;();<\/code><\/pre>\n\n\n\n<h3 id=\"h-2-4-streams\">2.4. Streams<\/h3>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java8\/stream-sorting\/\">Stream.sorted()<\/a> can be used to sort a stream of objects that implement <em>Comparable<\/em> interface. However, note that a <em>stream.sorted()<\/em> does not sort the original collection &#8211;&nbsp;<em>only the items in the stream are sorted<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">items.stream()\n\t.sorted()\n\t.forEach(i -&gt; System.out.println(i); <\/code><\/pre>\n\n\n\n<h2 id=\"h-3-comparable-examples\">3. Comparable Examples<\/h2>\n\n\n\n<p>All given examples sort the lists using <code>Collections.sort()<\/code> method. If we need to sort the arrays of objects, simply replace <em>Collections.sort()<\/em> with <em>Arrays.sort()<\/em>.<\/p>\n\n\n\n<h3 id=\"h-3-1-sorting-strings\">3.1. Sorting Strings<\/h3>\n\n\n\n<p>Java program to sort a List of strings using Comparable interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n \nlist.add(\"E\");\nlist.add(\"A\");\nlist.add(\"C\");\nlist.add(\"B\");\nlist.add(\"D\");\n \nCollections.sort(list);\n \nSystem.out.println(list);<\/code><\/pre>\n\n\n\n<p>Program Output.<\/p>\n\n\n\n<pre title=\"Output\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">[A, B, C, D, E]<\/code><\/pre>\n\n\n\n<h3 id=\"h-3-2-sort-strings-in-reverse-order\">3.2. Sort Strings in Reverse Order<\/h3>\n\n\n\n<p>Java program to sort a list of strings in reverse order using Comparable interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n \nlist.add(\"E\");\nlist.add(\"A\");\nlist.add(\"C\");\nlist.add(\"B\");\nlist.add(\"D\");\n \n\/\/Sort in reverse natural order\nCollections.sort(list, Collections.reverseOrder());\n \nSystem.out.println(list);<\/code><\/pre>\n\n\n\n<p>Program Output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">[E, D, C, B, A]<\/code><\/pre>\n\n\n\n<h3 id=\"h-3-3-sorting-integers\">3.3. Sorting Integers<\/h3>\n\n\n\n<p>Java program to sort a list of integers, on natural order and reverse order, using Comparable interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n         \nlist.add(10);\nlist.add(300);\nlist.add(45);\nlist.add(2);\nlist.add(5);\n \n\/\/Natural order\nCollections.sort(list);\n \nSystem.out.println(list);\n \n\/\/Sort in reverse natural order\nCollections.sort(list, Collections.reverseOrder());\n \nSystem.out.println(list);<\/code><\/pre>\n\n\n\n<p>Program Output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">[2, 5, 10, 45, 300]\n[300, 45, 10, 5, 2]<\/code><\/pre>\n\n\n\n<h3 id=\"h-3-4-sort-list-of-custom-objects\">3.4. Sort List of Custom Objects<\/h3>\n\n\n\n<p>In this example, we are <strong>sorting a list of employees by id<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee&gt; list = new ArrayList&lt;&gt;();\n         \nlist.add(new Employee(22l, \"Lokesh\", LocalDate.now()));\nlist.add(new Employee(18l, \"Alex\", LocalDate.now()));\nlist.add(new Employee(30l, \"Bob\", LocalDate.now()));\nlist.add(new Employee(600l, \"Charles\", LocalDate.now()));\nlist.add(new Employee(5l, \"David\", LocalDate.now()));\n \n\/\/Natural order\nCollections.sort(list);\n \nSystem.out.println(list);\n \n\/\/Sort in reverse natural order\nCollections.sort(list, Collections.reverseOrder());\n \nSystem.out.println(list);<\/code><\/pre>\n\n\n\n<p>Program Output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">[\n    Employee [id=5, name=David, dob=2018-10-29], \n    Employee [id=18, name=Alex, dob=2018-10-29], \n    Employee [id=22, name=Lokesh, dob=2018-10-29], \n    Employee [id=30, name=Bob, dob=2018-10-29], \n    Employee [id=600, name=Charles, dob=2018-10-29]\n]\n \n\/\/Reverse sorted\n \n[\n    Employee [id=600, name=Charles, dob=2018-10-30], \n    Employee [id=30, name=Bob, dob=2018-10-30], \n    Employee [id=22, name=Lokesh, dob=2018-10-30], \n    Employee [id=18, name=Alex, dob=2018-10-30], \n    Employee [id=5, name=David, dob=2018-10-30]\n]<\/code><\/pre>\n\n\n\n<h2 id=\"h-4-conclusion\">4. Conclusion<\/h2>\n\n\n\n<p>In this tutorial, we learned about <em>Comparable<\/em> interface. This interface helps in imposing a natural order on objects with simple interface implementation. We also learned to sort a list of strings, array of strings, list of integers, and array of integers. We learned how to sort <em>Employee<\/em> objects in Java using <em>Comparable<\/em>.<\/p>\n\n\n\n<p>Refer to <a href=\"https:\/\/howtodoinjava.com\/java\/sort\/java-sorting\/\" target=\"_blank\" rel=\"noreferrer noopener\">Guide to Sorting in Java<\/a> for more information.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java Comparable interface is part of Collection Framework. Learn the purpose of Comparable interface and use it in different scenarios. 1. Comparable Interface 1.1. Why Implement Comparable? In Java, if we want to sort a List of elements then we can Collections.sort() method. It sorts the list items according to the&nbsp;natural ordering. All Java wrapper &#8230; <a title=\"Java Comparable Interface\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-comparable-interface\/\" aria-label=\"More on Java Comparable Interface\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":18641,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[785],"tags":[1453],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo-300x300.png",300,300,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"Java Comparable interface is part of Collection Framework. Learn the purpose of Comparable interface and use it in different scenarios. 1. Comparable Interface 1.1. Why Implement Comparable? In Java, if we want to sort a List of elements then we can Collections.sort() method. It sorts the list items according to the&nbsp;natural ordering. All Java wrapper&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/11997"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=11997"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/11997\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/18641"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=11997"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=11997"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=11997"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}