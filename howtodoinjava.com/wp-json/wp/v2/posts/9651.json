{"id":9651,"date":"2017-10-01T14:21:20","date_gmt":"2017-10-01T08:51:20","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=9651"},"modified":"2022-05-30T14:16:30","modified_gmt":"2022-05-30T08:46:30","slug":"spring5-mvc-hibernate5-example","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/spring5\/webmvc\/spring5-mvc-hibernate5-example\/","title":{"rendered":"Spring MVC and Hibernate CRUD Example"},"content":{"rendered":"\n<p>In this <strong>Spring MVC and Hibernate annotation example<\/strong>, learn the following concepts: <\/p>\n\n\n\n<ul><li>Create a Spring 5 MVC web application from scratch<\/li><li>Handle form submission<\/li><li>Integrate hibernate persistence to connect to the HSQL database <\/li><li>Add hibernate validator for input form <a href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-bean-validation-using-hibernate-validator-provider\/\">fields validation<\/a><\/li><\/ul>\n\n\n\n<p>We will create a simple application where we can create user information (name and email). The user details will be first validated and then stored in <a href=\"https:\/\/howtodoinjava.com\/hibernate\/hibernate-in-memory-database-with-junit\/\">HSQL database using hibernate<\/a>. Another page will list down all stored users in the database.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-15fcd78c \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-development-environment\">1. Development Environment<\/a><li class=\"uagb-toc__list\"><a href=\"#2-project-structure-and-class-diagram\">2. Project Structure and Class Diagram<\/a><li class=\"uagb-toc__list\"><a href=\"#3-maven-dependencies\">3. Maven Dependencies<\/a><li class=\"uagb-toc__list\"><a href=\"#4-dispatcherservlet-configuration\">4. DispatcherServlet Configuration<\/a><li class=\"uagb-toc__list\"><a href=\"#5-spring-webmvc-configuration\">5. Spring WebMVC Configuration<\/a><li class=\"uagb-toc__list\"><a href=\"#6-hibernate-configuration\">6. Hibernate Configuration<\/a><li class=\"uagb-toc__list\"><a href=\"#7-web-controller-and-mappings\">7. Web Controller and Mappings<\/a><li class=\"uagb-toc__list\"><a href=\"#8-service-and-dao-layer\">8. Service and DAO layer<\/a><li class=\"uagb-toc__list\"><a href=\"#9-views-and-message-resources\">9. Views and Message Resources<\/a><li class=\"uagb-toc__list\"><a href=\"#10-demo\">10. Demo<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. Development Environment<\/h2>\n\n\n\n<ul><li>Eclipse Neon.2<\/li><li>JDK 1.8<\/li><li>Spring 5.2.0.RELEASE<\/li><li>Hibernate 5.2.11.Final<\/li><li>Hibernate validator 5.4.1.Final<\/li><li>Servlets 3.1.0<\/li><li>HSQLDB 1.8.0.10<\/li><li>Tomcat 7 maven plugin 2.2<\/li><\/ul>\n\n\n\n<h2>2. Project Structure and Class Diagram<\/h2>\n\n\n\n<p>This project has a typical <a href=\"https:\/\/howtodoinjava.com\/maven\/maven-web-project-in-eclipse\/\" target=\"_blank\" rel=\"noreferrer noopener\">maven web application<\/a> structure.<\/p>\n\n\n<div class=\"wp-block-image size-full wp-image-9652\">\n<figure class=\"aligncenter\"><img loading=\"lazy\" width=\"331\" height=\"651\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Spring5-WebMVC-Project-Structure.png\" alt=\"Spring5 WebMVC Project Structure\" class=\"wp-image-9652\"\/><figcaption>Spring5 WebMVC Project Structure<\/figcaption><\/figure><\/div>\n\n\n<p>The Class Diagram of the application is as follows:<\/p>\n\n\n<div class=\"wp-block-image size-full wp-image-9653\">\n<figure class=\"aligncenter\"><img loading=\"lazy\" width=\"978\" height=\"473\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Class-Diagram.png\" alt=\"Class Diagram\" class=\"wp-image-9653\"\/><figcaption>Class Diagram<\/figcaption><\/figure><\/div>\n\n\n<h2>3. Maven Dependencies<\/h2>\n\n\n\n<p>Find project dependencies used to run this example in <code>pom.xml<\/code> file.<\/p>\n\n\n\n<pre title=\"pom.xml\" class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd;\r\n  &lt;modelVersion>4.0.0&lt;\/modelVersion>\r\n  &lt;groupId>com.howtodoinjava.spring5.demo&lt;\/groupId>\r\n  &lt;artifactId>spring5-mvc-hibernate-example&lt;\/artifactId>\r\n  &lt;version>0.0.1-SNAPSHOT&lt;\/version>\r\n  &lt;packaging>war&lt;\/packaging>\r\n  &lt;properties>\r\n    &lt;failOnMissingWebXml>false&lt;\/failOnMissingWebXml>\r\n    &lt;spring.version>5.2.0.RELEASE&lt;\/spring.version>\r\n    &lt;hibernate.version>5.2.11.Final&lt;\/hibernate.version>\r\n    &lt;hibernate.validator>5.4.1.Final&lt;\/hibernate.validator>\r\n    &lt;c3p0.version>0.9.5.2&lt;\/c3p0.version>\r\n    &lt;jstl.version>1.2.1&lt;\/jstl.version>\r\n    &lt;tld.version>1.1.2&lt;\/tld.version>\r\n    &lt;servlets.version>3.1.0&lt;\/servlets.version>\r\n    &lt;jsp.version>2.3.1&lt;\/jsp.version>\r\n    &lt;hsqldb.version>1.8.0.10&lt;\/hsqldb.version>\r\n  &lt;\/properties>\r\n  &lt;dependencies>\r\n    &lt;!-- Spring MVC Dependency -->\r\n    &lt;dependency>\r\n      &lt;groupId>org.springframework&lt;\/groupId>\r\n      &lt;artifactId>spring-webmvc&lt;\/artifactId>\r\n      &lt;version>${spring.version}&lt;\/version>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- Spring ORM -->\r\n    &lt;dependency>\r\n      &lt;groupId>org.springframework&lt;\/groupId>\r\n      &lt;artifactId>spring-orm&lt;\/artifactId>\r\n      &lt;version>${spring.version}&lt;\/version>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- Hibernate Core -->\r\n    &lt;dependency>\r\n      &lt;groupId>org.hibernate&lt;\/groupId>\r\n      &lt;artifactId>hibernate-core&lt;\/artifactId>\r\n      &lt;version>${hibernate.version}&lt;\/version>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- Hibernate-C3P0 Integration -->\r\n    &lt;dependency>\r\n      &lt;groupId>org.hibernate&lt;\/groupId>\r\n      &lt;artifactId>hibernate-c3p0&lt;\/artifactId>\r\n      &lt;version>${hibernate.version}&lt;\/version>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- c3p0 -->\r\n    &lt;dependency>\r\n      &lt;groupId>com.mchange&lt;\/groupId>\r\n      &lt;artifactId>c3p0&lt;\/artifactId>\r\n      &lt;version>${c3p0.version}&lt;\/version>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- Hibernate Validator -->\r\n    &lt;dependency>\r\n      &lt;groupId>org.hibernate&lt;\/groupId>\r\n      &lt;artifactId>hibernate-validator&lt;\/artifactId>\r\n      &lt;version>${hibernate.validator}&lt;\/version>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- JSTL Dependency -->\r\n    &lt;dependency>\r\n      &lt;groupId>javax.servlet.jsp.jstl&lt;\/groupId>\r\n      &lt;artifactId>javax.servlet.jsp.jstl-api&lt;\/artifactId>\r\n      &lt;version>${jstl.version}&lt;\/version>\r\n    &lt;\/dependency>\r\n     \r\n    &lt;dependency>\r\n      &lt;groupId>taglibs&lt;\/groupId>\r\n      &lt;artifactId>standard&lt;\/artifactId>\r\n      &lt;version>${tld.version}&lt;\/version>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- Servlet Dependency -->\r\n    &lt;dependency>\r\n      &lt;groupId>javax.servlet&lt;\/groupId>\r\n      &lt;artifactId>javax.servlet-api&lt;\/artifactId>\r\n      &lt;version>${servlets.version}&lt;\/version>\r\n      &lt;scope>provided&lt;\/scope>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- JSP Dependency -->\r\n    &lt;dependency>\r\n      &lt;groupId>javax.servlet.jsp&lt;\/groupId>\r\n      &lt;artifactId>javax.servlet.jsp-api&lt;\/artifactId>\r\n      &lt;version>${jsp.version}&lt;\/version>\r\n      &lt;scope>provided&lt;\/scope>\r\n    &lt;\/dependency>\r\n \r\n    &lt;!-- HSQL Dependency -->\r\n    &lt;dependency>\r\n      &lt;groupId>hsqldb&lt;\/groupId>\r\n      &lt;artifactId>hsqldb&lt;\/artifactId>\r\n      &lt;version>${hsqldb.version}&lt;\/version>\r\n    &lt;\/dependency>\r\n  &lt;\/dependencies>\r\n \r\n  &lt;build>\r\n    &lt;sourceDirectory>src\/main\/java&lt;\/sourceDirectory>\r\n    &lt;resources>\r\n      &lt;resource>\r\n        &lt;directory>src\/main\/resources&lt;\/directory>\r\n      &lt;\/resource>\r\n    &lt;\/resources>\r\n    &lt;plugins>\r\n      &lt;plugin>\r\n        &lt;artifactId>maven-compiler-plugin&lt;\/artifactId>\r\n        &lt;version>3.5.1&lt;\/version>\r\n        &lt;configuration>\r\n          &lt;source>1.8&lt;\/source>\r\n          &lt;target>1.8&lt;\/target>\r\n        &lt;\/configuration>\r\n      &lt;\/plugin>\r\n      &lt;plugin>\r\n        &lt;groupId>org.apache.tomcat.maven&lt;\/groupId>\r\n        &lt;artifactId>tomcat7-maven-plugin&lt;\/artifactId>\r\n        &lt;version>2.2&lt;\/version>\r\n        &lt;configuration>\r\n          &lt;path>\/&lt;\/path>\r\n        &lt;\/configuration>\r\n      &lt;\/plugin>\r\n    &lt;\/plugins>\r\n  &lt;\/build>\r\n&lt;\/project><\/code><\/pre>\n\n\n\n<h2>4. <em>DispatcherServlet<\/em> Configuration<\/h2>\n\n\n\n<p>Begining with Servlet 3, it became possible to configure your Servlet Container with (almost) no XML. For this, there is the <code>ServletContainerInitializer<\/code> in the Servlet specification. In this class, we can register <em>filters<\/em>, <em>listeners<\/em>, <em>servlets <\/em>etc. as we would traditionally do in a <code>web.xml<\/code>.<\/p>\n\n\n\n<p>Spring provides <code>SpringServletContainerInitializer<\/code> that knows how to handle <code>WebApplicationInitializer<\/code> classes. <code>AbstractAnnotationConfigDispatcherServletInitializer<\/code> class implements <code>WebMvcConfigurer<\/code> which internally implements <code>WebApplicationInitializer<\/code>. It registers a <code>ContextLoaderlistener<\/code> (optionally) and a <code>DispatcherServlet<\/code> and allows you to easily add configuration classes to load for both classes and to apply filters to the <strong>DispatcherServlet<\/strong> and to provide the servlet mapping.<\/p>\n\n\n\n<pre title=\"AppInitializer.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class AppInitializer extends\r\n    AbstractAnnotationConfigDispatcherServletInitializer {\r\n \r\n   @Override\r\n   protected Class&lt;?>[] getRootConfigClasses() {\r\n      return new Class[] { HibernateConfig.class };\r\n   }\r\n \r\n   @Override\r\n   protected Class&lt;?>[] getServletConfigClasses() {\r\n      return new Class[] { WebMvcConfig.class };\r\n   }\r\n \r\n   @Override\r\n   protected String[] getServletMappings() {\r\n      return new String[] { \"\/\" };\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h2>5. Spring WebMVC Configuration<\/h2>\n\n\n\n<p>Spring MVC configuration using annotations is given below.<\/p>\n\n\n\n<pre title=\"WebMvcConfig.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Configuration\r\n@EnableWebMvc\r\n@ComponentScan(basePackages = { \"com.howtodoinjava.demo.spring\"})\r\npublic class WebMvcConfig implements WebMvcConfigurer {\r\n \r\n   @Bean\r\n   public InternalResourceViewResolver resolver() {\r\n      InternalResourceViewResolver resolver = new InternalResourceViewResolver();\r\n      resolver.setViewClass(JstlView.class);\r\n      resolver.setPrefix(\"\/WEB-INF\/views\/\");\r\n      resolver.setSuffix(\".jsp\");\r\n      return resolver;\r\n   }\r\n \r\n   @Bean\r\n   public MessageSource messageSource() {\r\n      ResourceBundleMessageSource source = new ResourceBundleMessageSource();\r\n      source.setBasename(\"messages\");\r\n      return source;\r\n   }\r\n \r\n   @Override\r\n   public Validator getValidator() {\r\n      LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();\r\n      validator.setValidationMessageSource(messageSource());\r\n      return validator;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<ol><li><code><a href=\"https:\/\/docs.spring.io\/spring-framework\/docs\/current\/javadoc-api\/org\/springframework\/web\/servlet\/config\/annotation\/WebMvcConfigurer.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebMvcConfigurer<\/a><\/code> defines options for customizing or adding to the default Spring MVC configuration enabled through the use of <code>@EnableWebMvc<\/code>.<\/li><li><code>@EnableWebMvc<\/code> enables default Spring MVC configuration and registers Spring MVC infrastructure components expected by the <code>DispatcherServlet<\/code>.<\/li><li><code>@Configuration<\/code> indicates that a class declares one or more <code>@Bean<\/code> methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime.<\/li><li><code>@ComponentScan<\/code> annotation is used to specify the base packages to scan. Any class which is annotated with @Component and @Configuration will be scanned.<\/li><li><code>InternalResourceViewResolver<\/code> helps in mapping the logical view names to directly view files under a certain pre-configured directory.<\/li><li><code>ResourceBundleMessageSource<\/code> accesses resource bundles using specified basenames (here it is messages).<\/li><li><code>LocalValidatorFactoryBean<\/code> bootstraps a <code>javax.validation.ValidationFactory<\/code> and exposes it through the Spring <code>Validator<\/code> interface as well as through the JSR-303 <code>Validator<\/code> interface and the <code>ValidatorFactory<\/code> interface itself.<\/li><\/ol>\n\n\n\n<h2>6. Hibernate Configuration<\/h2>\n\n\n\n<p>Hibernate configuration used in the example is based on <strong>hibernate Java based configuration<\/strong>. <\/p>\n\n\n\n<pre title=\"HibernateConfig.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Configuration\r\n@EnableTransactionManagement\r\npublic class HibernateConfig {\r\n \r\n  @Autowired\r\n  private ApplicationContext context;\r\n \r\n  @Bean\r\n  public LocalSessionFactoryBean getSessionFactory() {\r\n    LocalSessionFactoryBean factoryBean = new LocalSessionFactoryBean();\r\n    factoryBean.setConfigLocation(context.getResource(\"classpath:hibernate.cfg.xml\"));\r\n    factoryBean.setAnnotatedClasses(User.class);\r\n    return factoryBean;\r\n  }\r\n \r\n  @Bean\r\n  public HibernateTransactionManager getTransactionManager() {\r\n    HibernateTransactionManager transactionManager = new HibernateTransactionManager();\r\n    transactionManager.setSessionFactory(getSessionFactory().getObject());\r\n    return transactionManager;\r\n  }\r\n}<\/code><\/pre>\n\n\n\n<ul><li><code>LocalSessionFactoryBean<\/code> creates a <a href=\"https:\/\/howtodoinjava.com\/hibernate\/hibarnate-build-sessionfactory\/\">Hibernate <code>SessionFactory<\/code><\/a>. This is the usual way to set up a shared Hibernate SessionFactory in a Spring application context.<\/li><li><code>EnableTransactionManagement<\/code> enables Spring&#8217;s annotation-driven transaction management capability.<\/li><li><code>HibernateTransactionManager<\/code> binds a Hibernate Session from the specified factory to the thread, potentially allowing for one thread-bound Session per factory. This transaction manager is appropriate for applications that use a single Hibernate <code>SessionFactory<\/code> for transactional data access, but it also supports direct <code>DataSource<\/code> access within a transaction i.e. plain JDBC.<\/li><\/ul>\n\n\n\n<pre title=\"hibernate.cfg.xml\" class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;!DOCTYPE hibernate-configuration PUBLIC\n\"-\/\/Hibernate\/Hibernate Configuration DTD 3.0\/\/EN\"\n\"http:\/\/hibernate.sourceforge.net\/hibernate-configuration-3.0.dtd\">\n&lt;hibernate-configuration>\n  &lt;session-factory>\n    &lt;property name=\"hibernate.archive.autodetection\">class,hbm&lt;\/property>\n    &lt;property name=\"hibernate.dialect\">org.hibernate.dialect.HSQLDialect&lt;\/property>\n    &lt;property name=\"hibernate.show_sql\">true&lt;\/property>\n    &lt;property name=\"hibernate.connection.driver_class\">org.hsqldb.jdbcDriver&lt;\/property>\n    &lt;property name=\"hibernate.connection.username\">sa&lt;\/property>\n    &lt;property name=\"hibernate.connection.password\">&lt;\/property>\n    &lt;property name=\"hibernate.connection.url\">jdbc:hsqldb:mem:howtodoinjava&lt;\/property>\n    &lt;property name=\"hibernate.hbm2ddl.auto\">create&lt;\/property>\n     \n    &lt;property name=\"hibernate.c3p0.min_size\">5&lt;\/property>\n    &lt;property name=\"hibernate.c3p0.max_size\">20&lt;\/property>\n    &lt;property name=\"hibernate.c3p0.acquire_increment\">2&lt;\/property>\n    &lt;property name=\"hibernate.c3p0.timeout\">1800&lt;\/property>\n    &lt;property name=\"hibernate.c3p0.max_statements\">150&lt;\/property>\n  &lt;\/session-factory>\n&lt;\/hibernate-configuration><\/code><\/pre>\n\n\n\n<h2>7. Web Controller and Mappings<\/h2>\n\n\n\n<p>The controller class has two simple <a href=\"https:\/\/howtodoinjava.com\/spring5\/webmvc\/controller-getmapping-postmapping\/\">REST mappings<\/a> for <code>GET<\/code> and <code>POST<\/code> operations. If input fields are not validated, then return the same form bean to display error messages. Else return refreshed view.<\/p>\n\n\n\n<pre title=\"UserController.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Controller\r\npublic class UserController {\r\n \r\n  @Autowired\r\n  private UserService userService;\r\n \r\n  @GetMapping(\"\/\")\r\n  public String userForm(Locale locale, Model model) {\r\n    model.addAttribute(\"users\", userService.list());\r\n    return \"editUsers\";\r\n  }\r\n   \r\n  @ModelAttribute(\"user\")\r\n    public User formBackingObject() {\r\n        return new User();\r\n    }\r\n \r\n  @PostMapping(\"\/addUser\")\r\n  public String saveUser(@ModelAttribute(\"user\") @Valid User user, \r\n              BindingResult result, Model model) {\r\n \r\n    if (result.hasErrors()) {\r\n      model.addAttribute(\"users\", userService.list());\r\n      return \"editUsers\";\r\n    }\r\n \r\n    userService.save(user);\r\n    return \"redirect:\/\";\r\n  }\r\n}<\/code><\/pre>\n\n\n\n<h2>8. Service and DAO layer<\/h2>\n\n\n\n<p>Service and DAO layer are normal service components annotated with <a href=\"https:\/\/howtodoinjava.com\/spring-core\/stereotype-annotations\/\"><code>@Service<\/code> and <code>@Repository<\/code> annotations<\/a>. <code>@Transactional<\/code> annotation is applied at service layer for transaction support.<\/p>\n\n\n\n<pre title=\"Service Classes\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public interface UserService {\r\n   void save(User user);\r\n \r\n   List&lt;User> list();\r\n}\r\n \r\n@Service\r\npublic class UserServiceImp implements UserService {\r\n \r\n   @Autowired\r\n   private UserDao userDao;\r\n \r\n   @Transactional\r\n   public void save(User user) {\r\n      userDao.save(user);\r\n   }\r\n \r\n   @Transactional(readOnly = true)\r\n   public List&lt;User> list() {\r\n      return userDao.list();\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<pre title=\"DAO Classes\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public interface UserDao {\r\n   void save(User user);\r\n   List&lt;User> list();\r\n}\r\n \r\n@Repository\r\npublic class UserDaoImp implements UserDao {\r\n \r\n   @Autowired\r\n   private SessionFactory sessionFactory;\r\n \r\n   @Override\r\n   public void save(User user) {\r\n      sessionFactory.getCurrentSession().save(user);\r\n   }\r\n \r\n   @Override\r\n   public List&lt;User> list() {\r\n      @SuppressWarnings(\"unchecked\")\r\n      TypedQuery&lt;User> query = sessionFactory.getCurrentSession().createQuery(\"from User\");\r\n      return query.getResultList();\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<pre title=\"User.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Entity\r\n@Table(name = \"TBL_USERS\")\r\npublic class User {\r\n \r\n   @Id\r\n   @GeneratedValue\r\n   @Column(name = \"USER_ID\")\r\n   private Long id;\r\n \r\n   @Column(name = \"USER_NAME\")\r\n   @Size(max = 20, min = 3, message = \"{user.name.invalid}\")\r\n   @NotEmpty(message=\"Please Enter your name\")\r\n   private String name;\r\n \r\n   @Column(name = \"USER_EMAIL\", unique = true)\r\n   @Email(message = \"{user.email.invalid}\")\r\n   @NotEmpty(message=\"Please Enter your email\")\r\n   private String email;\r\n \r\n   public Long getId() {\r\n      return id;\r\n   }\r\n \r\n   public void setId(Long id) {\r\n      this.id = id;\r\n   }\r\n \r\n   public String getName() {\r\n      return name;\r\n   }\r\n \r\n   public void setName(String name) {\r\n      this.name = name;\r\n   }\r\n \r\n   public String getEmail() {\r\n      return email;\r\n   }\r\n \r\n   public void setEmail(String email) {\r\n      this.email = email;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h2>9. Views and Message Resources<\/h2>\n\n\n\n<p>Finally, the JSP files and <a href=\"https:\/\/howtodoinjava.com\/spring-core\/resolving-text-messages-in-spring-resourcebundlemessagesource-example\/\">messages resource bundle<\/a> is given below.<\/p>\n\n\n\n<pre title=\"editUsers.jsp\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;%@ page language=\"java\" contentType=\"text\/html; charset=ISO-8859-1\"\r\n  pageEncoding=\"ISO-8859-1\"%>\r\n&lt;%@taglib uri=\"http:\/\/www.springframework.org\/tags\/form\" prefix=\"form\"%>\r\n&lt;%@taglib uri=\"http:\/\/java.sun.com\/jsp\/jstl\/core\" prefix=\"c\"%>\r\n&lt;!DOCTYPE html>\r\n&lt;html>\r\n    &lt;head>\r\n    &lt;meta http-equiv=\"Content-Type\" content=\"text\/html; charset=ISO-8859-1\">\r\n    &lt;title>Spring5 MVC Hibernate Demo&lt;\/title>\r\n    &lt;style type=\"text\/css\">\r\n      .error {\r\n        color: red;\r\n      }\r\n      table {\r\n        width: 50%;\r\n        border-collapse: collapse;\r\n        border-spacing: 0px;\r\n      }\r\n      table td {\r\n        border: 1px solid #565454;\r\n        padding: 20px;\r\n      }\r\n    &lt;\/style>\r\n  &lt;\/head>\r\n  &lt;body>\r\n    &lt;h1>Input Form&lt;\/h1>\r\n    &lt;form:form action=\"addUser\" method=\"post\" modelAttribute=\"user\">\r\n      &lt;table>\r\n        &lt;tr>\r\n          &lt;td>Name&lt;\/td>\r\n          &lt;td>\r\n            &lt;form:input path=\"name\" \/> &lt;br \/>\r\n            &lt;form:errors path=\"name\" cssClass=\"error\" \/>\r\n          &lt;\/td>\r\n        &lt;\/tr>\r\n        &lt;tr>\r\n          &lt;td>Email&lt;\/td>\r\n          &lt;td>\r\n            &lt;form:input path=\"email\" \/> &lt;br \/>\r\n            &lt;form:errors path=\"email\" cssClass=\"error\" \/>\r\n          &lt;\/td>\r\n        &lt;\/tr>\r\n        &lt;tr>\r\n          &lt;td colspan=\"2\">&lt;button type=\"submit\">Submit&lt;\/button>&lt;\/td>\r\n        &lt;\/tr>\r\n      &lt;\/table>\r\n    &lt;\/form:form>\r\n     \r\n    &lt;h2>Users List&lt;\/h2>\r\n    &lt;table>\r\n      &lt;tr>\r\n        &lt;td>&lt;strong>Name&lt;\/strong>&lt;\/td>\r\n        &lt;td>&lt;strong>Email&lt;\/strong>&lt;\/td>\r\n      &lt;\/tr>\r\n      &lt;c:forEach items=\"${users}\" var=\"user\">\r\n        &lt;tr>\r\n          &lt;td>${user.name}&lt;\/td>\r\n          &lt;td>${user.email}&lt;\/td>\r\n        &lt;\/tr>\r\n      &lt;\/c:forEach>\r\n    &lt;\/table>\r\n  &lt;\/body>\r\n&lt;\/html><\/code><\/pre>\n\n\n\n<pre title=\"messages.properties\" class=\"wp-block-code\"><code lang=\"properties\" class=\"language-properties\">user.name.invalid = Name must be between {2} and {1} characters.\nuser.email.invalid = Please enter valid email address.<\/code><\/pre>\n\n\n\n<h2>10. Demo<\/h2>\n\n\n\n<p>Let&#8217;s run the application using <a href=\"https:\/\/howtodoinjava.com\/maven\/tomcat-maven-plugin-example\/\" target=\"_blank\" rel=\"noreferrer noopener\">maven tomcat7 plugin<\/a>. Execute maven goal : <code>tomcat7:run<\/code>.<\/p>\n\n\n\n<p>URL: <code>http:\/\/localhost:8080<\/code><\/p>\n\n\n<div class=\"wp-block-image size-full wp-image-9654\">\n<figure class=\"aligncenter\"><img loading=\"lazy\" width=\"653\" height=\"416\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Initial-Screen.png\" alt=\"Initial Screen\" class=\"wp-image-9654\"\/><figcaption>Initial Screen<\/figcaption><\/figure><\/div>\n\n<div class=\"wp-block-image size-full wp-image-9655\">\n<figure class=\"aligncenter\"><img loading=\"lazy\" width=\"657\" height=\"429\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Invalid-Input-Validation.png\" alt=\"Invalid Input Validation\" class=\"wp-image-9655\"\/><figcaption>Invalid Input Validation<\/figcaption><\/figure><\/div>\n\n<div class=\"wp-block-image size-full wp-image-9656\">\n<figure class=\"aligncenter\"><img loading=\"lazy\" width=\"654\" height=\"450\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png\" alt=\"Valid Form Submission\" class=\"wp-image-9656\"\/><figcaption>Valid Form Submission<\/figcaption><\/figure><\/div>\n\n\n<p>Check Server logs.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"log\" class=\"language-log\">Hibernate: call next value for hibernate_sequence\nHibernate: insert into TBL_USERS (USER_EMAIL, USER_NAME, USER_ID) values (?, ?, ?)\nHibernate: select user0_.USER_ID as USER_ID1_0_, user0_.USER_EMAIL as USER_EMA2_0_,\n\t\t\tuser0_.USER_NAME as USER_NAM3_0_ from TBL_USERS user0_<\/code><\/pre>\n\n\n\n<p>I hope that you have found this spring hibernate web application example to set you to start for developing your own application. This is primarily for beginners, yet it will help you build any <strong>Spring MVC with hibernate integration example with annotations<\/strong>.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/spring-webmvc\">Sourcecode on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>In Spring 5 MVC and Hibernate 5 annotation example, learn to create a CRUD application that connects with validator and persistence layers.<\/p>\n","protected":false},"author":2,"featured_media":9656,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1103],"tags":[1465,1558,1557],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png",654,450,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png",150,103,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png",300,206,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png",654,450,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png",654,450,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png",654,450,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png",654,450,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/10\/Valid-Form-Submission.png",120,83,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"In Spring 5 MVC and Hibernate 5 annotation example, learn to create a CRUD application that connects with validator and persistence layers.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/9651"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=9651"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/9651\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/9656"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=9651"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=9651"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=9651"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}