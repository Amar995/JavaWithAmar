{"id":10373,"date":"2018-05-18T18:03:59","date_gmt":"2018-05-18T12:33:59","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=10373"},"modified":"2022-01-25T01:59:33","modified_gmt":"2022-01-24T20:29:33","slug":"java-comments","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/java-comments\/","title":{"rendered":"Java Comments"},"content":{"rendered":"<p>Learn everything about <strong>Java comments<\/strong>, <strong>types of Java comments<\/strong>, <strong>Javadoc<\/strong> tool, <strong>performance impact<\/strong> of comments and <strong>best practices<\/strong> to follow.<\/p>\n<h2>1. Why write Java comments?<\/h2>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-tutorial\/\">Java<\/a> comments, as the name suggests, are notes you write between the programs for various reasons. For example, you may write comments to &#8211;<\/p>\n<ul>\n<li>write information or explanation about the variable, method, class or any statement.<\/li>\n<li>write text to be available in Java docs.<\/li>\n<li>hide program code for specific time, etc.<\/li>\n<\/ul>\n<h4>1.1. Java comments example<\/h4>\n<p>Given code is an <strong>example of Java comments<\/strong>, and how to use them.<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\n\/**\r\n * Contains method to greet users by their name and location.\r\n * \r\n * @author Lokesh Gupta\r\n *\/\r\npublic class Main {\r\n\t\r\n\t\/**\r\n\t * Launches the application\r\n\t * \r\n\t * @param args - Application startup arguments\r\n\t *\/\r\n\tpublic static void main(String[] args) {\r\n\t\tgetMessage(&quot;Lokesh&quot;, &quot;India&quot;);\r\n\t}\r\n\t\r\n\t\/**\r\n\t * Returns welcome message for a customer by customer name and location\r\n\t * \r\n\t * @param name - Name of the visitor\r\n\t * @param region - Location\r\n\t * @return - Welcome message\r\n\t *\/\r\n\tpublic static String getMessage (String name, String region) \r\n\t{\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(&quot;Hello &quot;);\r\n\t\tbuilder.append(name);\r\n\t\tbuilder.append(&quot;, Welcome to &quot;);\r\n\t\tbuilder.append(region);\r\n\t\tbuilder.append(&quot; !!&quot;);\r\n\t\treturn builder.toString();\r\n\t}\r\n}\r\n<\/pre>\n<h2>2. Types of Java Comments<\/h2>\n<p>There are <strong>3 types of comments in Java<\/strong>.<\/p>\n<ol>\n<li>\n<h4>Single Line Comment<\/h4>\n<p>Use single line comment when comment can be written in a single line only. These comments are written over Java statements to clarify what they are doing.<\/p>\n<pre class=\"brush: java; title: Single line comment; notranslate\" title=\"Single line comment\">\r\n\/\/Initialize the counter variable to 0\r\nint counter = 0;\r\n<\/pre>\n<\/li>\n<li>\n<h4>Multi Line Comment<\/h4>\n<p>Use multi-line comments when you need to add information in source code which exceeds to more than one line. Multi-line comments are used mostly above code blocks which have complex logic that cannot be written in single line.<\/p>\n<pre class=\"brush: java; title: Multi-line comment; notranslate\" title=\"Multi-line comment\">\r\n\/*\r\n * This function returns a variable which shall be used as a counter for any loop.\r\n * Counter variable is of integer type and should not be reset during execution.\r\n *\/\r\npublic int getCounter() {\r\n\t\/\/\r\n}\r\n<\/pre>\n<\/li>\n<li>\n<h4>Documentation Comment<\/h4>\n<p>The documentation comments are used when you want to expose information to be picked up by the <code>javadoc<\/code> tool. This is the information you see in editors (e.g. eclipse) when using <strong>autocomplete<\/strong> feature. These comments are pit above classes, interfaces and method definitions.<\/p>\n<blockquote><p>Documentation comment start with <code>\/**<\/code> and end with <code>*\/<\/code>.<\/p><\/blockquote>\n<p>You can use <strong>javadoc annotations<\/strong> inside these comments e.g. <code>@param<\/code> and <code>@return<\/code>.<\/p>\n<pre class=\"brush: java; title: Documentation comment; notranslate\" title=\"Documentation comment\">\r\n\/**\r\n  * This function returns a variable which shall be used as a counter for any loop.\r\n  * Counter variable is of integer type and should not be reset during execution.\r\n  *\r\n  * @param seed - initial value of the counter\r\n  * @return counter value\r\n  *\/\r\npublic int getCounter(int seed) {\r\n\t\/\/\r\n}\r\n<\/pre>\n<p>Documentation comments are an integral part of programming and should not be skipped.<\/li>\n<\/ol>\n<h2>3. Comment shortcut<\/h2>\n<p>In Eclipse IDE, simply typing <strong>&#8220;\/** [Enter]&#8221;<\/strong> before a public method or class will automatically generate in all necessary <code>@param<\/code>, <code>@author<\/code> and <code>@return<\/code> attributes.<\/p>\n<figure id=\"attachment_11133\" aria-describedby=\"caption-attachment-11133\" style=\"width: 480px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-Comment-shortcut-in-eclipse.png\" alt=\"Java Comment shortcut in eclipse\" width=\"490\" height=\"193\" class=\"size-full wp-image-11133\" \/><figcaption id=\"caption-attachment-11133\" class=\"wp-caption-text\">Java Comment shortcut in eclipse<\/figcaption><\/figure>\n<h2>4. Javadoc Utility<\/h2>\n<p><strong>javadoc<\/strong> utility is bundled with JDK distributions. It convert them into standardized, nicely formatted, easy-to-read web pages. It generates <strong>API documentation from documentation comments<\/strong>.<\/p>\n<h4>4.1. Run javadoc from command prompt<\/h4>\n<p>First, make sure <code>javadoc<\/code> utility is in your <strong>PATH<\/strong>. If not then add <strong>JDK\/bin<\/strong> folder to PATH variable.<\/p>\n<pre class=\"brush: java; title: Add javadoc location to PATH variable; notranslate\" title=\"Add javadoc location to PATH variable\">\r\n$ set PATH=.;C:\\BAML\\DFCCUI\\installs\\jdk1.8.0_31\\bin\r\n<\/pre>\n<p>To generate Java docs, execute utility with two arguments. First is <strong>location of generated Java docs<\/strong>, and second is <strong>Java source files<\/strong>. In our case, I executed this command from location where <code>Main.java<\/code> is.<\/p>\n<pre class=\"brush: java; title: Run javadoc command; notranslate\" title=\"Run javadoc command\">\r\n$ javadoc -d C:\/temp Main.java\r\n<\/pre>\n<p>It generated these Java docs HTML files.<\/p>\n<figure id=\"attachment_11135\" aria-describedby=\"caption-attachment-11135\" style=\"width: 1048px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Generated-Java-docs-2.png\" alt=\"Generated Java docs - 2\" width=\"1058\" height=\"536\" class=\"size-full wp-image-11135\" \/><figcaption id=\"caption-attachment-11135\" class=\"wp-caption-text\">Generated Java docs<\/figcaption><\/figure>\n<h4>4.2. Run javadoc from Eclipse<\/h4>\n<p>You can generate the Java documentation from Eclipse IDE as well. Follow these simple steps-<\/p>\n<ol>\n<li>In the <strong>Package Explorer<\/strong>, right-click the desired project\/package.<\/li>\n<li>Select <code><strong>Export...\/Javadoc<\/strong><\/code> and click <code>Next<\/code>.\n<figure id=\"attachment_11136\" aria-describedby=\"caption-attachment-11136\" style=\"width: 515px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Export-Java-Doc.png\" alt=\"Export Java Doc Option\" width=\"525\" height=\"461\" class=\"size-full wp-image-11136\" \/><figcaption id=\"caption-attachment-11136\" class=\"wp-caption-text\">Export Java Doc Option<\/figcaption><\/figure>\n<\/li>\n<li>By default, the entire source code will be selected. Verify and change your selections.\n<figure id=\"attachment_11138\" aria-describedby=\"caption-attachment-11138\" style=\"width: 680px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-Doc-Options-in-Eclipse.png\" alt=\"Java Doc Options in Eclipse\" width=\"690\" height=\"591\" class=\"size-full wp-image-11138\" \/><figcaption id=\"caption-attachment-11138\" class=\"wp-caption-text\">Java Doc Options in Eclipse<\/figcaption><\/figure>\n<\/li>\n<li>You may select &#8220;<code>Private<\/code>&#8221; for the visibility level to be generated. This will generate all possible Javadocs, even for private methods.<\/li>\n<li>Select the &#8220;<code>standard doclet<\/code>&#8221; which is the destination folder for your documentation.<\/li>\n<li>Click <code>Next<\/code>.<\/li>\n<li>Enter a meaningful <code>Document title<\/code> and click <code>Finish<\/code>.<\/li>\n<\/ol>\n<p>If you follow all above steps correctly, you will have generated Java docs file similar to what we saw in command prompt option.<\/p>\n<h2>5. Performance Impact of Java Comments<\/h2>\n<p>Implementation comments in Java code are only there for humans to read. The Java comments are statements that are not compiled by the compiler, so they are not included into compiled bytecode (<code>.class<\/code> file). <\/p>\n<p>And that&#8217;s why <strong>Java comments have no impact on application performance<\/strong> as well.<\/p>\n<h2>6. Java Comments Best Practices<\/h2>\n<p>Follow these <strong>best practices<\/strong> to have proper comments in your application sourcecode.<\/p>\n<ol>\n<li>Do not use unnecessary comments in sourcecode. If your code needs more than normal explanation, then possibly re-factor your code.<\/li>\n<li>Keep comments indentation uniform and match for best readability.<\/li>\n<li>Comments are for human so use simple language to explain.<\/li>\n<li>Always add documentation comments in your sourcecode.<\/li>\n<\/ol>\n<p>Happy Learning !!<\/p>\n<p>Read More-<\/p>\n<p><a href=\"https:\/\/www.oracle.com\/technical-resources\/articles\/java\/javadoc-tool.html\">Oracle recommendations for Javadoc<\/a><br \/>\n<a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/tools\/windows\/javadoc.html#javadoctags\">Javadoc tags reference<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn everything about Java comments, types of Java comments, Javadoc tool, performance impact of comments and best practices to follow. 1. Why write Java comments? Java comments, as the name suggests, are notes you write between the programs for various reasons. For example, you may write comments to &#8211; write information or explanation about the &#8230; <a title=\"Java Comments\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-comments\/\" aria-label=\"More on Java Comments\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":9504,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[4],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/08\/java9.png",580,300,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/08\/java9.png",150,78,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/08\/java9.png",300,155,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/08\/java9.png",580,300,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/08\/java9.png",580,300,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/08\/java9.png",580,300,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/08\/java9.png",580,300,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/08\/java9.png",120,62,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":3,"uagb_excerpt":"Learn everything about Java comments, types of Java comments, Javadoc tool, performance impact of comments and best practices to follow. 1. Why write Java comments? Java comments, as the name suggests, are notes you write between the programs for various reasons. For example, you may write comments to &#8211; write information or explanation about the&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/10373"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=10373"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/10373\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/9504"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=10373"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=10373"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=10373"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}