{"id":21608,"date":"2022-06-29T19:45:58","date_gmt":"2022-06-29T14:15:58","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=21608"},"modified":"2022-06-30T01:34:27","modified_gmt":"2022-06-29T20:04:27","slug":"mock-static-methods","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/mockito\/mock-static-methods\/","title":{"rendered":"Mock Static Methods with Mockito"},"content":{"rendered":"\n<p>Learn to <strong>mock the <em>static<\/em> methods using Mockito<\/strong> in <a href=\"https:\/\/howtodoinjava.com\/best-practices\/unit-testing-best-practices-junit-reference-guide\/\">unit testing<\/a> in Java. Previously, we had to <a href=\"https:\/\/howtodoinjava.com\/java\/library\/mock-testing-using-powermock-with-junit-and-mockito\/#4-mocking-a-static-method\">use PowerMock to mock private and static methods<\/a>, but <strong>starting version 3.4.0, Mockito supports mocking static methods directly<\/strong>. Read <a href=\"https:\/\/howtodoinjava.com\/mockito\/junit-mockito-example\/\">getting started with Mockito<\/a> guide for setup instructions.<\/p>\n\n\n\n<h2 id=\"h-1-maven-dependency\">1. Maven Dependency<\/h2>\n\n\n\n<p>To mock <em>static<\/em> methods, we need to use the <strong>inline mock-making<\/strong> facility provided by <a href=\"https:\/\/mvnrepository.com\/artifact\/org.mockito\/mockito-inline\" target=\"_blank\" rel=\"noreferrer noopener\">mockito-inline<\/a> module. Note that this module is separate from <code>mockito-core<\/code> module for some time, and in a future release it will be merged with <em>mockito-core<\/em> itself.<\/p>\n\n\n\n<p>The <em>mockito-inline<\/em> module has been developed separately for community feedback and provides the mocking capability for <code>static<\/code> methods; and <code>final<\/code> classes and methods which previously were considered unmockable. It uses a combination of both <em>Java instrumentation API<\/em> and sub-classing rather than creating a new class to represent a mock.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.mockito&lt;\/groupId&gt;\n    &lt;artifactId&gt;mockito-inline&lt;\/artifactId&gt;\n    &lt;version&gt;4.6.1&lt;\/version&gt;\n    &lt;scope&gt;test&lt;\/scope&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<h2 id=\"h-2-system-under-test\">2. System Under Test<\/h2>\n\n\n\n<p>For demo purposes, we are creating a simple class with two methods.<\/p>\n\n\n\n<ul><li>The first method does not take any argument and returns the string value &#8220;foo&#8221;.<\/li><li>The second method takes a variable number of <em>int<\/em> arguments and returns their sum.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class ClassWithStaticMethod {\n\n  public static String getVal() {\n    return \"foo\";\n  }\n\n  public static int add(int... args) {\n    return IntStream.of(args).sum();\n  }\n}<\/code><\/pre>\n\n\n\n<h2 id=\"h-3-mockedstatic-class\">3. <em>MockedStatic<\/em> class<\/h2>\n\n\n\n<p>The <em>MockedStatic<\/em> represents an <strong>active and scoped mock<\/strong> of a type&#8217;s <em>static<\/em> methods. Due to the defined scope of the static mock, <strong>it returns to its original behavior once the scope is released<\/strong>. To define mock behavior and to verify static method invocations, use the <em>MockedStatic<\/em> reference returned from the <code>Mockito.mockStatic()<\/code> method.<\/p>\n\n\n\n<p>It is necessary to call <code>ScopedMock.close()<\/code> method to release the static mock once it has been used and is no longer needed. It is therefore recommended to create this object within a <a href=\"https:\/\/howtodoinjava.com\/java7\/try-with-resources\/\">try-with-resources<\/a> statement unless when managed explicitly.<\/p>\n\n\n\n<p>The following is the syntax to use the <em>MockedStatic<\/em> class in a unit test.<\/p>\n\n\n\n<pre title=\"Syntax\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">try (MockedStatic mock = mockStatic(AppStatic.class)) {\n  \/\/record mock expectations\n  \/\/test code\n  \/\/verify mock\n}<\/code><\/pre>\n\n\n\n<p>If we do not use <em>try-with-resources<\/em> block, as suggested, the mocking\/stubbing\/verifying will work as expected but leaves the class in a mocked state.<\/p>\n\n\n\n<h2 id=\"h-3-mocking-no-args-static-methods\">3. Mocking No-Args Static Methods<\/h2>\n\n\n\n<p>Let us mock the first method <code>getVal()<\/code> that takes no arguments and returns a String value <code>\"foo\"<\/code>. We are mocking the <code>getVal()<\/code> method and returning the value <code>\"bar\"<\/code> from the mock.<\/p>\n\n\n\n<p>When we invoke the <code>getVal()<\/code> method, outside the mock scope, we should the value as <em>&#8220;bar&#8221;<\/em> and inside the scope, we should get the value <em>&#8220;foo&#8221;<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Test\npublic void testGetVal() {\n\t\/\/Outside scope\n  assertEquals(\"foo\", ClassWithStaticMethod.getVal());\n\n  try (MockedStatic mockStatic = mockStatic(ClassWithStaticMethod.class)) {\n\n    mockStatic.when(ClassWithStaticMethod::getVal).thenReturn(\"bar\");\n\n    \/\/Inside scope\n    assertEquals(\"bar\", ClassWithStaticMethod.getVal());\n    mockStatic.verify(ClassWithStaticMethod::getVal);\n  }\n\n  \/\/Outside scope\n  assertEquals(\"foo\", ClassWithStaticMethod.getVal());\n}<\/code><\/pre>\n\n\n\n<h2 id=\"h-4-mocking-a-static-method-with-arguments\">4. Mocking a Static Method with Arguments<\/h2>\n\n\n\n<p>Mocking the static methods that accept arguments and return values is pretty much same as the previous section. Additionally, we can use flexible argument-matchers in expectations.<\/p>\n\n\n\n<p>Note that we are using the <a href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\">lambda expression<\/a> syntax for invoking the <em>static<\/em> method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Test\npublic void testAdd() {\n  assertEquals(3, ClassWithStaticMethod.add(1, 2));\n\n  try (MockedStatic mockStatic = mockStatic(ClassWithStaticMethod.class)) {\n\n    mockStatic.when(() -&gt; ClassWithStaticMethod.add(anyInt(), anyInt())).thenReturn(10);\n\n    assertEquals(10, ClassWithStaticMethod.add(1, 2));\n    mockStatic.verify(() -&gt; ClassWithStaticMethod.add(1, 2));\n  }\n\n  assertEquals(3, ClassWithStaticMethod.add(1, 2));\n}<\/code><\/pre>\n\n\n\n<h2 id=\"h-5-conclusion\">5. Conclusion<\/h2>\n\n\n\n<p>In this tutorial, we learned to create, record expectations and verify the mocks have static methods. Make sure you understand the fact that a static mock is expected to be used in a defined scope, and the module <em>mockito-inline<\/em> can be merged with mockito-core in the future.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Spring-Boot-Examples\/tree\/master\/Testing-Libraries\">Sourcecode on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Learn to mock the static methods (in and outside the scope) using Mockito in unit testing in Java using MockedStatic class.<\/p>\n","protected":false},"author":2,"featured_media":21548,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1224],"tags":[1568],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle.png",1746,1069,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-300x184.png",300,184,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-768x470.png",768,470,true],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-1024x627.png",1024,627,true],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-1536x940.png",1536,940,true],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle.png",1746,1069,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2022\/06\/Easymock-Test-Lifecycle-120x120.png",120,120,true]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn to mock the static methods (in and outside the scope) using Mockito in unit testing in Java using MockedStatic class.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/21608"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=21608"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/21608\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/21548"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=21608"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=21608"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=21608"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}