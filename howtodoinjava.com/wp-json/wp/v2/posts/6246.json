{"id":6246,"date":"2016-02-15T13:00:34","date_gmt":"2016-02-15T13:00:34","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=6246"},"modified":"2020-10-22T11:57:57","modified_gmt":"2020-10-22T06:27:57","slug":"jquery-ajax-tutorial","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/jquery\/jquery-ajax-tutorial\/","title":{"rendered":"jQuery AJAX Tutorial"},"content":{"rendered":"<p>Learn to utilize the full power of <a href=\"https:\/\/howtodoinjava.com\/ajax\/complete-ajax-tutorial\/\">AJAX<\/a> with jQuery to make application development easy, fast as well as effective.<\/p>\n<pre>Table of Contents\r\n\r\n<a href=\"#ajax-method\">$.ajax() Method<\/a>\r\n<a href=\"#jqXHR-vs-XHR\">jqXHR (jQuery XMLHttpRequest) vs. XHR (XMLHttpRequest)<\/a>\r\n<a href=\"#http-crud-methods\">Invoking jQuery Ajax HTTP Methods<\/a>\r\n<a href=\"#async-sync\">Synchronous vs. Asynchronous Communication<\/a>\r\n<a href=\"#global-event-handlers\">jQuery Ajax Global Event Handlers<\/a>\r\n\t<a href=\"#ajaxSend\">$.ajaxSend()<\/a>\r\n\t<a href=\"#ajaxStart\">$.ajaxStart()<\/a>\r\n\t<a href=\"#ajaxStop\">$.ajaxStop()<\/a>\r\n\t<a href=\"#ajaxSuccess\">$.ajaxSuccess()<\/a>\r\n\t<a href=\"#ajaxError\">$.ajaxError()<\/a>\r\n\t<a href=\"#ajaxComplete\">$.ajaxComplete()<\/a>\r\n<a href=\"#ajaxSetup\">Using $.ajaxSetup() to Globalize Parameters<\/a>\r\n<a href=\"#ajaxPrefilter\">Using $.ajaxPrefilter() to filter Ajax Requests<\/a>\r\n<a href=\"#misc-methods\">Other Ajax Powered Functions in jQuery<\/a>\r\n\t<a href=\"#get-post\">$.get() and $.post() Functions<\/a>\r\n\t<a href=\"#load\">$.load() Function<\/a>\r\n\t<a href=\"#getScript\">$.getScript()<\/a>\r\n<\/pre>\n<p><a name=\"ajax-method\"><\/a><\/p>\n<h2>$.ajax() Method<\/h2>\n<p>In the root of <strong>jQuery Ajax<\/strong> is ajax() function. This function is used to perform HTTP requests which are by default asynchronous. The syntax for using this function is:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">$.ajax({name:value, name:value, ... })<\/pre>\n<p>The parameters specifies one or more name\/value pairs for the AJAX request. Possible names\/values in the table below:<\/p>\n<table class=\"mtr-table mtr-tr-th\">\n<tbody>\n<tr>\n<th style=\"width:30%\" data-mtr-content=\"Name\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Name<\/div><\/th>\n<th data-mtr-content=\"Value\/Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Value\/Description<\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>async<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A Boolean value indicating whether the request should be handled asynchronous or not. Default is true. Please note that as of jQuery 1.8, the use of <code>async: false<\/code> is deprecated; you must use the <code>success<\/code>\/<code>error<\/code>\/<code>complete<\/code> callback options instead of the corresponding methods of the <code>jqXHR<\/code> object such as <code>jqXHR.done()<\/code> or the deprecated <code>jqXHR.success()<\/code>.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>beforeSend(<em>xhr<\/em>)<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A function to run before the request is sent<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>cache<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A Boolean value indicating whether the browser should cache the requested pages. Default is true<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>complete(<em>xhr,status<\/em>)<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A function to run when the request is finished (after success and error functions)<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>contentType<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The content type used when sending data to the server. Default is: \u201capplication\/x-www-form-urlencoded\u201d<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>context<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Specifies the \u201cthis\u201d value for all AJAX related callback functions<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>data<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Specifies data to be sent to the server<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>dataFilter(<em>data<\/em>,<em>type<\/em>)<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A function used to handle the raw response data of the XMLHttpRequest<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>dataType<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The data type expected of the server response.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>error(<em>xhr,status,error<\/em>)<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A function to run if the request fails.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>global<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A Boolean value specifying whether or not to trigger global AJAX event handles for the request. Default is true<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>ifModified<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A Boolean value specifying whether a request is only successful if the response has changed since the last request. Default is: false.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>jsonp<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A string overriding the callback function in a jsonp request<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>jsonpCallback<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Specifies a name for the callback function in a jsonp request<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>password<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Specifies a password to be used in an HTTP access authentication request.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>processData<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A Boolean value specifying whether or not data sent with the request should be transformed into a query string. Default is true<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>scriptCharset<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Specifies the charset for the request<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>success(<em>result,status,xhr<\/em>)<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A function to be run when the request succeeds<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>timeout<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The local timeout (in milliseconds) for the request<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>traditional<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A Boolean value specifying whether or not to use the traditional style of param serialization<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>type<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Specifies the type of request. (GET or POST)<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>url<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Specifies the URL to send the request to. Default is the current page<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>username<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Specifies a username to be used in an HTTP access authentication request<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Name\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>xhr<\/code><\/div><\/td>\n<td data-mtr-content=\"Value\/Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A function used for creating the XMLHttpRequest object<\/div><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<h4>jQuery AJAX Example (below v1.8)<\/h4>\n<p>In the given example, we can make a sample ajax request like this (till version jQuery 1.7).<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$.ajax({\r\n\turl: &quot;\/app-url\/relative-url&quot;, \r\n\tdata: {\r\n        name : &quot;The name&quot;,\r\n        desc : &quot;The description&quot;\r\n    },\r\n\tsuccess: function(data, textStatus, jqXHR)\r\n\t{\r\n    \talert(&quot;Success: &quot; + response); \r\n\t},\r\n\terror: function(jqXHR, textStatus, errorThrown)\r\n\t{\r\n    \talert(&quot;Error&quot;); \r\n\t}\r\n});\r\n<\/pre>\n<h4>jQuery AJAX Example (since v1.8)<\/h4>\n<p>In the given example, we can make a sample ajax request like this (in version jQuery 1.8 and above).<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$.ajax({\r\n    url: &quot;\/app-url\/relative-url&quot;,\r\n    data: {\r\n        name : &quot;The name&quot;,\r\n        desc : &quot;The description&quot;\r\n    }\r\n})\r\n.done (function(data, textStatus, jqXHR) { \r\n\talert(&quot;Success: &quot; + response); \r\n})\r\n.fail (function(jqXHR, textStatus, errorThrown) { \r\n\talert(&quot;Error&quot;); \r\n})\r\n.always (function(jqXHROrData, textStatus, jqXHROrErrorThrown) { \r\n\talert(&quot;complete&quot;); \r\n});\r\n<\/pre>\n<p><a name=\"jqXHR-vs-XHR\"><\/a><\/p>\n<h2>jqXHR (jQuery XMLHttpRequest) vs. XHR (XMLHttpRequest)<\/h2>\n<p>jQuery 1.8 has brought a major change in how ajax are mode through jQuery. This change is the return type of <code>$.ajax()<\/code> method. Previously till version 1.7, return type was <code>XHR<\/code> i.e. <strong>XMLHttpRequest<\/strong>, but from version 1.8 it&#8217;s <code>jqXHR<\/code> i.e. <strong>jQuery XMLHttpRequest<\/strong>.<\/p>\n<p>In jQuery 1.8, library wraps the browser native <code>XMLHttpRequest<\/code> object with a superset API and return <code>jqXHR<\/code> object. <code>jqXHR<\/code> object simulates native <code>XHR<\/code> functionality as well as provides some more features e.g.<\/p>\n<ul>\n<li>It handles the HTTP request headers (Last-Modified, etag, Content-Type, MIME types etc\u2026)<\/li>\n<li>It handles the callbacks of the request (including promise callbacks .done(), .fail() etc\u2026)<\/li>\n<li>It handles any pre-filters set for the request<\/li>\n<li>It handles any timeouts set for the request<\/li>\n<li>It handles any cross domain calls (including jsonp)<\/li>\n<\/ul>\n<div class=\"noticeboxesde bluenoticebox\">The jqXHR objects returned by $.ajax() implement the Promise interface. The object has all the properties, methods, and behavior of a <strong><a href=\"https:\/\/api.jquery.com\/deferred.promise\/\">Promise<\/a><\/strong>.<\/div>\n<p><em>jQuery library writers have made efforts to make it backward compatible yet it does no support <code>onreadystatechange()<\/code> method.<\/em><\/p>\n<p><a name=\"http-crud-methods\"><\/a><\/p>\n<h2>Invoking HTTP Methods<\/h2>\n<p>Let&#8217;s see how different HTTP methods can be invoked by jQuery ajax. I am just writing the skeleton of code, you are expected to change the code as per your needs.<\/p>\n<h4>jQuery Ajax HTTP GET or DELETE Method<\/h4>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$.ajax({\r\n    url: &quot;\/app-url\/relative-url&quot;,\r\n    type: &quot;GET&quot;, \/\/Or &quot;DELETE&quot; for http delete calls\r\n    dataType: 'json',    \r\n})\r\n.done (function(data, textStatus, jqXHR) { \r\n\talert(&quot;Success: &quot; + response); \r\n})\r\n.fail (function(jqXHR, textStatus, errorThrown) { \r\n\talert(&quot;Error&quot;); \r\n})\r\n.always (function(jqXHROrData, textStatus, jqXHROrErrorThrown) { \r\n\talert(&quot;complete&quot;); \r\n});\r\n<\/pre>\n<h4>jQuery Ajax HTTP POST or PUT Method<\/h4>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$.ajax({\r\n    url: &quot;\/app-url\/relative-url&quot;,\r\n    type: &quot;POST&quot;, \/\/Use &quot;PUT&quot; for HTTP PUT methods\r\n    dataType: 'json',   \r\n    data: {\r\n        key : &quot;value&quot;,\r\n    }\r\n})\r\n.done (function(data, textStatus, jqXHR) { \r\n\talert(&quot;Success: &quot; + response); \r\n})\r\n.fail (function(jqXHR, textStatus, errorThrown) { \r\n\talert(&quot;Error&quot;); \r\n})\r\n.always (function(jqXHROrData, textStatus, jqXHROrErrorThrown) { \r\n\talert(&quot;complete&quot;); \r\n});\r\n<\/pre>\n<p><a name=\"async-sync\"><\/a><\/p>\n<h2>Synchronous vs. Asynchronous Communication<\/h2>\n<p>By default, all ajax requests sent through jQuery are async only. If you want to make sync calls (which is not recommended at all because it can cause the browser to freeze, which will create some very unhappy users) the use &#8220;<code>async : false<\/code>&#8221; parameter in function call as below:<\/p>\n<pre class=\"brush: jscript; highlight: [4]; title: ; notranslate\" title=\"\">\r\n$.ajax({\r\n    url: &quot;\/app-url\/relative-url&quot;,\r\n    type: &quot;POST&quot;, \r\n    async: false,\r\n    dataType: 'json',    \r\n    data: {\r\n        key : &quot;value&quot;,\r\n    }\r\n})\r\n.done (function(data, textStatus, jqXHR) { \r\n\talert(&quot;Success: &quot; + response); \r\n})\r\n.fail (function(jqXHR, textStatus, errorThrown) { \r\n\talert(&quot;Error&quot;); \r\n})\r\n.always (function(jqXHROrData, textStatus, jqXHROrErrorThrown) { \r\n\talert(&quot;complete&quot;); \r\n});\r\n<\/pre>\n<div class=\"noticeboxesde bluenoticebox\">In jQuery 1.8 and later, &#8220;<code>async : false<\/code>&#8221; option is deprecated.<\/div>\n<p><a name=\"global-event-handlers\"><\/a><\/p>\n<h2>Global Event Handlers<\/h2>\n<p>Apart from above 3 methods, i.e. <code>done()<\/code>, <code>fail()<\/code> or <code>always()<\/code>, jQuery has a set of global AJAX functions which you can use to listen for AJAX events across all AJAX requests sent via jQuery. Let&#8217;s walk through them:<\/p>\n<p><a name=\"ajaxSend\"><\/a><\/p>\n<h4>$.ajaxSend()<\/h4>\n<p>The callback function registered with the <code>ajaxSend()<\/code> function is always called just before an AJAX request is sent via jQuery.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$(document).ajaxSend(function() {\r\n    console.log(&quot;called before each send&quot;);\r\n});\r\n<\/pre>\n<p><a name=\"ajaxStart\"><\/a><\/p>\n<h4>$.ajaxStart()<\/h4>\n<p>Whenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the <code>ajaxStart<\/code> event. <\/p>\n<p>If <code>$.ajax()<\/code> or <code>$.ajaxSetup()<\/code> is called with the global option set to false, the <code>ajaxStart()<\/code> method will not fire.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$( document ).ajaxStart(function() {\r\n  \t$( &quot;#loading&quot; ).show();\r\n});\r\n<\/pre>\n<p><a name=\"ajaxStop\"><\/a><\/p>\n<h4>$.ajaxStop()<\/h4>\n<p>Whenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the <code>ajaxStop<\/code> event.<\/p>\n<p>If $.ajax() or $.ajaxSetup() is called with the global option set to false, the .ajaxStop() method will not fire.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$( document ).ajaxStop(function() {\r\n  \t$( &quot;#loading&quot; ).hide();\r\n});\r\n<\/pre>\n<p><a name=\"ajaxSuccess\"><\/a><\/p>\n<h4>$.ajaxSuccess()<\/h4>\n<p>Whenever an Ajax request completes successfully, jQuery triggers the <code>ajaxSuccess<\/code> event.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$( document ).ajaxSuccess(function( event, xhr, settings ) {\r\n  \t$( &quot;#msg&quot; ).append( &quot;&lt;li&gt;Successful Request!&lt;\/li&gt;&quot; );\r\n});\r\n<\/pre>\n<p><a name=\"ajaxError\"><\/a><\/p>\n<h4>$.ajaxError()<\/h4>\n<p>Whenever an Ajax request completes with an error, jQuery triggers the <code>ajaxError<\/code> event.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$( document ).ajaxError(function( event, xhr, settings ) {\r\n  \t$( &quot;#msg&quot; ).append( &quot;&lt;li&gt;Failed Request!&lt;\/li&gt;&quot; );\r\n});\r\n<\/pre>\n<p><a name=\"ajaxComplete\"><\/a><\/p>\n<h4>$.ajaxComplete()<\/h4>\n<p>Whenever an Ajax request completes, jQuery triggers the <code>ajaxComplete<\/code> event.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$( document ).ajaxComplete(function( event, xhr, settings ) {\r\n  \t$( &quot;#msg&quot; ).append( &quot;&lt;li&gt;Request Completed !!&lt;\/li&gt;&quot; );\r\n});\r\n<\/pre>\n<p><a name=\"ajaxSetup\"><\/a><\/p>\n<h2>$.ajaxSetup() to Globalize Parameters<\/h2>\n<p>Do you feel that passing a common set of parameters to all ajax requests is boring, you can use <code>$.ajaxSetup()<\/code> function to register it once and reuse them in all ajax calls. The <code>$.ajaxSetup()<\/code> function can be used to set options to be used for all AJAX calls, including those performed via <code>$.ajax()<\/code>, <code>$.load()<\/code>, <code>$.get()<\/code> etc. <\/p>\n<p>You can set all the options in <code>$.ajaxSetup()<\/code> which can set to a <code>$.ajax()<\/code> call. e.g.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">$.ajaxSetup({\r\n    type : &quot;POST&quot;\r\n});<\/pre>\n<p>Above function will make all jQuery ajax requests from application to be HTTP POST methods by default. So anytime, you want to send a HTTP GET method, you must set it explicitly in that particular <code>$.ajax()<\/code> call like below:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">$.ajax({\r\n    url  : &quot;\/app-url\/relative-url&quot;,\r\n    type : &quot;GET&quot;\r\n});<\/pre>\n<p><a name=\"ajaxPrefilter\"><\/a><\/p>\n<h2>$.ajaxPrefilter() to filter Ajax Requests<\/h2>\n<p>If you have been in server-side web-development then you will acknowledge that filters are a great way to achieve certain objectives such as input values sanitation etc. Now jQuery provides this functionality in client-side as well using <code>ajaxPrefilter<\/code> event. Using this function you can filter all AJAX calls before they are sent to the server.<\/p>\n<p>All Ajax options\/parameters passed to the <code>$.ajax()<\/code> function can be changed (&#8220;filtered&#8221;) in <code>$.ajaxPrefilter()<\/code> before the request is sent. e.g. if you want that all HTTP requests sent to URLs ending with &#8220;\/add&#8221; must be HTTP POST calls then you can apply the logic here.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">$.ajaxPrefilter(function(options, originalOptions, jqXHR){\r\n    if(options.url.indexOf(&quot;\/add&quot;) != -1) \r\n    {\r\n        options.type = &quot;POST&quot;;\r\n    }\r\n});<\/pre>\n<p>Here parameters are:<\/p>\n<ul>\n<li><code>options<\/code> &#8211; are the request options<\/li>\n<li><code>originalOptions<\/code> &#8211; are the options as provided to the $.ajax() method, unmodified and, thus, without defaults from ajaxSettings<\/li>\n<li><code>jqXHR<\/code> &#8211; is the jqXHR object of the request<\/li>\n<\/ul>\n<p><a name=\"misc-methods\"><\/a><\/p>\n<h2>Other Ajax Powered Functions in jQuery<\/h2>\n<p>Let&#8217;s go through other useful functions provided by the jQuery library using ajax internally, and can be used directly.<\/p>\n<p><a name=\"get-post\"><\/a><\/p>\n<h4>$.get() and $.post() Functions<\/h4>\n<p>jQuery has these functions which can be used to send simplified HTTP GET and HTTP POST requests. Here is an example showing how to use jQuery&#8217;s <code>$.get()<\/code> function:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar parameters = { p1 : &quot;val1&quot;, p2 : &quot;val2&quot;};\r\n$.get( &quot;\/app\/url&quot;, parameters )\r\n.done(function(data) {\r\n    $(&quot;#label&quot;).html(data);\r\n})\r\n.fail(function() {\r\n    alert( &quot;error&quot; );\r\n})\r\n.always(function() {\r\n    alert( &quot;finished&quot; );\r\n});\r\n<\/pre>\n<p>Similarily you can use $.post() function to make HTTP POST request.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar parameters = { p1 : &quot;val1&quot;, p2 : &quot;val2&quot;};\r\n$.post( &quot;\/app\/url&quot;, parameters )\r\n.done(function(data) {\r\n    $(&quot;#label&quot;).html(data);\r\n})\r\n.fail(function() {\r\n    alert( &quot;error&quot; );\r\n})\r\n.always(function() {\r\n    alert( &quot;finished&quot; );\r\n});\r\n<\/pre>\n<p><a name=\"load\"><\/a><\/p>\n<h4>$.load() Function<\/h4>\n<p>jQuery load() function loads some HTML via AJAX and inserts it into the selected element. It&#8217; a simple HTTP GET method in the background which fetches some HTML from server and insert it into element&#8217;s DOM.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">$(&quot;#loadTarget&quot;).load(&quot;html-response.html&quot;);<\/pre>\n<p>You can also insert just only a part of the HTML loaded. If you append a <code>space + jQuery selector<\/code> string after the <code>url<\/code> then <code>load()<\/code> will only inserted the part of the loaded HTML matching the selector. <\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">$(&quot;#loadTarget&quot;).load(&quot;html-response.html #someDiv&quot;);<\/pre>\n<p>In above example, ajax call will load HTML response from URL <code>html-response.html<\/code> and then it will execute jQuery ID <a href=\"\/\/howtodoinjava.com\/scripting\/jquery\/jquery-selectors\/\">selector<\/a> of response for <code>id=someDiv<\/code> and then it will insert the result HTML into innerHTML of <code>loadTarget<\/code>.<\/p>\n<div class=\"noticeboxesde bluenoticebox\">If the loaded HTML contains any JavaScript it will get executed when the HTML is inserted into the target HTML element. However, if you load a fragment (URL + jQuery selector) then any JavaScript found in the loaded file is removed before the HTML is inserted.<\/div>\n<p><a name=\"getScript\"><\/a><\/p>\n<h4>$.getScript() Function<\/h4>\n<p>The $.getScript() function in jQuery loads a JavaScript file and executes it. This function uses jQuery&#8217;s underlying AJAX functions so the $.getScript() function cannot load scripts from other domains due to <strong>cross-domain restrictions<\/strong>. e.g.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">$.getScript(&quot;js\/myscript.js&quot;);<\/pre>\n<p>That&#8217;s all about working with ajax calls using jQuery. Feel free to drop your comments and suggestions in the below comments section.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn to utilize the full power of AJAX with jQuery to make application development easy, fast as well as effective. Table of Contents $.ajax() Method jqXHR (jQuery XMLHttpRequest) vs. XHR (XMLHttpRequest) Invoking jQuery Ajax HTTP Methods Synchronous vs. Asynchronous Communication jQuery Ajax Global Event Handlers $.ajaxSend() $.ajaxStart() $.ajaxStop() $.ajaxSuccess() $.ajaxError() $.ajaxComplete() Using $.ajaxSetup() to Globalize &#8230; <a title=\"jQuery AJAX Tutorial\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/jquery\/jquery-ajax-tutorial\/\" aria-label=\"More on jQuery AJAX Tutorial\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":3642,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[74,1440],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/jquery_logo.png",300,300,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/jquery_logo-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/jquery_logo.png",300,300,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/jquery_logo.png",300,300,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/jquery_logo.png",300,300,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/jquery_logo.png",300,300,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/jquery_logo.png",300,300,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/01\/jquery_logo.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"Learn to utilize the full power of AJAX with jQuery to make application development easy, fast as well as effective. Table of Contents $.ajax() Method jqXHR (jQuery XMLHttpRequest) vs. XHR (XMLHttpRequest) Invoking jQuery Ajax HTTP Methods Synchronous vs. Asynchronous Communication jQuery Ajax Global Event Handlers $.ajaxSend() $.ajaxStart() $.ajaxStop() $.ajaxSuccess() $.ajaxError() $.ajaxComplete() Using $.ajaxSetup() to Globalize&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/6246"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=6246"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/6246\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/3642"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=6246"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=6246"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=6246"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}