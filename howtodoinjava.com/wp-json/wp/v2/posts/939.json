{"id":939,"date":"2013-03-22T03:05:15","date_gmt":"2013-03-21T21:35:15","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=939"},"modified":"2022-01-25T01:44:26","modified_gmt":"2022-01-24T20:14:26","slug":"basic-jms-messaging-example-using-hornetq-stand-alone-server","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/hornetq\/basic-jms-messaging-example-using-hornetq-stand-alone-server\/","title":{"rendered":"HornetQ Stand Alone &#8211; Basic JMS Messaging Example"},"content":{"rendered":"<p><strong><a title=\"hornetq\" href=\"https:\/\/hornetq.jboss.org\/\">HornetQ<\/a><\/strong> is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system. HornetQ supports the JMS 1.1 API and also defines its own messaging API for maximum performance and flexibility. HornetQ class-beating high performance journal provides persistent messaging performance at rates normally seen for non-persistent messaging. HornetQ offers server replication and automatic client fail-over to eliminate lost or duplicated messages in case of server failure.<\/p>\n<p>In previous post, we learned about configuring a <a title=\"\" href=\"https:\/\/howtodoinjava.com\/hornetq\/hornetq-stand-alone-server-example-using-maven\/\"><strong>stand alone hornetq server and basic configuration<\/strong><\/a>. Lets take the example forward.<\/p>\n<p>In this post, we will learn the mechanism of sending JMS messages to a queue on hornetq server and then we will retrieve those messages.<\/p>\n<p><strong>Step 1)<\/strong> Create a maven project using below command and convert it to eclipse java project<\/p>\n<pre>mvn archetype:generate -DgroupId=com.howtodoinjava -DartifactId=HornetQHelloWorld\n-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n\n cd HornetQHelloWorld\n\n mvn eclipse:eclipse<\/pre>\n<p><strong>step 2)<\/strong> Update pom.xml file and update the project dependencies<\/p>\n<p><strong>pom.xml<\/strong><\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;project xmlns=&quot;http:\/\/maven.apache.org\/POM\/4.0.0&quot; xmlns:xsi=&quot;http:\/\/www.w3.org\/2001\/XMLSchema-instance&quot;\n  xsi:schemaLocation=&quot;http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/maven-v4_0_0.xsd&quot;&gt;\n  &lt;modelVersion&gt;4.0.0&lt;\/modelVersion&gt;\n  &lt;groupId&gt;com.howtodoinjava&lt;\/groupId&gt;\n  &lt;artifactId&gt;HornetQHelloWorld&lt;\/artifactId&gt;\n  &lt;packaging&gt;jar&lt;\/packaging&gt;\n  &lt;version&gt;1.0-SNAPSHOT&lt;\/version&gt;\n  &lt;name&gt;HornetQHelloWorld&lt;\/name&gt;\n  &lt;url&gt;http:\/\/maven.apache.org&lt;\/url&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;\/groupId&gt;\n      &lt;artifactId&gt;junit&lt;\/artifactId&gt;\n      &lt;version&gt;3.8.1&lt;\/version&gt;\n      &lt;scope&gt;test&lt;\/scope&gt;\n    &lt;\/dependency&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;org.hornetq&lt;\/groupId&gt;\n     &lt;artifactId&gt;hornetq-core&lt;\/artifactId&gt;\n     &lt;version&gt;2.0.0.GA&lt;\/version&gt;\n     &lt;scope&gt;compile&lt;\/scope&gt;\n  &lt;\/dependency&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;org.hornetq&lt;\/groupId&gt;\n     &lt;artifactId&gt;hornetq-jms&lt;\/artifactId&gt;\n     &lt;version&gt;2.0.0.GA&lt;\/version&gt;\n     &lt;scope&gt;compile&lt;\/scope&gt;\n  &lt;\/dependency&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;org.hornetq&lt;\/groupId&gt;\n     &lt;artifactId&gt;hornetq-logging&lt;\/artifactId&gt;\n     &lt;version&gt;2.0.0.GA&lt;\/version&gt;\n     &lt;scope&gt;compile&lt;\/scope&gt;\n  &lt;\/dependency&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;org.hornetq&lt;\/groupId&gt;\n     &lt;artifactId&gt;hornetq-transports&lt;\/artifactId&gt;\n     &lt;version&gt;2.0.0.GA&lt;\/version&gt;\n     &lt;scope&gt;compile&lt;\/scope&gt;\n  &lt;\/dependency&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;org.jboss.netty&lt;\/groupId&gt;\n     &lt;artifactId&gt;netty&lt;\/artifactId&gt;\n     &lt;version&gt;3.1.0.GA&lt;\/version&gt;\n  &lt;\/dependency&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;org.jboss.javaee&lt;\/groupId&gt;\n     &lt;artifactId&gt;jboss-jms-api&lt;\/artifactId&gt;\n     &lt;version&gt;1.1.0.GA&lt;\/version&gt;\n     &lt;scope&gt;compile&lt;\/scope&gt;\n  &lt;\/dependency&gt;\n    \n  &lt;\/dependencies&gt;\n&lt;\/project&gt;\n<\/pre>\n<p><strong>Step 3)<\/strong> Place the basic hornetq configuration file in classpath.<\/p>\n<p><strong>hornetq-configuration.xml<\/strong><\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;configuration xsi:schemaLocation=&quot;urn:hornetq \/schema\/hornetq-configuration.xsd&quot;\n\txmlns:xsi=&quot;http:\/\/www.w3.org\/2001\/XMLSchema-instance&quot; xmlns=&quot;urn:hornetq&quot;&gt;\n\t&lt;connectors&gt;\n\t\t&lt;connector name=&quot;netty-connector&quot;&gt;\n\t\t\t&lt;factory-class&gt;org.hornetq.integration.transports.netty.NettyConnectorFactory\n\t\t\t&lt;\/factory-class&gt;\n\t\t&lt;\/connector&gt;\n\t&lt;\/connectors&gt;\n\t&lt;acceptors&gt;\n\t\t&lt;acceptor name=&quot;netty-acceptor&quot;&gt;\n\t\t\t&lt;factory-class&gt;org.hornetq.integration.transports.netty.NettyAcceptorFactory\n\t\t\t&lt;\/factory-class&gt;\n\t\t&lt;\/acceptor&gt;\n\t&lt;\/acceptors&gt;\n\t&lt;security-enabled&gt;false&lt;\/security-enabled&gt;\n&lt;\/configuration&gt;\n<\/pre>\n<p><strong>Step 4)<\/strong> Configure the connector factory and place the configuration file in classpath.<\/p>\n<p><strong>hornetq-jms.xml<\/strong><\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;configuration xsi:schemaLocation=&quot;urn:hornetq \/schema\/hornetq-jms.xsd&quot;\n\txmlns:xsi=&quot;http:\/\/www.w3.org\/2001\/XMLSchema-instance&quot; xmlns=&quot;urn:hornetq&quot;&gt;\n\t&lt;!--the connection factory used by the example --&gt;\n\t&lt;connection-factory name=&quot;ConnectionFactory&quot;&gt;\n\t\t&lt;connectors&gt;\n\t\t\t&lt;connector-ref connector-name=&quot;netty-connector&quot; \/&gt;\n\t\t&lt;\/connectors&gt;\n\t\t&lt;entries&gt;\n\t\t\t&lt;entry name=&quot;ConnectionFactory&quot; \/&gt;\n\t\t&lt;\/entries&gt;\n\t&lt;\/connection-factory&gt;\n\t&lt;queue name=&quot;exampleQueue&quot;&gt;\n\t\t&lt;entry name=&quot;exampleQueue&quot; \/&gt;\n\t&lt;\/queue&gt;\n&lt;\/configuration&gt;\n<\/pre>\n<p><strong>Step 5)<\/strong> Start the server and test the messaging code<\/p>\n<p><strong>HornetQMessageQueueDemo.java<\/strong><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\npackage com.howtodoinjava;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.MessageConsumer;\nimport javax.jms.MessageProducer;\nimport javax.jms.Queue;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\n\nimport org.hornetq.api.core.TransportConfiguration;\nimport org.hornetq.api.jms.HornetQJMSClient;\nimport org.hornetq.core.config.impl.FileConfiguration;\nimport org.hornetq.core.server.HornetQServer;\nimport org.hornetq.core.server.HornetQServers;\nimport org.hornetq.integration.transports.netty.NettyConnectorFactory;\nimport org.hornetq.integration.transports.netty.TransportConstants;\nimport org.hornetq.jms.server.JMSServerManager;\nimport org.hornetq.jms.server.impl.JMSServerManagerImpl;\n\npublic class HornetQMessageQueueDemo {\n\t\n\tstatic void startServer()\n\t{\n\t\ttry\n\t\t  {\n\t\t     FileConfiguration configuration = new FileConfiguration();\n\t\t     configuration.setConfigurationUrl(&quot;hornetq-configuration.xml&quot;);\n\t\t     configuration.start();\n\t\t\n\t\t     HornetQServer server = HornetQServers.newHornetQServer(configuration);\n\t\t     JMSServerManager jmsServerManager = new JMSServerManagerImpl(server, &quot;hornetq-jms.xml&quot;);\n\t\t     \/\/if you want to use JNDI, simple inject a context here or don't call this method and make sure the JNDI parameters are set.\n\t\t     jmsServerManager.setContext(null);\n\t\t     jmsServerManager.start();\n\t\t     System.out.println(&quot;Server started !!&quot;);\n\t\t  }\n\t\t  catch (Throwable e)\n\t\t  {\n\t\t     System.out.println(&quot;Damn it !!&quot;);\n\t\t     e.printStackTrace();\n\t\t  }\n\t}\n\t\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\t\/\/Start the server\n\t\tstartServer();\n\t\t\n\t\tConnection connection = null;\n\t\ttry \n\t\t{\n\t\t\t\/\/ Step 1. Directly instantiate the JMS Queue object.\n\t\t\tQueue queue = HornetQJMSClient.createQueue(&quot;exampleQueue&quot;);\n\n\t\t\t\/\/ Step 2. Instantiate the TransportConfiguration object which\n\t\t\t\/\/ contains the knowledge of what transport to use,\n\t\t\t\/\/ The server port etc.\n\n\t\t\tMap&lt;String, Object&gt; connectionParams = new HashMap&lt;String, Object&gt;();\n\t\t\tconnectionParams.put(TransportConstants.PORT_PROP_NAME, 5445);\n\n\t\t\tTransportConfiguration transportConfiguration = new TransportConfiguration(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNettyConnectorFactory.class.getName(), connectionParams);\n\n\t\t\t\/\/ Step 3 Directly instantiate the JMS ConnectionFactory object\n\t\t\t\/\/ using that TransportConfiguration\n\t\t\tConnectionFactory cf = HornetQJMSClient.createConnectionFactory(transportConfiguration);\n\n\t\t\t\/\/ Step 4.Create a JMS Connection\n\t\t\tconnection = cf.createConnection();\n\n\t\t\t\/\/ Step 5. Create a JMS Session\n\t\t\tSession session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);\n\n\t\t\t\/\/ Step 6. Create a JMS Message Producer\n\t\t\tMessageProducer producer = session.createProducer(queue);\n\n\t\t\t\/\/ Step 7. Create a Text Message\n\t\t\tTextMessage message = session.createTextMessage(&quot;How to do in java dot com&quot;);\n\n\t\t\tSystem.out.println(&quot;Sent message: &quot; + message.getText());\n\n\t\t\t\/\/ Step 8. Send the Message\n\t\t\tproducer.send(message);\n\n\t\t\t\/\/ Step 9. Create a JMS Message Consumer\n\t\t\tMessageConsumer messageConsumer = session.createConsumer(queue);\n\n\t\t\t\/\/ Step 10. Start the Connection\n\t\t\tconnection.start();\n\n\t\t\t\/\/ Step 11. Receive the message\n\t\t\tTextMessage messageReceived = (TextMessage) messageConsumer.receive(5000);\n\n\t\t\tSystem.out.println(&quot;Received message: &quot; + messageReceived.getText());\n\t\t} \n\t\tfinally\n\t\t{\n\t\t\tif (connection != null) {\n\t\t\t\tconnection.close();\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nOutput in console:\n\n22 Mar, 2013 2:23:36 PM org.hornetq.core.logging.impl.JULLogDelegate info\nINFO: live server is starting..\n22 Mar, 2013 2:23:36 PM org.hornetq.core.logging.impl.JULLogDelegate warn\nWARNING: AIO wasn't located on this platform, it will fall back to using pure Java NIO. If your platform is Linux, install LibAIO to enable the AIO journal\n22 Mar, 2013 2:23:36 PM org.hornetq.core.logging.impl.JULLogDelegate info\nINFO: Using NIO Journal\n22 Mar, 2013 2:23:36 PM org.hornetq.core.logging.impl.JULLogDelegate warn\nWARNING: Security risk! It has been detected that the cluster admin user and password have not been changed from the installation default. Please see the HornetQ user guide, cluster chapter, for instructions on how to do this.\n22 Mar, 2013 2:23:36 PM org.hornetq.core.logging.impl.JULLogDelegate info\nINFO: Started Netty Acceptor version 3.1.5.GA-r1772\n\nServer started !!\n\n22 Mar, 2013 2:23:36 PM org.hornetq.core.logging.impl.JULLogDelegate info\nINFO: HornetQ Server version 2.0.0.GA (Hornet Queen, 113) started\n\nSent message: How to do in java dot com\nReceived message: How to do in java dot com\n\n<\/pre>\n<p><a title=\"download source code\" href=\"https:\/\/docs.google.com\/file\/d\/0B7yo2HclmjI4b21RNVZFZm55dEU\/edit?usp=sharing\"><strong>Download source code<\/strong><\/a><\/p>\n<p><strong>Happy Learning !!<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>HornetQ is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system. HornetQ supports the JMS 1.1 API and also defines its own messaging API for maximum performance and flexibility. HornetQ class-beating high performance journal provides persistent messaging performance at rates normally seen for non-persistent messaging. HornetQ offers server &#8230; <a title=\"HornetQ Stand Alone &#8211; Basic JMS Messaging Example\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/hornetq\/basic-jms-messaging-example-using-hornetq-stand-alone-server\/\" aria-label=\"More on HornetQ Stand Alone &#8211; Basic JMS Messaging Example\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[794],"tags":[1439,1459],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":11,"uagb_excerpt":"HornetQ is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system. HornetQ supports the JMS 1.1 API and also defines its own messaging API for maximum performance and flexibility. HornetQ class-beating high performance journal provides persistent messaging performance at rates normally seen for non-persistent messaging. HornetQ offers server&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/939"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=939"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/939\/revisions"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=939"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=939"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=939"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}