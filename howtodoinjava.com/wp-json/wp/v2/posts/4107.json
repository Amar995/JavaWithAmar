{"id":4107,"date":"2014-07-31T17:22:13","date_gmt":"2014-07-31T11:52:13","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4107"},"modified":"2020-12-26T00:39:31","modified_gmt":"2020-12-25T19:09:31","slug":"read-xml-dom-parser-example","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/xml\/read-xml-dom-parser-example\/","title":{"rendered":"Java Read XML &#8211; Java DOM Parser Example"},"content":{"rendered":"<p>In this <em>Java xml parser tutorial<\/em>, Learn to <strong>read xml with DOM parser<\/strong> in Java. DOM parser is intended for working with XML as an object graph (a tree like structure) in memory &#8211; so called &#8220;<strong>Document Object Model (DOM)<\/strong>&#8220;. <\/p>\n<p>In first, the parser traverses the input XML file and creates <strong>DOM<\/strong> objects corresponding to the nodes in XML file. These DOM objects are linked together in a tree like structure. Once the parser is done with parsing process, we get this tree-like DOM object structure back from it. Now we can traverse the DOM structure back and forth as we want &#8211; to get\/update\/delete data from it.<\/p>\n<pre><strong>Table of Contents<\/strong>\r\n\r\n<a href=\"#dom_parsing_step\">1. DOM Parser API<\/a>\r\n   <a href=\"#import_package\">-Import XML-related packages<\/a>\r\n   <a href=\"#create_documentbuilder\">-Create a DocumentBuilder<\/a>\r\n   <a href=\"#create_document\">-Create a Document from a file or stream<\/a>\r\n   <a href=\"#validate_document\">-Validate Document structure<\/a>\r\n   <a href=\"#get_root\">-Extract the root element<\/a>\r\n   <a href=\"#get_attr\">-Examine attributes<\/a>\r\n   <a href=\"#get_childs\">-Examine sub-elements<\/a>\r\n<a href=\"#parse_known_xml\">2. Read XML with DOM parser<\/a>\r\n<a href=\"#populate_dtos\">3. Read data to POJO objects<\/a>\r\n<a href=\"#parse_unknown_xml\">4. Parse \"unknown\" xml with DOM parser<\/a><\/pre>\n<blockquote><p>Read More : <a title=\"DOM Vs SAX Parser in Java\" href=\"https:\/\/howtodoinjava.com\/java\/xml\/dom-vs-sax-parser-in-java\/\">Difference between DOM parser and SAX parser<\/a><\/p><\/blockquote>\n<p>For example purpose, We will be parsing below xml content in all code examples.<\/p>\n<pre class=\"brush: xml; title: employees.xml; notranslate\" title=\"employees.xml\">\r\n&lt;employees&gt;\r\n    &lt;employee id=&quot;111&quot;&gt;\r\n        &lt;firstName&gt;Lokesh&lt;\/firstName&gt;\r\n        &lt;lastName&gt;Gupta&lt;\/lastName&gt;\r\n        &lt;location&gt;India&lt;\/location&gt;\r\n    &lt;\/employee&gt;\r\n    &lt;employee id=&quot;222&quot;&gt;\r\n        &lt;firstName&gt;Alex&lt;\/firstName&gt;\r\n        &lt;lastName&gt;Gussin&lt;\/lastName&gt;\r\n        &lt;location&gt;Russia&lt;\/location&gt;\r\n    &lt;\/employee&gt;\r\n    &lt;employee id=&quot;333&quot;&gt;\r\n        &lt;firstName&gt;David&lt;\/firstName&gt;\r\n        &lt;lastName&gt;Feezor&lt;\/lastName&gt;\r\n        &lt;location&gt;USA&lt;\/location&gt;\r\n    &lt;\/employee&gt;\r\n&lt;\/employees&gt;\r\n<\/pre>\n<p><a name=\"dom_parsing_step\"><\/a><\/p>\n<h2>1. DOM Parser API<\/h2>\n<p>Let&#8217;s note down some broad steps to <strong>create and use DOM parser<\/strong> to parse a XML file in java.<\/p>\n<figure id=\"attachment_4108\" aria-describedby=\"caption-attachment-4108\" style=\"width: 446px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom.gif\" alt=\"DOM Parser in Action\" width=\"456\" height=\"207\" class=\"size-full wp-image-4108\" \/><figcaption id=\"caption-attachment-4108\" class=\"wp-caption-text\">DOM Parser in Action<\/figcaption><\/figure>\n<p><a name=\"import_package\"><\/a><\/p>\n<h4>1.1. Import dom parser packages<\/h4>\n<p>We will need to import dom parser packages first in our application.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nimport org.w3c.dom.*;\r\nimport javax.xml.parsers.*;\r\nimport java.io.*;\r\n<\/pre>\n<p><a name=\"create_documentbuilder\"><\/a><\/p>\n<h4>1.2. Create DocumentBuilder<\/h4>\n<p>Next step is to create the DocumentBuilder object.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\nDocumentBuilder builder = factory.newDocumentBuilder();\r\n<\/pre>\n<p><a name=\"create_document\"><\/a><\/p>\n<h4>1.3. Create Document object from xml file<\/h4>\n<p>Read the XML file to <code>Document<\/code> object.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nDocument document = builder.parse(new File( file ));\r\n<\/pre>\n<p><a name=\"validate_document\"><\/a><\/p>\n<h4>1.4. Validate Document structure<\/h4>\n<p>XML validation is optional but good to have it before start parsing.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nSchema schema = null;\r\ntry {\r\n  String language = XMLConstants.W3C_XML_SCHEMA_NS_URI;\r\n  SchemaFactory factory = SchemaFactory.newInstance(language);\r\n  schema = factory.newSchema(new File(name));\r\n} catch (Exception e) {\r\n    e.printStackStrace();\r\n}\r\nValidator validator = schema.newValidator();\r\nvalidator.validate(new DOMSource(document));\r\n<\/pre>\n<p><a name=\"get_root\"><\/a><\/p>\n<h4>1.5. Extract the root element<\/h4>\n<p>We can get the root element from XML document using below code.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nElement root = document.getDocumentElement();\r\n<\/pre>\n<p><a name=\"get_attr\"><\/a><\/p>\n<h4>1.6. Examine attributes<\/h4>\n<p>We can examine the xml element attributes using below methods.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nelement.getAttribute(&quot;attributeName&quot;) ;    \/\/returns specific attribute\r\nelement.getAttributes();                \/\/returns a Map (table) of names\/values\r\n<\/pre>\n<p><a name=\"get_childs\"><\/a><\/p>\n<h4>1.7. Examine sub-elements<\/h4>\n<p>Child elements can inquired in below manner.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nnode.getElementsByTagName(&quot;subElementName&quot;) \/\/returns a list of sub-elements of specified name\r\nnode.getChildNodes()                         \/\/returns a list of all child nodes\r\n<\/pre>\n<p><a name=\"parse_known_xml\"><\/a><\/p>\n<h2>2. Read XML with DOM parser<\/h2>\n<p>In below example code, I am assuming that user is already aware of the structure of <code>employees.xml<\/code> file (it&#8217;s nodes and attributes); So example directly start fetching information and start printing it in console. In real life application, we will use this information for some real purpose rather than printing it on console and leave.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/Get Document Builder\r\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\nDocumentBuilder builder = factory.newDocumentBuilder();\r\n\r\n\/\/Build Document\r\nDocument document = builder.parse(new File(&quot;employees.xml&quot;));\r\n\r\n\/\/Normalize the XML Structure; It's just too important !!\r\ndocument.getDocumentElement().normalize();\r\n\r\n\/\/Here comes the root node\r\nElement root = document.getDocumentElement();\r\nSystem.out.println(root.getNodeName());\r\n\r\n\/\/Get all employees\r\nNodeList nList = document.getElementsByTagName(&quot;employee&quot;);\r\nSystem.out.println(&quot;============================&quot;);\r\n\r\nfor (int temp = 0; temp &lt; nList.getLength(); temp++)\r\n{\r\n Node node = nList.item(temp);\r\n System.out.println(&quot;&quot;);    \/\/Just a separator\r\n if (node.getNodeType() == Node.ELEMENT_NODE)\r\n {\r\n    \/\/Print each employee's detail\r\n    Element eElement = (Element) node;\r\n    System.out.println(&quot;Employee id : &quot;    + eElement.getAttribute(&quot;id&quot;));\r\n    System.out.println(&quot;First Name : &quot;  + eElement.getElementsByTagName(&quot;firstName&quot;).item(0).getTextContent());\r\n    System.out.println(&quot;Last Name : &quot;   + eElement.getElementsByTagName(&quot;lastName&quot;).item(0).getTextContent());\r\n    System.out.println(&quot;Location : &quot;    + eElement.getElementsByTagName(&quot;location&quot;).item(0).getTextContent());\r\n }\r\n}\r\n<\/pre>\n<p>Program Output:<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nemployees\r\n============================\r\n\r\nEmployee id : 111\r\nFirst Name : Lokesh\r\nLast Name : Gupta\r\nLocation : India\r\n\r\nEmployee id : 222\r\nFirst Name : Alex\r\nLast Name : Gussin\r\nLocation : Russia\r\n\r\nEmployee id : 333\r\nFirst Name : David\r\nLast Name : Feezor\r\nLocation : USA\r\n<\/pre>\n<p><a name=\"populate_dtos\"><\/a><\/p>\n<h2>3. Read data to POJO objects<\/h2>\n<p>Another real life application&#8217;s requirement might be populating the DTO objects with information fetched in above example code. I wrote a simple program to help you understand how it can be done easily.<\/p>\n<p>Let&#8217;s say we have to populate <code>Employee<\/code> objects which is defined as below.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class Employee\r\n{\r\n   private Integer id;\r\n   private String firstName;\r\n   private String lastName;\r\n   private String location;\r\n   \r\n   \/\/Setters and Getters\r\n   \r\n   @Override\r\n   public String toString()\r\n   {\r\n      return &quot;Employee [id=&quot; + id + &quot;, firstName=&quot; + firstName + &quot;, lastName=&quot; + lastName + &quot;, location=&quot; + location + &quot;]&quot;;\r\n   }\r\n}\r\n<\/pre>\n<p>Now look at the example code to populate employee objects list. Its just as simple as inserting few lines in between the code, and then copy the values in DTOs instead of console.<\/p>\n<p>Java program to read XML file with DOM parser.<\/p>\n<pre class=\"brush: java; title: PopulateDTOExamplesWithParsedXML.java; notranslate\" title=\"PopulateDTOExamplesWithParsedXML.java\">\r\npublic class PopulateDTOExamplesWithParsedXML\r\n{\r\n   public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException\r\n   {\r\n        List&lt;Employee&gt; employees = parseEmployeesXML();\r\n        System.out.println(employees);\r\n   }\r\n\r\n   private static List&lt;Employee&gt; parseEmployeesXML() throws ParserConfigurationException, SAXException, IOException\r\n   {\r\n      \/\/Initialize a list of employees\r\n      List&lt;Employee&gt; employees = new ArrayList&lt;Employee&gt;();\r\n      Employee employee = null;\r\n      \r\n      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n      DocumentBuilder builder = factory.newDocumentBuilder();\r\n      Document document = builder.parse(new File(&quot;employees.xml&quot;));\r\n      document.getDocumentElement().normalize();\r\n      NodeList nList = document.getElementsByTagName(&quot;employee&quot;);\r\n      for (int temp = 0; temp &lt; nList.getLength(); temp++)\r\n      {\r\n         Node node = nList.item(temp);\r\n         if (node.getNodeType() == Node.ELEMENT_NODE)\r\n         {\r\n            Element eElement = (Element) node;\r\n            \/\/Create new Employee Object\r\n            employee = new Employee();\r\n            employee.setId(Integer.parseInt(eElement.getAttribute(&quot;id&quot;)));\r\n            employee.setFirstName(eElement.getElementsByTagName(&quot;firstName&quot;).item(0).getTextContent());\r\n            employee.setLastName(eElement.getElementsByTagName(&quot;lastName&quot;).item(0).getTextContent());\r\n            employee.setLocation(eElement.getElementsByTagName(&quot;location&quot;).item(0).getTextContent());\r\n            \r\n            \/\/Add Employee to list\r\n            employees.add(employee);\r\n         }\r\n      }\r\n      return employees;\r\n   }\r\n}\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n[Employee [id=111, firstName=Lokesh, lastName=Gupta, location=India], \r\nEmployee [id=222, firstName=Alex, lastName=Gussin, location=Russia], \r\nEmployee [id=333, firstName=David, lastName=Feezor, location=USA]]\r\n<\/pre>\n<p><a name=\"parse_unknown_xml\"><\/a><\/p>\n<h2>4. Parse &#8220;unknown&#8221; xml with DOM parser<\/h2>\n<p>Previous example shows the way we can iterate over an XML document parsed with known or little know structure to you, while you are writing the code. In some cases, we may have to write the code in such a way such that even if there is some differences in assumed XML structure while coding, program must work without failure.<\/p>\n<p>Here we are iterating over all elements present in XML document tree. we can add our knowledge and modify the code such that as soon as we get required information while traversing the tree, we just use it.<\/p>\n<pre class=\"brush: java; title: ParseUnknownXMLStructure.java; notranslate\" title=\"ParseUnknownXMLStructure.java\">\r\npublic class ParseUnknownXMLStructure\r\n{\r\n   public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException\r\n   {\r\n      \/\/Get Document Builder\r\n      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n      DocumentBuilder builder = factory.newDocumentBuilder();\r\n      \r\n      \/\/Build Document\r\n      Document document = builder.parse(new File(&quot;employees.xml&quot;));\r\n      \r\n      \/\/Normalize the XML Structure; It's just too important !!\r\n      document.getDocumentElement().normalize();\r\n      \r\n      \/\/Here comes the root node\r\n      Element root = document.getDocumentElement();\r\n      System.out.println(root.getNodeName());\r\n      \r\n      \/\/Get all employees\r\n      NodeList nList = document.getElementsByTagName(&quot;employee&quot;);\r\n      System.out.println(&quot;============================&quot;);\r\n      \r\n      visitChildNodes(nList);\r\n   }\r\n\r\n   \/\/This function is called recursively\r\n   private static void visitChildNodes(NodeList nList)\r\n   {\r\n      for (int temp = 0; temp &lt; nList.getLength(); temp++)\r\n      {\r\n         Node node = nList.item(temp);\r\n         if (node.getNodeType() == Node.ELEMENT_NODE)\r\n         {\r\n            System.out.println(&quot;Node Name = &quot; + node.getNodeName() + &quot;; Value = &quot; + node.getTextContent());\r\n            \/\/Check all attributes\r\n            if (node.hasAttributes()) {\r\n               \/\/ get attributes names and values\r\n               NamedNodeMap nodeMap = node.getAttributes();\r\n               for (int i = 0; i &lt; nodeMap.getLength(); i++)\r\n               {\r\n                   Node tempNode = nodeMap.item(i);\r\n                   System.out.println(&quot;Attr name : &quot; + tempNode.getNodeName()+ &quot;; Value = &quot; + tempNode.getNodeValue());\r\n               }\r\n               if (node.hasChildNodes()) {\r\n                  \/\/We got more childs; Let's visit them as well\r\n                  visitChildNodes(node.getChildNodes());\r\n               }\r\n           }\r\n         }\r\n      }\r\n   }\r\n}\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nemployees\r\n============================\r\nNode Name = employee; Value = \r\n        Lokesh\r\n        Gupta\r\n        India\r\n    \r\nAttr name : id; Value = 111\r\nNode Name = firstName; Value = Lokesh\r\nNode Name = lastName; Value = Gupta\r\nNode Name = location; Value = India\r\nNode Name = employee; Value = \r\n        Alex\r\n        Gussin\r\n        Russia\r\n    \r\nAttr name : id; Value = 222\r\nNode Name = firstName; Value = Alex\r\nNode Name = lastName; Value = Gussin\r\nNode Name = location; Value = Russia\r\nNode Name = employee; Value = \r\n        David\r\n        Feezor\r\n        USA\r\n    \r\nAttr name : id; Value = 333\r\nNode Name = firstName; Value = David\r\nNode Name = lastName; Value = Feezor\r\nNode Name = location; Value = USA\r\n<\/pre>\n<p>That&#8217;s all for this good to know concept&#8217;s around <strong>Java XML DOM Parser<\/strong>. Drop me a comment if something is not clear OR needs more explanation.<\/p>\n<div class=\"noticeboxesde downgreennoticebox\"><a title=\"dom parser example sourcecode\" href=\"https:\/\/drive.google.com\/file\/d\/0B7yo2HclmjI4d1dwd2hZb19IbEU\/edit?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\">Download Source code\/a> <\/div>\n<p>Happy Learning !!<\/p>\n<p>Reference: <\/p>\n<p><a title=\"DOM\" href=\"http:\/\/www.w3c.org\/DOM\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.w3c.org\/DOM\/<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, learn to read or parse XML document using Java DOM (Document Object Model) parser API for XML example. Learn to parse XML to java objects.<\/p>\n","protected":false},"author":2,"featured_media":4108,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[50],"tags":[1431],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom.gif",456,207,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom-150x150.gif",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom-300x136.gif",300,136,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom.gif",456,207,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom.gif",456,207,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom.gif",456,207,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom.gif",456,207,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/dom.gif",120,54,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":26,"uagb_excerpt":"In this tutorial, learn to read or parse XML document using Java DOM (Document Object Model) parser API for XML example. Learn to parse XML to java objects.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4107"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4107"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4107\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4108"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4107"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4107"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4107"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}