{"id":5288,"date":"2015-12-23T11:34:32","date_gmt":"2015-12-23T06:04:32","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=5288"},"modified":"2021-12-17T00:32:49","modified_gmt":"2021-12-16T19:02:49","slug":"jackson-read-write-json","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/jackson\/jackson-read-write-json\/","title":{"rendered":"Jackson &#8211; Read and Write JSON"},"content":{"rendered":"\n<p>In this Jackson tutorial, we will learn to use Jackson <em>ObjectMapper<\/em> to read and write JSON data into Java Objects.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-d073cdad \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-jackson-dependencies\">1. Jackson Dependencies<\/a><li class=\"uagb-toc__list\"><a href=\"#2-objectmapper\">2. ObjectMapper<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-syntax\">2.1. Syntax<\/a><li class=\"uagb-toc__list\"><a href=\"#22-features\">2.2. Features<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-writing-json\">3. Writing JSON<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-simple-usage\">3.1. Simple Usage<\/a><li class=\"uagb-toc__list\"><a href=\"#32-pretty-printing\">3.2. Pretty Printing<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#4-reading-json\">4. Reading JSON<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-reading-json-string-to-pojo\">4.1. Reading JSON String to POJO<\/a><li class=\"uagb-toc__list\"><a href=\"#42-reading-json-file\">4.2. Reading JSON File<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. Jackson Dependencies<\/h2>\n\n\n\n<p>To include Jackson 2 library in our project, we should include <code>jackson-databind<\/code> dependency which internally pulls the other two needed dependencies i.e. <code>jackson-annotations<\/code>&nbsp;and&nbsp;<code>jackson-core<\/code>.<\/p>\n\n\n\n<p>We can find the <a href=\"https:\/\/mvnrepository.com\/artifact\/com.fasterxml.jackson.core\/jackson-databind\" target=\"_blank\" rel=\"noreferrer noopener\">latest version from the maven site<\/a>.<a name=\"java-to-json\"><\/a><\/p>\n\n\n\n<pre title=\"pom.xml\" class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;properties&gt;\n      &lt;jackson.version&gt;2.13.0&lt;\/jackson.version&gt;\n&lt;\/properties&gt;\n\n&lt;dependency&gt;\n      &lt;groupId&gt;com.fasterxml.jackson.core&lt;\/groupId&gt;\n      &lt;artifactId&gt;jackson-databind&lt;\/artifactId&gt;\n      &lt;version&gt;${jackson.version}&lt;\/version&gt;\n&lt;\/dependency&gt;     <\/code><\/pre>\n\n\n\n<pre title=\"build.gradle\" class=\"wp-block-code\"><code lang=\"properties\" class=\"language-properties\">implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'\n<\/code><\/pre>\n\n\n\n<h2>2. ObjectMapper<\/h2>\n\n\n\n<p>ObjectMapper is the main api used for data-binding. It comes with several reader\/writer methods to perform the conversion from\/to Java and JSON. It will use instances of\u00a0<code>JsonParser<\/code>\u00a0and\u00a0<code>JsonGenerator<\/code>\u00a0for implementing actual reading\/writing of JSON.<\/p>\n\n\n\n<p>ObjectMapper provides functionality for reading and writing JSON in two forms:<\/p>\n\n\n\n<ul><li>to and from basic POJOs<\/li><li>to and from a general-purpose JSON Tree Model<\/li><\/ul>\n\n\n\n<h3>2.1. Syntax<\/h3>\n\n\n\n<p>Use below sample syntax to read JSON and populate java objects.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ObjectMapper mapper = new ObjectMapper();\r\nObject value = mapper.readValue(jsonSource , javaObject);<\/code><\/pre>\n\n\n\n<p>Use below sample syntax to write java object to JSON string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ObjectMapper mapper = new ObjectMapper();\r\nObject value = mapper.writeValue(jsonTarget, javaObject);<\/code><\/pre>\n\n\n\n<h3>2.2. Features<\/h3>\n\n\n\n<p><em>ObjectMapper<\/em>\u00a0also acts as a factory for more advanced\u00a0<code>ObjectReader<\/code>\u00a0and\u00a0<code>ObjectWriter<\/code>\u00a0classes. These classes are <a href=\"https:\/\/howtodoinjava.com\/design-patterns\/creational\/builder-pattern-in-java\/\">builder pattern<\/a> style objects pretty much do the same thing as <em>ObjectMapper<\/em>.<\/p>\n\n\n\n<p>ObjectMapper instances are fully <a href=\"https:\/\/howtodoinjava.com\/java\/multi-threading\/what-is-thread-safety\/\" target=\"_blank\" rel=\"noreferrer noopener\">thread-safe<\/a> provided that ALL configuration of the instance occurs before ANY read or write calls.<\/p>\n\n\n\n<p>The main methods in the <em>ObjectMapper<\/em> class are:<\/p>\n\n\n\n<ul><li><em>canDeserialize(Class type)<\/em> &#8211; to check whether mapper can deserialize an instance of given Class.<\/li><li><em>canSerialize(Class type)<\/em> &#8211; to check whether mapper can serialize an instance of given Class.<\/li><li><em>configure(SerializationFeature f, boolean state) <\/em>&#8211; changes state of an on\/off serialization feature.<\/li><li><em>configure(DeserializationFeature f, boolean state)<\/em> &#8211; changes state of an on\/off deserialization feature.<\/li><li><em>configure(JsonParser.Feature f, boolean state)<\/em> &#8211; changes state of specified feature for parser instance.<\/li><li><em>copy()<\/em> &#8211; creates a new <em>ObjectMapper<\/em> instance that has same initial configuration as original instance.<\/li><li><em>readValue()<\/em> &#8211; reads the JSON from various sources such as byte array, File, InputStream, Reader, URL or String.<\/li><li><em>writeValue()<\/em> &#8211; writes to serialize JSON to various formats such as OutputStream, Writer, POJO or File.<\/li><\/ul>\n\n\n\n<h2>3. Writing JSON<\/h2>\n\n\n\n<h3>3.1. Simple Usage<\/h3>\n\n\n\n<p>Jackson is pretty much straightforward in converting between simple POJO objects to JSON strings. It involves only two steps:<\/p>\n\n\n\n<ul><li>Create instance of <code>com.fasterxml.jackson.databind.ObjectMapper<\/code><\/li><li>Use <code>objectMapper.writeValueAsString()<\/code> method to convert POJO to JSON<\/li><\/ul>\n\n\n\n<pre title=\"Article.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Article \n{\n\tprivate Long id;\n\tprivate String title;\n\tprivate List&lt;String&gt; tags;\n\n        \/\/Setters, getters and constructors are hidden for brevity\n}<\/code><\/pre>\n\n\n\n<pre title=\"Converting POJO to JSON\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ObjectMapper mapper = new ObjectMapper();\n\nArticle article = new Article(1L, \"Test Title\", Collections.singletonList(\"Test Tag\"));\n\nString json = mapper.writeValueAsString(article);\n\nSystem.out.println(json);  \/\/{\"id\":1,\"title\":\"Test Title\",\"tags\":[\"Test Tag\"]}<\/code><\/pre>\n\n\n\n<h3>3.2. Pretty Printing<\/h3>\n\n\n\n<p>To get the <em>formatted JSON string<\/em>, use <strong>writerWithDefaultPrettyPrinter()<\/strong> method to get pretty print enabled writer instance. <\/p>\n\n\n\n<p>Or we can simply enable the <em><a href=\"https:\/\/fasterxml.github.io\/jackson-databind\/javadoc\/2.13\/com\/fasterxml\/jackson\/databind\/SerializationFeature.html\" target=\"_blank\" rel=\"noreferrer noopener\">SerializationFeature<\/a>.INDENT_OUTPUT<\/em> in the <em>ObjectMapper<\/em> class.<\/p>\n\n\n\n<pre title=\"Converting POJO to JSON\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Article article = new Article(1L, \"Test Title\", Collections.singletonList(\"Test Tag\"));\n\nObjectMapper mapper = new ObjectMapper();\nString json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(article);\n\n\/\/or\n\nObjectMapper mapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);\nString json = mapper..writeValueAsString(article);\n\nSystem.out.println(json);  <\/code><\/pre>\n\n\n\n<pre title=\"Pretty printed output\" class=\"wp-block-code\"><code lang=\"json\" class=\"language-json\">{\n  \"id\" : 1,\n  \"title\" : \"Test Title\",\n  \"tags\" : [ \"Test Tag\" ]\n}<\/code><\/pre>\n\n\n\n<h2>4. Reading JSON<\/h2>\n\n\n\n<h3>4.1. Reading JSON String to POJO<\/h3>\n\n\n\n<p>Similar to write operation, reading a JSON to Java object is pretty simple. We need to use the <em>readValue()<\/em> method of <em>ObjectMapper<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String json = \"{\\\"id\\\":1,\\\"title\\\":\\\"Test Title\\\",\\\"tags\\\":[\\\"Test Tag\\\"]}\";\n\nObjectMapper mapper = new ObjectMapper();\nArticle newArticle = mapper.readValue(json, Article.class);\n\nSystem.out.println(newArticle);  \/\/Article [id=1, title=Test Title, tags=[Test Tag]]<\/code><\/pre>\n\n\n\n<h3>4.2. Reading JSON File<\/h3>\n\n\n\n<p>Reading the JSON from a file to a Java object is also pretty much similar to the previous example. We need to use the <em>readValue()<\/em> method of <em>ObjectMapper<\/em>.<\/p>\n\n\n\n<p>We only need to replace the first parameter to <em>readValue()<\/em> method and pass the <em>File<\/em> instance to it.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java\/io\/read-file-from-resources-folder\/\" target=\"_blank\" rel=\"noreferrer noopener\">Reading a file from the resources folder<\/a><\/p><\/blockquote>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ObjectMapper mapper = new ObjectMapper();\n\n\/\/Reads the file from resources folder\nURL url = Jackson2Demo.class.getClassLoader().getResource(\"article.json\");\n\nArticle article = mapper.readValue(new File(url.getFile()), Article.class);\n\nSystem.out.println(article);<\/code><\/pre>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/opensource-examples\/tree\/main\/src\/main\/java\/com\/howtodoinjava\/demo\/jackson\" target=\"_blank\" rel=\"noreferrer noopener\">Sourcecode Download<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>In this Jackson tutorial, we will learn to use Jackson ObjectMapper to read and write JSON data into Java Objects. 1. Jackson Dependencies To include Jackson 2 library in our project, we should include jackson-databind dependency which internally pulls the other two needed dependencies i.e. jackson-annotations&nbsp;and&nbsp;jackson-core. We can find the latest version from the maven &#8230; <a title=\"Jackson &#8211; Read and Write JSON\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/jackson\/jackson-read-write-json\/\" aria-label=\"More on Jackson &#8211; Read and Write JSON\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":5825,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[276],"tags":[827,1430],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/02\/json-editor.png",252,252,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/02\/json-editor-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/02\/json-editor.png",252,252,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/02\/json-editor.png",252,252,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/02\/json-editor.png",252,252,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/02\/json-editor.png",252,252,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/02\/json-editor.png",252,252,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/02\/json-editor.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"In this Jackson tutorial, we will learn to use Jackson ObjectMapper to read and write JSON data into Java Objects. 1. Jackson Dependencies To include Jackson 2 library in our project, we should include jackson-databind dependency which internally pulls the other two needed dependencies i.e. jackson-annotations&nbsp;and&nbsp;jackson-core. We can find the latest version from the maven&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/5288"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=5288"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/5288\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/5825"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=5288"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=5288"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=5288"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}