{"id":12002,"date":"2018-10-30T14:40:33","date_gmt":"2018-10-30T09:10:33","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=12002"},"modified":"2020-04-10T23:10:28","modified_gmt":"2020-04-10T17:40:28","slug":"java-iterator","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/collections\/java-iterator\/","title":{"rendered":"Java Iterator interface example"},"content":{"rendered":"<p><strong>Java Iterator<\/strong> interface used to iterate over the elements in a collection (list, set or map). It helps to retrieve the specified collection elements one by one and perform operations over each element.<\/p>\n<h2>1. Java Iterator interface<\/h2>\n<p>All Java collection classes provide <strong>iterator()<\/strong> method which return the instance of <strong>Iterator<\/strong> to walk over the elements in that collection. For example, arraylist class <strong>iterator()<\/strong> method return an iterator over the elements in this list <strong>in proper sequence<\/strong>.<\/p>\n<pre class=\"brush: java; title: Iterator example; notranslate\" title=\"Iterator example\">\r\nArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\r\n        \r\nlist.add(&quot;A&quot;);\r\nlist.add(&quot;B&quot;);\r\nlist.add(&quot;C&quot;);\r\nlist.add(&quot;D&quot;);\r\n\r\nIterator&lt;String&gt; iterator = list.iterator();\r\n\r\nwhile(iterator.hasNext()) {\r\n    System.out.println( iterator.next() );\r\n}\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nA\r\nB\r\nC\r\nD\r\n<\/pre>\n<h2>2. Java Iterator methods<\/h2>\n<h4>2.1. Iterator hasNext()<\/h4>\n<ul>\n<li>This method returns <code>true<\/code> if the iteration has more elements remaining in the collection.<\/li>\n<li>If iterator has gone over all elements then this method will return <code>false<\/code>.<\/li>\n<\/ul>\n<h4>2.2. Iterator next()<\/h4>\n<ul>\n<li>This method returns the next element in the iteration.<\/li>\n<li>It throws <strong>NoSuchElementException<\/strong> if the iteration has no more elements.<\/li>\n<\/ul>\n<h4>2.3. Iterator remove()<\/h4>\n<ul>\n<li>It removes from the underlying collection the last element returned by the iterator (optional operation).<\/li>\n<li>This method can be called only once per call to next().<\/li>\n<li>If the underlying collection is modified while the iteration is in progress in any way other than by calling <code>remove()<\/code> method, iterator will throw an <strong>ConcurrentModificationException<\/strong>.<\/li>\n<li>Iterators that do this are known as <strong>fail-fast<\/strong> iterators, as they fail quickly and cleanly, rather that risking arbitrary, non-deterministic behavior at an undetermined time in the future.<\/li>\n<\/ul>\n<h4>2.4. Iterator forEachRemaining()<\/h4>\n<ul>\n<li>This method performs the given action for each remaining element until all elements have been processed or the action throws an exception.<\/li>\n<li>Actions are performed in the order of iteration, if that order is specified.<\/li>\n<li>It throws NullPointerException if the specified action is null.<\/li>\n<\/ul>\n<h2>3. Java Iterator example<\/h2>\n<h4>3.1. ArrayList Iterate Example<\/h4>\n<p>Java example to iterate over <strong><a href=\"https:\/\/howtodoinjava.com\/java-arraylist\/\">ArrayList<\/a><\/strong> elements.<\/p>\n<pre class=\"brush: java; title: ArrayList Iterator example; notranslate\" title=\"ArrayList Iterator example\">\r\nArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\r\n        \r\nlist.add(&quot;A&quot;);\r\nlist.add(&quot;B&quot;);\r\nlist.add(&quot;C&quot;);\r\nlist.add(&quot;D&quot;);\r\n\r\nSystem.out.println(list);\r\n\r\n\/\/Get iterator\r\nIterator&lt;String&gt; iterator = list.iterator();\r\n\r\n\/\/Iterate over all elements\r\nwhile(iterator.hasNext()) \r\n{\r\n    \/\/Get current element\r\n    String value = iterator.next();\r\n    \r\n    System.out.println( value );\r\n    \r\n    \/\/Remove element\r\n    if(value.equals(&quot;B&quot;)) {\r\n        iterator.remove();\r\n    }\r\n}\r\n\r\nSystem.out.println(list);\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n[A, B, C, D]\r\nA\r\nB\r\nC\r\nD\r\n[A, C, D]\r\n<\/pre>\n<h4>3.2. HashSet Iterate Example<\/h4>\n<p>Iterating over a <strong><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-hashset\/\">HashSet<\/a><\/strong> is very similar to iterate over a list. No visible differences.<\/p>\n<pre class=\"brush: java; title: HashSet Iterator example; notranslate\" title=\"HashSet Iterator example\">\r\nHashSet&lt;String&gt; hashSet = new HashSet&lt;&gt;();\r\n        \r\nhashSet.add(&quot;A&quot;);\r\nhashSet.add(&quot;B&quot;);\r\nhashSet.add(&quot;C&quot;);\r\nhashSet.add(&quot;D&quot;);\r\n\r\nSystem.out.println(hashSet);\r\n\r\n\/\/Get iterator\r\nIterator&lt;String&gt; iterator = hashSet.iterator();\r\n\r\n\/\/Iterate over all elements\r\nwhile(iterator.hasNext()) \r\n{\r\n    \/\/Get current element\r\n    String value = iterator.next();\r\n    \r\n    System.out.println( value );\r\n    \r\n    \/\/Remove element\r\n    if(value.equals(&quot;B&quot;)) {\r\n        iterator.remove();\r\n    }\r\n}\r\n\r\nSystem.out.println(list);\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n[A, B, C, D]\r\nA\r\nB\r\nC\r\nD\r\n[A, C, D]\r\n<\/pre>\n<h4>3.3. HashMap Keys Iterator Example<\/h4>\n<p>Java example to iterate over keys of a <strong><a href=\"https:\/\/howtodoinjava.com\/java-hashmap\/\">HashMap<\/a><\/strong>.<\/p>\n<pre class=\"brush: java; title: HashMap Keys Iterator example; notranslate\" title=\"HashMap Keys Iterator example\">\r\nHashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\r\n        \r\nmap.put(1, &quot;A&quot;);\r\nmap.put(2, &quot;B&quot;);\r\nmap.put(3, &quot;C&quot;);\r\nmap.put(4, &quot;D&quot;);\r\n\r\nSystem.out.println(map);\r\n\r\n\/\/Get iterator\r\nIterator&lt;String&gt; iterator = map.keys().iterator();\r\n\r\n\/\/Iterate over all keys\r\nwhile(iterator.hasNext()) \r\n{\r\n    String key = iterator.next();\r\n    System.out.println( &quot;Key : &quot; + key + &quot;, Value : &quot; + map.get(key) );\r\n}\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n{1=A, 2=B, 3=C, 4=D}\r\nKey : 1, Value : A\r\nKey : 2, Value : B\r\nKey : 3, Value : C\r\nKey : 4, Value : D\r\n<\/pre>\n<h4>3.4. HashMap Values Iterator Example<\/h4>\n<p>Java example to iterate over values of a HashMap.<\/p>\n<pre class=\"brush: java; title: HashMap Values Iterator example; notranslate\" title=\"HashMap Values Iterator example\">\r\nHashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\r\n        \r\nmap.put(1, &quot;A&quot;);\r\nmap.put(2, &quot;B&quot;);\r\nmap.put(3, &quot;C&quot;);\r\nmap.put(4, &quot;D&quot;);\r\n\r\nSystem.out.println(map);\r\n\r\n\/\/Get iterator\r\nIterator&lt;String&gt; iterator = map.values().iterator();\r\n\r\n\/\/Iterate over all values\r\nwhile(iterator.hasNext()) \r\n{\r\n    System.out.println( &quot;Value : &quot; + iterator.next() );\r\n}\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n{1=A, 2=B, 3=C, 4=D}\r\nValue : A\r\nValue : B\r\nValue : C\r\nValue : D\r\n<\/pre>\n<h4>3.5. Iterator forEachRemaining() Example<\/h4>\n<p>Java example to iterate over ArrayList elements and perform an action on them.<\/p>\n<pre class=\"brush: java; title: HashSet Iterator example; notranslate\" title=\"HashSet Iterator example\">\r\nArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\r\n\r\nlist.add(&quot;A&quot;);\r\nlist.add(&quot;B&quot;);\r\nlist.add(&quot;C&quot;);\r\nlist.add(&quot;D&quot;);\r\n\r\nlist.iterator().forEachRemaining( System.out::println );\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nA\r\nB\r\nC\r\nD\r\n<\/pre>\n<h2>4. Convert Iterator to Stream<\/h2>\n<p>Convert iterator to stream by first converting iterator to <code>Spliterator<\/code> and then using <code>StreamSupport<\/code> to get stream from Spliterator.<\/p>\n<pre class=\"brush: java; highlight: [16,17,20]; title: IteratorToStream.java; notranslate\" title=\"IteratorToStream.java\">\r\nimport java.util.Arrays;\r\nimport java.util.Iterator;\r\nimport java.util.Spliterator;\r\nimport java.util.Spliterators;\r\nimport java.util.stream.Stream;\r\nimport java.util.stream.StreamSupport;\r\n\r\npublic class IteratorToStream \r\n{\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\t\/\/ Iterator\r\n\t\tIterator&lt;String&gt; iterator = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\r\n\t\t\t\t\t\t\t\t\t\t\t.listIterator();\r\n\t\t\/\/Extra step to get Spliterator\r\n\t\tSpliterator&lt;String&gt; splitItr = Spliterators\r\n\t\t\t\t.spliteratorUnknownSize(iterator, Spliterator.ORDERED);\r\n\r\n\t\t\/\/ Iterator -&gt; Stream\r\n\t\tStream&lt;String&gt; stream = StreamSupport.stream(splitItr, false);\r\n\r\n\t\t\/\/ Apply stream operations\r\n\t\tstream.forEach(System.out::println);\r\n\t}\r\n}\r\n<\/pre>\n<p>Program output:<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\na\r\nb\r\nc\r\n<\/pre>\n<h2>5. Conclusion<\/h2>\n<p>In this tutorial, we learned the <strong>Java Iterator interface<\/strong>. We learned the iterator methods and simple examples to iterate over different collections such as <code>List<\/code>, <code>Set<\/code> and <code>Map<\/code>.<\/p>\n<p>Drop me your questions in the comments section.<\/p>\n<p>Happy Learning !!<\/p>\n<p>References:<\/p>\n<p><a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/Iterator.html\">Iterator Interface Java Docs<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java Iterator interface used to iterate over the elements in a collection (list, set or map). It helps to retrieve the specified collection elements one by one and perform operations over each element. 1. Java Iterator interface All Java collection classes provide iterator() method which return the instance of Iterator to walk over the elements &#8230; <a title=\"Java Iterator interface example\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-iterator\/\" aria-label=\"More on Java Iterator interface example\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":10411,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[785],"tags":[1479],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",150,105,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",300,210,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",120,84,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"Java Iterator interface used to iterate over the elements in a collection (list, set or map). It helps to retrieve the specified collection elements one by one and perform operations over each element. 1. Java Iterator interface All Java collection classes provide iterator() method which return the instance of Iterator to walk over the elements&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12002"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=12002"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12002\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/10411"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=12002"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=12002"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=12002"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}