{"id":193,"date":"2012-11-02T04:59:18","date_gmt":"2012-11-01T23:29:18","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=193"},"modified":"2022-03-14T12:22:05","modified_gmt":"2022-03-14T06:52:05","slug":"main-method","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/main-method\/","title":{"rendered":"Java main() Method"},"content":{"rendered":"\n<p>Have you ever tried to reason why <strong>Java&#8217;s <code>main()<\/code> method<\/strong> is <code>public<\/code>, <code>static<\/code> and <code>void<\/code>? Why its name is <code>main<\/code>? What happens inside JVM when you invoke <code>main()<\/code> method? What is the <strong>purpose of main method<\/strong>? Let&#8217;s find out.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-d86170d5 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-java-main-method-syntax\">1. Java main() Method Syntax<\/a><li class=\"uagb-toc__list\"><a href=\"#2-why-java-main-method-is-public\">2. Why Java main Method is public?<\/a><li class=\"uagb-toc__list\"><a href=\"#3-why-static\">3. Why static?<\/a><li class=\"uagb-toc__list\"><a href=\"#4-why-void\">4. Why void?<\/a><li class=\"uagb-toc__list\"><a href=\"#5-why-the-name-is-main\">5. Why the name is main?<\/a><li class=\"uagb-toc__list\"><a href=\"#6-what-happens-internally-when-you-invoke-main-method\">6. What happens internally when you invoke main method?<\/a><li class=\"uagb-toc__list\"><a href=\"#7-main-method-native-code-in-javac\">7. main() method native code in java.c<\/a><li class=\"uagb-toc__list\"><a href=\"#8-summary\">8. Summary<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"1-java-main-method-syntax\">1. Java main() Method Syntax<\/h2>\n\n\n\n<p>Start with reminding the <strong>syntax of the main method in Java<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Main\n{\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello World !!\");\n    }\n}<\/code><\/pre>\n\n\n\n<h2 id=\"2-why-java-main-method-is-public\">2. Why Java <em>main<\/em> Method is <em>public<\/em>?<\/h2>\n\n\n\n<p>This is a big question and perhaps most difficult to answer, too. I tried hard to find a good reason for this question in all the good learning material in my reach, but nothing proved enough. <\/p>\n\n\n\n<p>So, my analysis says (like many others): the <strong>main method is public so that it can be accessible everywhere and to every object which may desire to use it for launching the application<\/strong>. <\/p>\n\n\n\n<p>Here, I am not saying that JDK\/JRE had this exact similar reason because <code>java.exe<\/code> or <code>javaw.exe<\/code> (for windows) can use <strong>Java Native Interface<\/strong> (JNI) to execute the <code>invoke<\/code> method for calling the <em>main()<\/em> method, so they can have invoked it, either way, irrespective of any access modifier.<\/p>\n\n\n\n<p>A second way to answer this is another question, why not public? All methods and constructors in java have some <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-access-modifiers\/\">access modifier<\/a>. The <em>main()<\/em> method also needs one. There is no reason why it should not be <code>public<\/code>, and be any other modifier(default\/protected\/private).<\/p>\n\n\n\n<p>Notice that if we do not make <em>main()<\/em> method public, there is no compilation error. You will runtime error because the matching <code>main()<\/code> method is not present. Remember that the whole syntax should match to execute <code>main()<\/code> method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Main\n{\n    void static main(String[] args)\n    {\n        System.out.println(\"Hello World !!\");\n    }\n}<\/code><\/pre>\n\n\n\n<p>Program Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Error: Main method not found in class Main, please define the main method as:\n   public static void main(String[] args)<\/code><\/pre>\n\n\n\n<h2 id=\"3-why-static\">3. Why <em>static<\/em>?<\/h2>\n\n\n\n<p>Another big question. To understand this, let suppose we do not have the main method as <code>static<\/code>. Now, to invoke any method you need an instance of it. Right?<\/p>\n\n\n\n<p><strong>Java can have overloaded constructors, we all know. Now, which one should be used, and from where the parameters for overloaded constructors will come<\/strong>. These are just more difficult questions, which helped Java designers to make up their minds and to have the main method as <code>static<\/code>.<\/p>\n\n\n\n<p>Notice that if you do not make <code>main()<\/code> method <code>static<\/code>, there is no compilation error. You will <strong>runtime error<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Main\n{\n    public void main(String[] args)\n    {\n        System.out.println(\"Hello World !!\");\n    }\n}<\/code><\/pre>\n\n\n\n<p>Program Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Error: Main method is not static in class main, please define the main method as:\n   public static void main(String[] args)<\/code><\/pre>\n\n\n\n<h2 id=\"4-why-void\">4. Why <em>void<\/em>?<\/h2>\n\n\n\n<p>Why should it not be void? Have you called this method from your code? NO. <strong>Then there is no use of returning any value to JVM, who actually invokes this method<\/strong>. It simply doesn&#8217;t need any returning value.<\/p>\n\n\n\n<p>The only thing application would like to communicate to the invoking process is normal or abnormal termination. This is already possible using&nbsp;<code><em>System.exit(int)<\/em><\/code>. A non-zero value means abnormal termination otherwise everything was fine.<\/p>\n\n\n\n<h2 id=\"5-why-the-name-is-main\">5. Why the name is main?<\/h2>\n\n\n\n<p>No rock-solid reason. Let us assume because <strong>it was already in use with C and C++ language<\/strong>. So, most developers were already comfortable with this name. <\/p>\n\n\n\n<p>Otherwise, there is no other good reason.<\/p>\n\n\n\n<h2 id=\"6-what-happens-internally-when-you-invoke-main-method\">6. What happens internally when you invoke <em>main<\/em> method?<\/h2>\n\n\n\n<p>The <strong>purpose of the main method in Java<\/strong> is to be a program execution start point.<\/p>\n\n\n\n<p>When you run <code>java.exe<\/code>, then <strong>there are a couple of Java Native Interface (JNI) calls<\/strong>. These calls load the DLL that is really the JVM (that&#8217;s right &#8211; <code>java.exe<\/code> is NOT the JVM). JNI is the tool that we use when we have to bridge between the virtual machine world, and the world of C, C++, etc. The reverse is also true. It is not possible to actually get a JVM running without using JNI.<\/p>\n\n\n\n<p>Basically, <code>java.exe<\/code> is a super simple C application that <strong>parses the command line<\/strong>, <strong>creates a new String array<\/strong> in the JVM to hold those arguments, <strong>parses out the class name<\/strong> that you specified as containing <code>main()<\/code>, <strong>uses JNI calls to find the main()<\/strong> method itself, then <strong>invokes the main()<\/strong> method, passing in the newly created string array as a parameter.<\/p>\n\n\n\n<p>This is very, very much like what you do when you use the reflection from Java, it just uses confusingly named native function calls instead.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>It would be perfectly legal for you to write your own version of <code>java.exe<\/code> (the source is distributed with the JDK), and have it do something entirely different.<\/p><\/blockquote>\n\n\n\n<h2 id=\"7-main-method-native-code-in-java-c\">7. main() method native code in java.c<\/h2>\n\n\n\n<p>Download and extract the source jar and check out <code>..\/launcher\/java.c<\/code>. It is something like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">\/*\n* Get the application's main class.\n*\/\nif (jarfile != 0) {\nmainClassName = GetMainClassName(env, jarfile);\n... ...\n\nmainClass = LoadClass(env, classname);\nif(mainClass == NULL) { \/* exception occured *\/\n... ...\n\n\/* Get the application's main method *\/\nmainID = (*env)-&amp;amp;amp;amp;amp;gt;GetStaticMethodID(env, mainClass, \"main\", \"([Ljava\/lang\/String;)V\");\n... ...\n\n{\/* Make sure the main method is public *\/\njint mods;\njmethodID mid;\njobject obj = (*env)-&amp;amp;amp;amp;amp;gt;ToReflectedMethod(env, mainClass, mainID, JNI_TRUE);\n... ...\n\n\/* Build argument array *\/\nmainArgs = NewPlatformStringArray(env, argv, argc);\nif (mainArgs == NULL) {\nReportExceptionDescription(env);\ngoto leave;\n}\n\n\/* Invoke main method. *\/\n(*env)-&amp;amp;amp;amp;amp;gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);<\/code><\/pre>\n\n\n\n<p>So, here you can see what happens when you invoke a java program with the main method.<\/p>\n\n\n\n<h2 id=\"8-summary\">8. Summary<\/h2>\n\n\n\n<p>Java&#8217;s <code>main<\/code> method is used by all developers and everybody knows the basic syntax to write it. Yet, very few completely understand the correct reasoning and the way it works. <\/p>\n\n\n\n<p>In this post, we got a very basic understanding of the things behind the main method that is the primary starting point of an application.<\/p>\n\n\n\n<p>Happy Learning!!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Have you ever tried to reason why Java&#8217;s main() method is public, static and void? Why its name is main? What happens inside JVM when you invoke main() method? What is the purpose of main method? Let&#8217;s find out. 1. Java main() Method Syntax Start with reminding the syntax of the main method in Java. &#8230; <a title=\"Java main() Method\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/main-method\/\" aria-label=\"More on Java main() Method\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":10411,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[1177],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",150,105,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",300,210,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",120,84,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":20,"uagb_excerpt":"Have you ever tried to reason why Java&#8217;s main() method is public, static and void? Why its name is main? What happens inside JVM when you invoke main() method? What is the purpose of main method? Let&#8217;s find out. 1. Java main() Method Syntax Start with reminding the syntax of the main method in Java.&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/193"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=193"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/193\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/10411"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=193"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=193"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=193"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}