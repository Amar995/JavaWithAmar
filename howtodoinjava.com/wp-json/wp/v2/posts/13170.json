{"id":13170,"date":"2019-12-28T01:48:25","date_gmt":"2019-12-27T20:18:25","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=13170"},"modified":"2022-01-28T14:36:52","modified_gmt":"2022-01-28T09:06:52","slug":"spring-hateoas-tutorial","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/spring5\/hateoas\/spring-hateoas-tutorial\/","title":{"rendered":"Intro to HATEOAS with Spring"},"content":{"rendered":"<p>Learn to build hateoas links for REST resources using <em>RepresentationModel<\/em> and <em>RepresentationModelAssemblerSupport<\/em> in a Spring boot application.<\/p>\n<h2>1. Spring HATEOAS 1.x Changes<\/h2>\n<p>Spring HATEAOS 1.x module has gone through some major changes including package structure and class names, as compared to <a href=\"https:\/\/howtodoinjava.com\/spring-boot\/rest-with-spring-hateoas-example\/\">older version<\/a>. Let&#8217;s discuss some important classes now used in 1.x.<\/p>\n<h4>1.1. Important classes<\/h4>\n<ul>\n<li><strong>RepresentationModel<\/strong> &#8211; is a container for a collection of <em>Links<\/em> and provides APIs to add those links to the model.<\/li>\n<li><strong>EntityModel<\/strong> &#8211; represents <code>RepresentationModel<\/code> containing only single entity and related links.\n<pre class=\"brush: java; title: Create Entity Model; notranslate\" title=\"Create Entity Model\">\r\npublic class ActorModel \r\n\textends RepresentationModel&lt;ActorModel&gt; \r\n{\r\n\t\/\/ attributes\r\n}\r\n<\/pre>\n<\/li>\n<li><strong>CollectionModel<\/strong> &#8211; is a wrapper for a collection of entities (entity as well as collection). To create collection models, use it&#8217; constructors (e.g. <em>CollectionModel(List)<\/em> or <em>CollectionModel(Iterable)<\/em>) or <code>toCollectionModel()<\/code> provided by model assemblers.\n<pre class=\"brush: java; title: Create Collection Model; notranslate\" title=\"Create Collection Model\">\r\npublic class AlbumModelAssembler \r\n\textends RepresentationModelAssemblerSupport&lt;AlbumEntity, AlbumModel&gt; \r\n{\r\n\t@Override\r\n\tpublic CollectionModel&lt;AlbumModel&gt; toCollectionModel(Iterable&lt;? extends AlbumEntity&gt; entities) \r\n\t{\r\n\t\tCollectionModel&lt;AlbumModel&gt; actorModels = super.toCollectionModel(entities);\r\n\t}\r\n}\r\n<\/pre>\n<\/li>\n<li><strong>PagedModel<\/strong> &#8211; is similar to <em>CollectionModel<\/em> with underlying pageable collection of entities.<\/li>\n<li><strong>RepresentationModelAssembler<\/strong> &#8211; It&#8217;s implementation classes (such as RepresentationModelAssemblerSupport) provides methods to convert a domain object into a <em>RepresentationModel<\/em>.<\/li>\n<li><strong>WebMvcLinkBuilder<\/strong> &#8211; It helps to ease building <code>Link<\/code> instances pointing to Spring MVC controllers.\n<pre class=\"brush: java; title: Create Link; notranslate\" title=\"Create Link\">\r\nLink lnk = WebMvcLinkBuilder\r\n\t\t\t.linkTo(WebMvcLinkBuilder.methodOn(WebController.class)\r\n\t\t\t.getAllAlbums())\r\n\t\t\t.withSelfRel();\r\n<\/pre>\n<\/li>\n<li><strong>Link<\/strong> &#8211; represents a single link added to representation model.<\/li>\n<li><strong>LinkRelationProvider<\/strong> &#8211; provides API to add link relations (<code>\"rel\"<\/code> type) in <code>Link<\/code> instances.<\/li>\n<\/ul>\n<blockquote><p>The recommeded way to work with representation model is :<\/p>\n<ul>\n<li>extend the domain class with <code>RepresentationModel<\/code><\/li>\n<li>create instances of this class<\/li>\n<li>populate the properties and enrich it with links<\/li>\n<\/ul>\n<\/blockquote>\n<h4>1.2. Creating links<\/h4>\n<p>In <a href=\"https:\/\/howtodoinjava.com\/spring-mvc-tutorial\/\">Spring web MVC<\/a> and <a href=\"https:\/\/howtodoinjava.com\/spring-webflux\/spring-webflux-tutorial\/\">webflux<\/a> applications, we can use <code>WebMvcLinkBuilder<\/code> to create links pointing to controller classes and it&#8217;s methods. <\/p>\n<pre class=\"brush: java; title: Create linkt to get all employees api; notranslate\" title=\"Create linkt to get all employees api\">\r\n\/\/Controller class\r\n\r\n@Controller\r\nclass EmployeeController {\r\n\r\n  @GetMapping(&quot;\/employees&quot;)\r\n  HttpEntity&lt;CollectionModel&lt;EmployeeModel&gt;&gt; getAllEmployees() { \u2026 }\r\n\r\n  @GetMapping(value = &quot;\/employees\/{id}&quot;)\r\n  HttpEntity&lt;EmployeeModel&gt; getEmployeeById(@PathVariable Long id) { \u2026 }\r\n}\r\n\r\n\/\/Create link\r\n\r\nimport static org.sfw.hateoas.server.mvc.WebMvcLinkBuilder.*;\r\n\r\n\/\/Method 1\r\n\r\nLink link = linkTo(methodOn(EmployeeController.class)\r\n\t\t\t\t.getAllEmployees())\r\n\t\t\t\t.withRel(&quot;employees&quot;);\r\n\r\n\/\/ Method 2\r\n\r\nMethod method = WebController.class.getMethod(&quot;getActorById&quot;, Long.class);\r\nLink link = linkTo(method, 2L).withSelfRel();\r\n<\/pre>\n<h4>1.3. HAL \u2013 Hypertext application language<\/h4>\n<p><a href=\"https:\/\/tools.ietf.org\/html\/draft-kelly-json-hal-08\">JSON Hypertext Application Language<\/a> or HAL is one of the simplest and most widely adopted hypermedia media types<\/p>\n<p>By default, Spring hateoas generated responses are in <code>application\/hal+json<\/code> format. It is the default mediatype even if we pass <code>application\/json<\/code> as well.<\/p>\n<p>In HAL, the <code>_links<\/code> entry is a JSON object. The property names are link relations and each value is single or multiple links.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n&quot;_links&quot;: {\r\n\t&quot;self&quot;: {\r\n\t\t&quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/1&quot;\r\n\t}\r\n}\r\n<\/pre>\n<h2>2. Spring HATEOAS RepresentationModel Example<\/h2>\n<p>To demonstrate the usage of representation models, we will create a Spring web MVC application providing albums and their actors&#8217; basic information. An album can have many actors. Similarily, an actor can be associated with multiple albums.<\/p>\n<p>We will fetch create 4 REST apis to provide:<\/p>\n<ul>\n<li><code>\/api\/actors<\/code> &#8211; List of all actors<\/li>\n<li><code>\/api\/actors\/{id}<\/code> &#8211; An actor given by id.<\/li>\n<li><code>\/api\/albums<\/code> &#8211; List of all albums.<\/li>\n<li><code>\/api\/albums\/{id}<\/code> &#8211; An album given by id.<\/li>\n<\/ul>\n<p>Responses of all APIs will have links added using spring hateoas classes.<\/p>\n<h4>2.1. Dependencies<\/h4>\n<pre class=\"brush: xml; title: pom.xml; notranslate\" title=\"pom.xml\">\r\n&lt;?xml version=&quot;1.0&quot;?&gt;\r\n&lt;project\r\n\txsi:schemaLocation=&quot;http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd&quot;\r\n\txmlns=&quot;http:\/\/maven.apache.org\/POM\/4.0.0&quot;\r\n\txmlns:xsi=&quot;http:\/\/www.w3.org\/2001\/XMLSchema-instance&quot;&gt;\r\n\t&lt;modelVersion&gt;4.0.0&lt;\/modelVersion&gt;\r\n\t\r\n\t&lt;parent&gt;\r\n\t\t&lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n\t\t&lt;artifactId&gt;spring-boot-starter-parent&lt;\/artifactId&gt;\r\n\t\t&lt;version&gt;2.2.2.RELEASE&lt;\/version&gt;\r\n\t\t&lt;relativePath \/&gt;\r\n\t&lt;\/parent&gt;\r\n\t\r\n\t&lt;groupId&gt;com.springexamples&lt;\/groupId&gt;\r\n\t&lt;artifactId&gt;boot-hateoas&lt;\/artifactId&gt;\r\n\t&lt;name&gt;boot-hateoas&lt;\/name&gt;\r\n\t&lt;url&gt;http:\/\/maven.apache.org&lt;\/url&gt;\r\n\t\r\n\t&lt;properties&gt;\r\n\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;\/project.build.sourceEncoding&gt;\r\n\t\t&lt;java.version&gt;1.8&lt;\/java.version&gt;\r\n\t&lt;\/properties&gt;\r\n\t\r\n\t&lt;dependencies&gt;\r\n\t\r\n\t\t&lt;dependency&gt;\r\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt;\r\n\t\t&lt;\/dependency&gt;\r\n\t\t\r\n\t\t&lt;dependency&gt;\r\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;\/artifactId&gt;\r\n\t\t&lt;\/dependency&gt;\r\n\t\t\r\n\t\t&lt;dependency&gt;\r\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;spring-boot-starter-hateoas&lt;\/artifactId&gt;\r\n\t\t&lt;\/dependency&gt;\r\n\r\n\t\t&lt;dependency&gt;\r\n\t\t\t&lt;groupId&gt;com.h2database&lt;\/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;h2&lt;\/artifactId&gt;\r\n\t\t\t&lt;scope&gt;runtime&lt;\/scope&gt;\r\n\t\t&lt;\/dependency&gt;\r\n\r\n\t\t&lt;dependency&gt;\r\n\t\t\t&lt;groupId&gt;org.projectlombok&lt;\/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;lombok&lt;\/artifactId&gt;\r\n\t\t\t&lt;optional&gt;true&lt;\/optional&gt;\r\n\t\t&lt;\/dependency&gt;\r\n\r\n\t&lt;\/dependencies&gt;\r\n\r\n&lt;\/project&gt;\r\n<\/pre>\n<h4>2.2. JPA entities and repositories<\/h4>\n<pre class=\"brush: java; title: ActorEntity.java; notranslate\" title=\"ActorEntity.java\">\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@ToString(exclude = &quot;albums&quot;)\r\n@Entity\r\n@Table(name=&quot;actor&quot;)\r\npublic class ActorEntity implements Serializable \r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\t\r\n\t@Id\r\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\r\n\tprivate Long id;\r\n\tprivate String firstName;\r\n\tprivate String lastName;\r\n\tprivate String birthDate;\r\n\t\r\n\t@ManyToMany(cascade=CascadeType.ALL)\r\n\t@JoinTable(\r\n\t  name = &quot;actor_album&quot;, \r\n\t  joinColumns = @JoinColumn(name = &quot;actor_id&quot;), \r\n\t  inverseJoinColumns = @JoinColumn(name = &quot;album_id&quot;))\r\n\tprivate List&lt;AlbumEntity&gt; albums;\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: AlbumEntity.java; notranslate\" title=\"AlbumEntity.java\">\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Entity\r\n@ToString(exclude = &quot;actors&quot;)\r\n@Table(name=&quot;album&quot;)\r\npublic class AlbumEntity implements Serializable \r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\t\r\n\t@Id\r\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\r\n\tprivate Long id;\r\n\tprivate String title;\r\n\tprivate String description;\r\n\tprivate String releaseDate;\r\n\t\r\n\t@ManyToMany(mappedBy = &quot;albums&quot;,fetch = FetchType.EAGER)\r\n\tprivate List&lt;ActorEntity&gt; actors;\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: ActorRepository.java; notranslate\" title=\"ActorRepository.java\">\r\npublic interface ActorRepository \r\n\textends JpaRepository&lt;ActorEntity, Long&gt;{\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: AlbumRepository.java; notranslate\" title=\"AlbumRepository.java\">\r\npublic interface AlbumRepository \r\n\textends JpaRepository&lt;AlbumEntity, Long&gt;{\r\n\r\n}\r\n<\/pre>\n<p>The corresponding data is loaded in <a href=\"https:\/\/howtodoinjava.com\/spring-boot2\/h2-database-example\/\">H2 inmemory database<\/a> using given files and configuration.<\/p>\n<pre class=\"brush: java; title: application.properties; notranslate\" title=\"application.properties\">\r\nspring.datasource.url=jdbc:h2:mem:test\r\nspring.datasource.driverClassName=org.h2.Driver\r\nspring.datasource.username=sa\r\nspring.datasource.password=\r\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\r\n\r\nspring.jpa.hibernate.ddl-auto=none\r\n<\/pre>\n<pre class=\"brush: sql; title: schema.sql; notranslate\" title=\"schema.sql\">\r\nCREATE TABLE actor (\r\n\tid INT PRIMARY KEY,\r\n\tfirst_name VARCHAR(255) NULL,\r\n\tlast_name VARCHAR(255) NULL,\r\n\tbirth_date VARCHAR(255) NULL\r\n);\r\n\r\nCREATE TABLE album (\r\n\tid INT PRIMARY KEY,\r\n\ttitle VARCHAR(255) NULL,\r\n\tdescription VARCHAR(255) NULL,\r\n\trelease_date VARCHAR(255) NULL\r\n);\r\n\r\nCREATE TABLE actor_album (\r\n\tactor_id INT,\r\n\talbum_id INT\r\n);\r\n<\/pre>\n<pre class=\"brush: sql; title: data.sql; notranslate\" title=\"data.sql\">\r\nINSERT INTO actor VALUES ('1', 'John', 'Doe', '10-Jan-1952');\r\nINSERT INTO actor VALUES ('2', 'Amy', 'Eugene', '05-07-1985');\r\nINSERT INTO actor VALUES ('3', 'Laverne', 'Mann', '11-12-1988');\r\nINSERT INTO actor VALUES ('4', 'Janice', 'Preston', '19-02-1960');\r\nINSERT INTO actor VALUES ('5', 'Pauline', 'Rios', '29-08-1977');\r\n\r\nINSERT INTO album VALUES ('1', 'Top Hits Vol 1', 'Top hits vol 1. description', '10-03-1981');\r\nINSERT INTO album VALUES ('2', 'Top Hits Vol 2', 'Top hits vol 2. description', '10-03-1982');\r\nINSERT INTO album VALUES ('3', 'Top Hits Vol 3', 'Top hits vol 3. description', '10-03-1983');\r\nINSERT INTO album VALUES ('4', 'Top Hits Vol 4', 'Top hits vol 4. description', '10-03-1984');\r\nINSERT INTO album VALUES ('5', 'Top Hits Vol 5', 'Top hits vol 5. description', '10-03-1985');\r\nINSERT INTO album VALUES ('6', 'Top Hits Vol 6', 'Top hits vol 6. description', '10-03-1986');\r\nINSERT INTO album VALUES ('7', 'Top Hits Vol 7', 'Top hits vol 7. description', '10-03-1987');\r\nINSERT INTO album VALUES ('8', 'Top Hits Vol 8', 'Top hits vol 8. description', '10-03-1988');\r\nINSERT INTO album VALUES ('9', 'Top Hits Vol 9', 'Top hits vol 9. description', '10-03-1989');\r\nINSERT INTO album VALUES ('10', 'Top Hits Vol 10', 'Top hits vol 10. description', '10-03-1990');\r\n\r\nINSERT INTO actor_album VALUES (1, 1);\r\nINSERT INTO actor_album VALUES (1, 2);\r\nINSERT INTO actor_album VALUES (2, 3);\r\nINSERT INTO actor_album VALUES (2, 4);\r\nINSERT INTO actor_album VALUES (3, 5);\r\nINSERT INTO actor_album VALUES (3, 6);\r\nINSERT INTO actor_album VALUES (4, 7);\r\nINSERT INTO actor_album VALUES (4, 8);\r\nINSERT INTO actor_album VALUES (5, 9);\r\nINSERT INTO actor_album VALUES (5, 10);\r\n<\/pre>\n<h4>2.3. Model classes<\/h4>\n<p>These are DTO objects which will be returned from controller classes as representation models.<\/p>\n<pre class=\"brush: java; title: ActorModel.java; notranslate\" title=\"ActorModel.java\">\r\n@Data\r\n@Builder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@EqualsAndHashCode(callSuper = false)\r\n@JsonRootName(value = &quot;actor&quot;)\r\n@Relation(collectionRelation = &quot;actors&quot;)\r\n@JsonInclude(Include.NON_NULL)\r\npublic class ActorModel extends RepresentationModel&lt;ActorModel&gt; \r\n{\r\n\tprivate Long id;\r\n\tprivate String firstName;\r\n\tprivate String lastName;\r\n\tprivate String birthDate;\r\n\t\r\n\tprivate List&lt;AlbumModel&gt; albums;\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: AlbumModel.java; notranslate\" title=\"AlbumModel.java\">\r\n@Data\r\n@Builder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@EqualsAndHashCode(callSuper = false)\r\n@JsonRootName(value = &quot;album&quot;)\r\n@Relation(collectionRelation = &quot;albums&quot;)\r\n@JsonInclude(Include.NON_NULL)\r\npublic class AlbumModel extends RepresentationModel&lt;AlbumModel&gt;\r\n{\r\n\tprivate Long id;\r\n\tprivate String title;\r\n\tprivate String description;\r\n\tprivate String releaseDate;\r\n\t\r\n\tprivate List&lt;ActorModel&gt; actors;\r\n}\r\n<\/pre>\n<h4>2.4. Representation model assemblers<\/h4>\n<p>These assemblers will be used to convert the JPA entity classes to DTO objects (entity and collection representations). i.e.<\/p>\n<ul>\n<li><code>ActorEntity<\/code> to <code>ActorModel<\/code><\/li>\n<li><code>AlbumEntity<\/code> to <code>AlbumModel<\/code><\/li>\n<\/ul>\n<p>Here, we are using <strong>RepresentationModelAssemblerSupport<\/strong> class which implements <code>RepresentationModelAssembler<\/code> interface. It provides <code>toModel()<\/code> and <code>toCollectionModel()<\/code> methods.<\/p>\n<pre class=\"brush: java; title: AlbumModelAssembler.java; notranslate\" title=\"AlbumModelAssembler.java\">\r\n@Component\r\npublic class AlbumModelAssembler \r\n\textends RepresentationModelAssemblerSupport&lt;AlbumEntity, AlbumModel&gt; {\r\n\r\n\tpublic AlbumModelAssembler() {\r\n\t\tsuper(WebController.class, AlbumModel.class);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic AlbumModel toModel(AlbumEntity entity) \r\n\t{\r\n\t\tAlbumModel albumModel = instantiateModel(entity);\r\n\t\t\r\n\t\talbumModel.add(linkTo(\r\n\t\t\t\tmethodOn(WebController.class)\r\n\t\t\t\t.getActorById(entity.getId()))\r\n\t\t\t\t.withSelfRel());\r\n\t\t\r\n\t\talbumModel.setId(entity.getId());\r\n\t\talbumModel.setTitle(entity.getTitle());\r\n\t\talbumModel.setDescription(entity.getDescription());\r\n\t\talbumModel.setReleaseDate(entity.getReleaseDate());\r\n\t\talbumModel.setActors(toActorModel(entity.getActors()));\r\n\t\treturn albumModel;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic CollectionModel&lt;AlbumModel&gt; toCollectionModel(Iterable&lt;? extends AlbumEntity&gt; entities) \r\n\t{\r\n\t\tCollectionModel&lt;AlbumModel&gt; actorModels = super.toCollectionModel(entities);\r\n\t\t\r\n\t\tactorModels.add(linkTo(methodOn(WebController.class).getAllAlbums()).withSelfRel());\r\n\t\t\r\n\t\treturn actorModels;\r\n\t}\r\n\r\n\tprivate List&lt;ActorModel&gt; toActorModel(List&lt;ActorEntity&gt; actors) {\r\n\t\tif (actors.isEmpty())\r\n\t\t\treturn Collections.emptyList();\r\n\r\n\t\treturn actors.stream()\r\n\t\t\t\t.map(actor -&gt; ActorModel.builder()\r\n\t\t\t\t\t\t.id(actor.getId())\r\n\t\t\t\t\t\t.firstName(actor.getFirstName())\r\n\t\t\t\t\t\t.lastName(actor.getLastName())\r\n\t\t\t\t\t\t.build()\r\n\t\t\t\t\t\t.add(linkTo(\r\n\t\t\t\t\t\t\t\tmethodOn(WebController.class)\r\n\t\t\t\t\t\t\t\t.getActorById(actor.getId()))\r\n\t\t\t\t\t\t\t\t.withSelfRel()))\r\n\t\t\t\t.collect(Collectors.toList());\r\n\t}\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: ActorModelAssembler.java; notranslate\" title=\"ActorModelAssembler.java\">\r\n@Component\r\npublic class ActorModelAssembler \r\n\textends RepresentationModelAssemblerSupport&lt;ActorEntity, ActorModel&gt; { \r\n\r\n\tpublic ActorModelAssembler() {\r\n\t\tsuper(WebController.class, ActorModel.class);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic ActorModel toModel(ActorEntity entity) \r\n\t{\r\n\t\tActorModel actorModel = instantiateModel(entity);\r\n\t\t\r\n\t\tactorModel.add(linkTo(\r\n\t\t\t\tmethodOn(WebController.class)\r\n\t\t\t\t.getActorById(entity.getId()))\r\n\t\t\t\t.withSelfRel());\r\n\t\t\r\n\t\tactorModel.setId(entity.getId());\r\n\t\tactorModel.setFirstName(entity.getFirstName());\r\n\t\tactorModel.setLastName(entity.getLastName());\r\n\t\tactorModel.setBirthDate(entity.getBirthDate());\r\n\t\tactorModel.setAlbums(toAlbumModel(entity.getAlbums()));\r\n\t\treturn actorModel;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic CollectionModel&lt;ActorModel&gt; toCollectionModel(Iterable&lt;? extends ActorEntity&gt; entities) \r\n\t{\r\n\t\tCollectionModel&lt;ActorModel&gt; actorModels = super.toCollectionModel(entities);\r\n\t\t\r\n\t\tactorModels.add(linkTo(methodOn(WebController.class).getAllActors()).withSelfRel());\r\n\t\t\r\n\t\treturn actorModels;\r\n\t}\r\n\r\n\tprivate List&lt;AlbumModel&gt; toAlbumModel(List&lt;AlbumEntity&gt; albums) {\r\n\t\tif (albums.isEmpty())\r\n\t\t\treturn Collections.emptyList();\r\n\r\n\t\treturn albums.stream()\r\n\t\t\t\t.map(album -&gt; AlbumModel.builder()\r\n\t\t\t\t\t\t.id(album.getId())\r\n\t\t\t\t\t\t.title(album.getTitle())\r\n\t\t\t\t\t\t.build()\r\n\t\t\t\t\t\t.add(linkTo(\r\n\t\t\t\t\t\t\t\tmethodOn(WebController.class)\r\n\t\t\t\t\t\t\t\t.getAlbumById(album.getId()))\r\n\t\t\t\t\t\t\t\t.withSelfRel()))\r\n\t\t\t\t.collect(Collectors.toList());\r\n\t}\r\n}\r\n<\/pre>\n<h4>2.5. REST Controller<\/h4>\n<p>The REST controller having APIs is :<\/p>\n<pre class=\"brush: java; title: WebController.java; notranslate\" title=\"WebController.java\">\r\n@RestController\r\npublic class WebController {\r\n\r\n\t@Autowired\r\n\tprivate AlbumRepository albumRepository;\r\n\t\r\n\t@Autowired\r\n\tprivate ActorRepository actorRepository;\r\n\t\r\n\t@Autowired\r\n\tprivate ActorModelAssembler actorModelAssembler;\r\n\t\r\n\t@Autowired\r\n\tprivate AlbumModelAssembler albumModelAssembler;\r\n\t\r\n\t@GetMapping(&quot;\/api\/actors&quot;)\r\n\tpublic ResponseEntity&lt;CollectionModel&lt;ActorModel&gt;&gt; getAllActors() \r\n\t{\r\n\t\tList&lt;ActorEntity&gt; actorEntities = actorRepository.findAll();\r\n\t\treturn new ResponseEntity&lt;&gt;(\r\n\t\t\t\tactorModelAssembler.toCollectionModel(actorEntities), \r\n\t\t\t\tHttpStatus.OK);\r\n\t}\r\n\t\r\n\t@GetMapping(&quot;\/api\/actors\/{id}&quot;)\r\n\tpublic ResponseEntity&lt;ActorModel&gt; getActorById(@PathVariable(&quot;id&quot;) Long id) \r\n\t{\r\n\t\treturn actorRepository.findById(id) \r\n\t\t\t\t.map(actorModelAssembler::toModel) \r\n\t\t\t\t.map(ResponseEntity::ok) \r\n\t\t\t\t.orElse(ResponseEntity.notFound().build());\r\n\t}\r\n\t\r\n\t@GetMapping(&quot;\/api\/albums&quot;)\r\n\tpublic ResponseEntity&lt;CollectionModel&lt;AlbumModel&gt;&gt; getAllAlbums() \r\n\t{\r\n\t\tList&lt;AlbumEntity&gt; albumEntities = albumRepository.findAll();\r\n\t\t\r\n\t\treturn new ResponseEntity&lt;&gt;(\r\n\t\t\t\talbumModelAssembler.toCollectionModel(albumEntities), \r\n\t\t\t\tHttpStatus.OK);\r\n\t}\r\n\t\t\r\n\t@GetMapping(&quot;\/api\/albums\/{id}&quot;)\r\n\tpublic ResponseEntity&lt;AlbumModel&gt; getAlbumById(@PathVariable(&quot;id&quot;) Long id) \r\n\t{\r\n\t\treturn albumRepository.findById(id) \r\n\t\t\t\t.map(albumModelAssembler::toModel) \r\n\t\t\t\t.map(ResponseEntity::ok) \r\n\t\t\t\t.orElse(ResponseEntity.notFound().build());\r\n\t}\r\n}\r\n<\/pre>\n<h4>2.6. Run the application<\/h4>\n<p>Run the application as Spring boot application and observe the outputs.<\/p>\n<pre class=\"brush: java; title: SpringBootHateoasApplication.java; notranslate\" title=\"SpringBootHateoasApplication.java\">\r\n@SpringBootApplication\r\npublic class SpringBootHateoasApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(SpringBootHateoasApplication.class, args);\r\n\t}\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: http:\/\/localhost:8080\/api\/albums; notranslate\" title=\"http:\/\/localhost:8080\/api\/albums\">\r\n{\r\n  &quot;_embedded&quot;: {\r\n    &quot;albums&quot;: [\r\n      {\r\n        &quot;id&quot;: 1,\r\n        &quot;title&quot;: &quot;Top Hits Vol 1&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 1. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1981&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 1,\r\n            &quot;firstName&quot;: &quot;John&quot;,\r\n            &quot;lastName&quot;: &quot;Doe&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/1&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/1&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 2,\r\n        &quot;title&quot;: &quot;Top Hits Vol 2&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 2. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1982&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 1,\r\n            &quot;firstName&quot;: &quot;John&quot;,\r\n            &quot;lastName&quot;: &quot;Doe&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/1&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/2&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 3,\r\n        &quot;title&quot;: &quot;Top Hits Vol 3&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 3. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1983&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 2,\r\n            &quot;firstName&quot;: &quot;Amy&quot;,\r\n            &quot;lastName&quot;: &quot;Eugene&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/2&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/3&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 4,\r\n        &quot;title&quot;: &quot;Top Hits Vol 4&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 4. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1984&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 2,\r\n            &quot;firstName&quot;: &quot;Amy&quot;,\r\n            &quot;lastName&quot;: &quot;Eugene&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/2&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/4&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 5,\r\n        &quot;title&quot;: &quot;Top Hits Vol 5&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 5. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1985&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 3,\r\n            &quot;firstName&quot;: &quot;Laverne&quot;,\r\n            &quot;lastName&quot;: &quot;Mann&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/3&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/5&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 6,\r\n        &quot;title&quot;: &quot;Top Hits Vol 6&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 6. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1986&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 3,\r\n            &quot;firstName&quot;: &quot;Laverne&quot;,\r\n            &quot;lastName&quot;: &quot;Mann&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/3&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/6&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 7,\r\n        &quot;title&quot;: &quot;Top Hits Vol 7&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 7. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1987&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 4,\r\n            &quot;firstName&quot;: &quot;Janice&quot;,\r\n            &quot;lastName&quot;: &quot;Preston&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/4&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/7&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 8,\r\n        &quot;title&quot;: &quot;Top Hits Vol 8&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 8. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1988&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 4,\r\n            &quot;firstName&quot;: &quot;Janice&quot;,\r\n            &quot;lastName&quot;: &quot;Preston&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/4&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/8&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 9,\r\n        &quot;title&quot;: &quot;Top Hits Vol 9&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 9. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1989&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 5,\r\n            &quot;firstName&quot;: &quot;Pauline&quot;,\r\n            &quot;lastName&quot;: &quot;Rios&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/5&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/9&quot;\r\n          }\r\n        }\r\n      },\r\n      {\r\n        &quot;id&quot;: 10,\r\n        &quot;title&quot;: &quot;Top Hits Vol 10&quot;,\r\n        &quot;description&quot;: &quot;Top hits vol 10. description&quot;,\r\n        &quot;releaseDate&quot;: &quot;10-03-1990&quot;,\r\n        &quot;actors&quot;: [\r\n          {\r\n            &quot;id&quot;: 5,\r\n            &quot;firstName&quot;: &quot;Pauline&quot;,\r\n            &quot;lastName&quot;: &quot;Rios&quot;,\r\n            &quot;_links&quot;: {\r\n              &quot;self&quot;: {\r\n                &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/5&quot;\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        &quot;_links&quot;: {\r\n          &quot;self&quot;: {\r\n            &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/10&quot;\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  &quot;_links&quot;: {\r\n    &quot;self&quot;: {\r\n      &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/albums&quot;\r\n    }\r\n  }\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: http:\/\/localhost:8080\/api\/albums\/1; notranslate\" title=\"http:\/\/localhost:8080\/api\/albums\/1\">\r\n{\r\n  &quot;id&quot;: 1,\r\n  &quot;title&quot;: &quot;Top Hits Vol 1&quot;,\r\n  &quot;description&quot;: &quot;Top hits vol 1. description&quot;,\r\n  &quot;releaseDate&quot;: &quot;10-03-1981&quot;,\r\n  &quot;actors&quot;: [\r\n    {\r\n      &quot;id&quot;: 1,\r\n      &quot;firstName&quot;: &quot;John&quot;,\r\n      &quot;lastName&quot;: &quot;Doe&quot;,\r\n      &quot;_links&quot;: {\r\n        &quot;self&quot;: {\r\n          &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/1&quot;\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  &quot;_links&quot;: {\r\n    &quot;self&quot;: {\r\n      &quot;href&quot;: &quot;http:\/\/localhost:8080\/api\/actors\/1&quot;\r\n    }\r\n  }\r\n}\r\n<\/pre>\n<p>Similarly, you can see the output of other APIs as well.<\/p>\n<h2>3. Conclusion<\/h2>\n<p>In this spring hateoas tutorial, we learned :<\/p>\n<ul>\n<li>Important classes in spring hateoas module<\/li>\n<li>What are representation models<\/li>\n<li>How to create entity and collection models<\/li>\n<li>How to insert links in model using contoller method references<\/li>\n<li>and finally, how to use representation model assemblers<\/li>\n<\/ul>\n<p>Drop me your questions in comments.<\/p>\n<p>Happy Learning !!<\/p>\n<p>Reference : <a href=\"https:\/\/docs.spring.io\/spring-hateoas\/docs\/current\/reference\/html\/\">Spring hateoas docs<\/a><\/p>\n<div class=\"noticeboxesde downgreennoticebox\"><a href=\"https:\/\/github.com\/lokeshgupta1981\/SpringExamples\/tree\/master\/boot-hateoas\" rel=\"noopener noreferrer\" target=\"_blank\">Sourcecode Download<\/a><\/div>\n","protected":false},"excerpt":{"rendered":"<p>Learn to build hateoas links for REST resources using RepresentationModel and RepresentationModelAssemblerSupport in a Spring boot application example.<\/p>\n","protected":false},"author":2,"featured_media":13171,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1285],"tags":[234],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/12\/spring-hateoas.png",780,300,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/12\/spring-hateoas.png",150,58,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/12\/spring-hateoas.png",300,115,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/12\/spring-hateoas.png",768,295,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/12\/spring-hateoas.png",780,300,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/12\/spring-hateoas.png",780,300,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/12\/spring-hateoas.png",780,300,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/12\/spring-hateoas.png",120,46,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":12,"uagb_excerpt":"Learn to build hateoas links for REST resources using RepresentationModel and RepresentationModelAssemblerSupport in a Spring boot application example.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/13170"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=13170"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/13170\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/13171"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=13170"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=13170"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=13170"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}