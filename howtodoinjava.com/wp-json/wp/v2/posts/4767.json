{"id":4767,"date":"2015-06-09T07:23:01","date_gmt":"2015-06-09T01:53:01","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4767"},"modified":"2022-01-30T00:13:03","modified_gmt":"2022-01-29T18:43:03","slug":"java-access-modifiers","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/java-access-modifiers\/","title":{"rendered":"Java Access Modifiers"},"content":{"rendered":"<p>Java provides <strong>four access modifiers<\/strong> to set access levels for classes, variables, methods and <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-constructors\/\">constructors<\/a> i.e. <strong>public<\/strong>, <strong>private<\/strong>, <strong>protected<\/strong> and <strong>default<\/strong>. These access level modifiers determine whether other classes can use a particular field or invoke a particular method.<\/p>\n<h2>1. Java access modifiers<\/h2>\n<p>Let&#8217;s quickly compare these access modifiers in nutshell.<\/p>\n<ol>\n<li><strong>public<\/strong> &#8211; accessible everywhere<\/li>\n<li><strong>protected<\/strong> &#8211; accessible in the same package and in sub-classes<\/li>\n<li><strong>default<\/strong> &#8211; accessible only in the same package<\/li>\n<li><strong>private<\/strong> &#8211; accessible only in the same class<\/li>\n<\/ol>\n<p>The access specifiers can be strictly <strong>ordered<\/strong> as below :<\/p>\n<blockquote><p><strong>public &gt; protected &gt; package-private (or default) &gt; private<\/strong><\/p><\/blockquote>\n<h4>1.1. public<\/h4>\n<p><strong>Public are accessible from everywhere.<\/strong> A class, method, constructor, interface, etc declared public can be accessed from any other class.<\/p>\n<p>However, if the public class we are trying to access is in a different package, then the public class still needs to be imported.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\npublic class HelloWorld\n{\nprivate String format;\n\npublic String getFormat() {\nreturn this.format;\n}\npublic void setFormat(String format) {\nthis.format = format;\n}\n}\n<\/pre>\n<p>In above example, <code>getFormat()<\/code> and <code>setFormat()<\/code> methods are public, so they can be accessed anywhere.<\/p>\n<h4>1.2. protected<\/h4>\n<p><strong>Protected are accessible by the classes of the same package and the subclasses residing in any package.<\/strong> Protected access gives the subclass a chance to use the helper method or variable while preventing a non-related class from trying to use it.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\npublic class HelloWorld\n{\nprivate String format;\n\nprotected String getFormat() {\nreturn this.format;\n}\nprotected void setFormat(String format) {\nthis.format = format;\n}\n}\n<\/pre>\n<p>In above given example of <code>HelloWorld<\/code>, variable <code>format<\/code> is declared <code>protected<\/code>, so it can be accessed by all the classes present in same package where <code>HelloWorld.java<\/code> is present, as well as sub-classes present in other packages as well.<\/p>\n<h4>1.3. default (package private)<\/h4>\n<p>Default access modifier means we do not explicitly declare an access modifier for a class, field, method, etc. <strong>Default are accessible by the classes of the same package.<\/strong><\/p>\n<p>Please note that the fields in an interface are implicitly <code>public static final<\/code> and the methods in an interface are by default <code>public<\/code>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\npublic class HelloWorld\n{\nString format;\n\npublic String getFormat() {\nreturn this.format;\n}\npublic void setFormat(String format) {\nthis.format = format;\n}\n}\n<\/pre>\n<p>In above given example of <code>HelloWorld<\/code>, variable <code>format<\/code> is declared <code>default<\/code>, so it can be accessed by all the classes present in same package where <code>HelloWorld.java<\/code> is present.<\/p>\n<h4>1.4. private<\/h4>\n<p>A private access modifier is the most restrictive access level. (Topmost) Classes and interfaces cannot be private. <strong>private members  are accessible within the same class only.<\/strong> Methods, Variables, and Constructors that are declared private can only be accessed within the declared class itself.<\/p>\n<p>In above given example of <code>HelloWorld<\/code>, variable <code>format<\/code> is declared private, so no class can access it directly. It must be accessed though public methods <code>getFormat()<\/code> and <code>setFormat()<\/code>.<\/p>\n<p><strong>Access levels affect you in two ways.<\/strong> First, when you use classes that come from another source, access levels determine which members of those classes your own classes can use. Second, when you write a class, you need to decide what access level every member variable and every method in your class should have.<\/p>\n<p>Local variables and formal parameters cannot take access specifiers. Since they are inherently inaccessible to the outside according to scoping rules, they are effectively private.<\/p>\n<p>If other programmers use your class, you want to ensure that errors from misuse cannot happen. Access levels can help you do this.<\/p>\n<h2>2. Levels of Access Control<\/h2>\n<p>There are <strong>two levels of access control<\/strong>.<\/p>\n<ol>\n<li><strong>Class level<\/strong> \u2014 Allowed modifiers are public, or package-private (default).<\/li>\n<li><strong>Method level<\/strong> \u2014 Allowed modifiers are public, private, protected, or package-private (default).<\/li>\n<\/ol>\n<p>A class may be declared with the modifier <code>public<\/code>, in which case that class is visible to all classes everywhere. If a class has no modifier (the <code>default<\/code>, also known as package-private), it is visible only within its own package.<\/p>\n<p>For members, there are two additional access modifiers: <code>private<\/code> and <code>protected<\/code>. The private modifier specifies that the member can only be accessed in its own class.<\/p>\n<p>The protected modifier specifies that the member can only be accessed within its own package (as with package-private) and, in addition, by a subclass of its class in another package.<\/p>\n<div class=\"noticeboxesde bluenoticebox\">Both private and protected can be (and frequently are) applied to nested classes and interfaces, just never top-level classes and interfaces.<\/div>\n<p>Happy Learning !!<\/p>\n<p>Ref: <a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/java\/javaOO\/accesscontrol.html\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/docs.oracle.com\/javase\/tutorial\/java\/javaOO\/accesscontrol.html<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java provides four access modifiers to set access levels for classes, variables, methods and constructors. Access level modifiers determine whether other classes can use a particular field or invoke a particular method.<\/p>\n","protected":false},"author":2,"featured_media":4757,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[73,1454],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"Java provides four access modifiers to set access levels for classes, variables, methods and constructors. Access level modifiers determine whether other classes can use a particular field or invoke a particular method.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4767"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4767"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4767\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4757"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4767"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4767"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4767"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}