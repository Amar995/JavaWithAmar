{"id":4747,"date":"2015-06-08T10:32:19","date_gmt":"2015-06-08T10:32:19","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4747"},"modified":"2020-12-26T00:39:40","modified_gmt":"2020-12-25T19:09:40","slug":"operators-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/operators-in-java\/","title":{"rendered":"Java Operators"},"content":{"rendered":"<p>Learn about available <strong>Java operators<\/strong>, <strong>precedence order<\/strong> and understand their usages with example. We will also try to understand when to use which operator and what to expect in result.<\/p>\n<pre>Table of Contents\r\n\r\n<a href=\"#what_is_operator\">1. What Is an Operator?<\/a>\r\n<a href=\"#assignment\">2. Assignment Operator (=)<\/a>\r\n<a href=\"#arithmetic\">3. Arithmetic Operators<\/a>\r\n    <a href=\"#unary\">3.1. Unary Arithmetic Operators<\/a>\r\n    <a href=\"#binary\">3.2. Binary Arithmetic Operators<\/a>\r\n<a href=\"#string_concatenation\">4. String Concatenation Operator (+)<\/a>\r\n<a href=\"#relational\">5. Relational Operators<\/a>\r\n<a href=\"#boolean\">6. Boolean Logical Operators<\/a>\r\n<a href=\"#bitwise\">7. Bitwise Operators<\/a>\r\n<a href=\"#ternary\">8. Ternary Operator<\/a>\r\n<a href=\"#Precedence\">9. Java Operator Precedence Table<\/a><\/pre>\n<p><a name=\"what_is_operator\"><\/a><\/p>\n<h2>1. What Is an Operator?<\/h2>\n<p>An operator is a <strong>symbol that performs a specific kind of operation<\/strong> on one, two, or three operands, and produces a result. The type of the operator and its operands determines the kind of operation performed on the operands and the type of the result produced.<\/p>\n<h4>1.1. Classification of Java Operators<\/h4>\n<p>Operators in Java can be categorized based on two criteria:<\/p>\n<ul>\n<li><strong>Number of operands<\/strong> &#8211; There are three types of operators based on the number of operands. An operator is called a unary, binary, or ternary operator based on the number of operands. If an operator takes one operand, it called a <strong>unary operator<\/strong>; if it takes two operands, it called a <strong>binary operator<\/strong>; if it takes three operands, it called a <strong>ternary operator<\/strong>.<\/li>\n<li><strong>Type of operation they perform<\/strong> &#8211; An operator is called an <strong>arithmetic operator<\/strong>, a <strong>relational operator<\/strong>, a <strong>logical operator<\/strong>, or a <strong>bitwise operator<\/strong>, depending on the kind of operation it performs on its operands.<\/li>\n<\/ul>\n<p><a name=\"assignment\"><\/a><\/p>\n<h2>2. Assignment Operator (=)<\/h2>\n<ul>\n<li>An assignment operator (=) is used to assign a value to a variable. <\/li>\n<li>It is a binary operator. It takes two operands. <\/li>\n<li>The value of the right-hand operand is assigned to the left-hand operand.<\/li>\n<li>The left-hand operand must be a variable. <\/li>\n<\/ul>\n<pre class=\"brush: java; title: Assignment Operator Example; notranslate\" title=\"Assignment Operator Example\">\r\n\/\/26 is the right-hand operand. \r\n\/\/counter is the left-hand operand, which is a variable of type int.\r\n\r\nint counter = 26; \r\n<\/pre>\n<p>Java ensures that the value of the right-hand operand of the assignment operator is assignment compatible to the data type of the left-hand operand. Otherwise, a <strong>compile-time error<\/strong> occurs. In case of reference variables, you may be able to compile the source code and get a runtime <code>ClassCastException<\/code> error if the object represented by the right-hand operand is not assignment compatible to the reference variable as the left-hand operand. <\/p>\n<p><a name=\"arithmetic\"><\/a><\/p>\n<h2>3. Arithmetic Operators<\/h2>\n<ul>\n<li>Operators like (<strong>+<\/strong> (plus), <strong>&#8211;<\/strong> (minus), <strong>*<\/strong> (multiply), <strong>\/<\/strong> (divide)) are called arithmetic operators in Java.<\/li>\n<li>It can only be used with numeric type operands. It means, both operands to arithmetic operators must be one of types <code>byte<\/code>, <code>short<\/code>, <code>char<\/code>, <code>int<\/code>, <code>long<\/code>, <code>float<\/code>, and <code>double<\/code>.<\/li>\n<li>These operators cannot have operands of <code>boolean<\/code> primitive type and reference type. <\/li>\n<\/ul>\n<pre class=\"brush: java; title: Arithmetic Operator Example; notranslate\" title=\"Arithmetic Operator Example\">\r\nint sum = 10 + 20; \r\n\r\nint difference = 50 - 20; \r\n\r\nlong area = 20l * 30l;    \r\n\r\nint percentage = 20 \/ 100;\r\n<\/pre>\n<p><a name=\"unary\"><\/a><\/p>\n<h4>3.1. Unary Arithmetic Operators<\/h4>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th width=\"20%\" data-mtr-content=\"Operator\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Operator<\/strong><\/div><\/th>\n<th width=\"80%\" data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Description<\/strong><\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'+'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Unary plus operator<\/strong>; indicates positive value (numbers are positive without this, however)<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'-'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Unary minus operator<\/strong>; negates an expression value<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'++'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Increment operator<\/strong>; increments a value by 1<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'--'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Decrement operator<\/strong>; decrements a value by 1<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'!'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Logical complement operator<\/strong>; inverts the value of a boolean<\/div><\/td>\n<\/tr>\n<\/table>\n<p><a name=\"binary\"><\/a><\/p>\n<h4>3.2. Binary Arithmetic Operators<\/h4>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th width=\"20%\" data-mtr-content=\"Operator\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Operator<\/strong><\/div><\/th>\n<th width=\"80%\" data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Description<\/strong><\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'+'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Addition<\/strong> \u2013 Adds values on either side of the operator<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'-'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Subtraction<\/strong> \u2013 Subtracts right hand operand from left hand operand<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'*'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Multiplication<\/strong> \u2013 Multiplies values on either side of the operator<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'\/'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Division<\/strong> \u2013 Divides left hand operand by right hand operand<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'%'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Modulus<\/strong> \u2013 Divides left hand operand by right hand operand and returns remainder<\/div><\/td>\n<\/tr>\n<\/table>\n<p><a name=\"string_concatenation\"><\/a><\/p>\n<h2>4. String Concatenation Operator (+)<\/h2>\n<p>The <code>'+'<\/code> operator is overloaded in Java. An operator is said to be <strong>overloaded operator<\/strong> if it is used to perform more than one function. <\/p>\n<h4>4.1. Concatenate two strings<\/h4>\n<p>So far, you have seen its use as an arithmetic addition operator to add two numbers. It can also be used to <strong>concatenate two strings<\/strong>. <\/p>\n<pre class=\"brush: java; title: String Concatenation Example; notranslate\" title=\"String Concatenation Example\">\r\nString str1 = &quot;Hello&quot;;\r\nString str2 = &quot; World&quot;;\r\n\r\nString str3 = str1 + str2;      \/\/ Assigns &quot;Hello World&quot; to str3\r\n<\/pre>\n<h4>3.2. Concatenate primitive to string<\/h4>\n<p>The string concatenation operator is also used to concatenate a primitive and a reference data type value to a string.<\/p>\n<pre class=\"brush: java; title: String Concatenation with primitive; notranslate\" title=\"String Concatenation with primitive\">\r\nint num = 26;\r\n\r\nString str1 = &quot;Alphabets&quot;;\r\n\r\nString str2 = num + str1;    \/\/ Assigns &quot;26Alphabets&quot; to str2\r\n<\/pre>\n<h4>4.2. Concatenate null<\/h4>\n<p>If a reference variable contains the &#8216;null&#8217; reference, the concatenation operator uses a string &#8220;null&#8221;.<\/p>\n<pre class=\"brush: java; title: String Concatenation with null; notranslate\" title=\"String Concatenation with null\">\r\nString str1 = &quot;I am &quot;;\r\n\r\nString str2 = null;\r\n\r\nString str3 = str1 + str2;    \/\/ Assigns &quot;I am null&quot; to str3\r\n<\/pre>\n<p><a name=\"relational\"><\/a><\/p>\n<h2>5. Relational Operators<\/h2>\n<ul>\n<li>All relational operators are binary operators.<\/li>\n<li>They take two operands.<\/li>\n<li>The result produced by a relational operator is always a Boolean value <code>true<\/code> or <code>false<\/code>.<\/li>\n<li>They are mostly used in Java control statements such as <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/if-else-statement-in-java\/\">if statements<\/a>, <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/while-loop-in-java\/\">while statements<\/a> etc.<\/li>\n<\/ul>\n<p>Let&#8217;s see below all available relational operators in java.<\/p>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th width=\"20%\" data-mtr-content=\"Operator\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Operator<\/strong><\/div><\/th>\n<th width=\"80%\" data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Description<\/strong><\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'=='<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Equals to<\/strong> \u2013 Checks if the values of two operands are equal or not, if yes then condition becomes true.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'!='<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Not equals to<\/strong> \u2013 Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'&gt;'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Greater than<\/strong> \u2013 Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'&lt;'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Less than<\/strong> \u2013 Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'&gt;='<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Greater than or equals to<\/strong> \u2013 Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'&lt;='<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Less than or equals to<\/strong> \u2013 Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.<\/div><\/td>\n<\/tr>\n<\/table>\n<pre class=\"brush: java; title: Relational Operator Example; notranslate\" title=\"Relational Operator Example\">\r\nint result = 20; \r\n        \r\nif( result &gt; 10) {                  \/\/true\r\n    \/\/some operation\r\n}\r\n\r\nboolean isEqual = ( 10 == 20 );     \/\/false\r\n<\/pre>\n<p><a name=\"boolean\"><\/a><\/p>\n<h2>6. Boolean Logical Operators<\/h2>\n<ul>\n<li>All Boolean logical operators can be used only with boolean operand(s). <\/li>\n<li>They are mostly used in control statements to compare two (or more) conditions.<\/li>\n<\/ul>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th width=\"20%\" data-mtr-content=\"Operator\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Operator<\/strong><\/div><\/th>\n<th width=\"80%\" data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Description<\/strong><\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'!'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">returns true if the operand is false, and false if the operand is true.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'&amp;&amp;'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">returns true if both operands are true. If either operand is false, it returns false. <\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'&amp;'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">returns true if both operands are true. If either operand is false, it returns false. <\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'||'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">returns true if either operand is true. If both operands are false, it returns false.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'|'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">returns true if either operand is true. If both operands are false, it returns false. <\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'^'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">it returns true if one of the operands is true, but not both. If both operands are the same, it returns false.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'&amp;=;'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">if both operands evaluate to true, &amp;= returns true. Otherwise, it returns false.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'|='<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">if either operand evaluates to true, != returns true. Otherwise, it returns false.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'^='<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">if both operands evaluate to different values, that is, one of the operands is true but not both, ^= returns true. Otherwise, it returns false.<\/div><\/td>\n<\/tr>\n<\/table>\n<pre class=\"brush: java; title: Boolean Logical Operator Example; notranslate\" title=\"Boolean Logical Operator Example\">\r\nint result = 20; \r\n        \r\nif( result &gt; 10 &amp;&amp; result &lt; 30) {      \r\n    \/\/some operation\r\n}\r\n\r\nif( result &gt; 10 || result &lt; 30) {      \r\n    \/\/some operation\r\n}\r\n<\/pre>\n<blockquote>\n<ol>\n<li>The <strong>logical AND operator<\/strong> (&amp;) works the same way as the logical short-circuit AND operator (&amp;&amp;), except for one difference. The logical AND operator (&amp;) evaluates its right-hand operand even if its left-hand operand evaluates to false.<\/li>\n<li>The <strong>logical OR operator<\/strong> works the same way as the logical short-circuit OR operator, except for one difference. The logical OR operator evaluates its right-hand operand even if its left-hand operand evaluates to true.<\/li>\n<\/ol>\n<\/blockquote>\n<p><a name=\"bitwise\"><\/a><\/p>\n<h2>7. Bitwise Operators<\/h2>\n<p>A bitwise operator <strong>manipulates individual bits<\/strong> of its operands. Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.<\/p>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th width=\"20%\" data-mtr-content=\"Operator\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Operator<\/strong><\/div><\/th>\n<th width=\"80%\" data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\"><strong>Description<\/strong><\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'&amp;'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Binary AND Operator<\/strong> copies a bit to the result if it exists in both operands.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'|'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Binary OR Operator<\/strong> copies a bit if it exists in either operand. <\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'^'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Binary XOR Operator<\/strong> copies the bit if it is set in one operand but not both. <\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>'~'<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Binary Ones Complement Operator<\/strong> is unary and has the effect of \u2018flipping\u2019 bits.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>&lt;&lt;<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Binary Left Shift Operator<\/strong>. The left operands value is moved left by the number of bits specified by the right operand.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>&gt;&gt;<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Binary Right Shift Operator<\/strong>. The left operands value is moved right by the number of bits specified by the right operand.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>&gt;&gt;&gt;<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><strong>Shift right zero fill operator<\/strong>. The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros.<\/div><\/td>\n<\/tr>\n<\/table>\n<p><a name=\"ternary\"><\/a><\/p>\n<h2>8. Ternary Operator<\/h2>\n<ul>\n<li>Java has one conditional operator. It is called a ternary operator as it takes <strong>three operands<\/strong>. <\/li>\n<li>The two symbols of &#8220;?&#8221; and &#8220;:&#8221; make the ternary operator. <\/li>\n<li>If the boolean-expression evaluates to true, it evaluates the true-expression; otherwise, it evaluates false-expression.<\/li>\n<\/ul>\n<h4>8.1. Syntax<\/h4>\n<pre class=\"brush: java; title: Syntax; notranslate\" title=\"Syntax\">\r\nboolean-expression ? true-expression : false-expression\r\n<\/pre>\n<h4>8.2. Ternary Operator Example<\/h4>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nint number1 = 40;\r\nint number2 = 20;\r\n\r\nint biggerNumber = (number1 &gt; number2) ? number1 : number2;\r\n\r\n\/\/Compares both numbers and return which one is bigger\r\n<\/pre>\n<p><a name=\"Precedence\"><\/a><\/p>\n<h2>9. Java Operator Precedence Table<\/h2>\n<p>Java has well-defined rules for specifying the order in which the operators in an expression are evaluated when the expression has several operators. For example, multiplication and division have higher precedence than addition and subtraction. <\/p>\n<blockquote><p>Precedence rules can be overridden by explicit parentheses.<\/p><\/blockquote>\n<p>When two operators share an operand the operator with the higher precedence goes first. For example, <code>1 + 2 * 3<\/code> is treated as <code>1 + (2 * 3)<\/code> because precedence of multiplication is higher than addition.<\/p>\n<p>In above expression, if you want to add values first then use explicit parentheses like this &#8211; <code>(1 + 2) * 3<\/code>.<\/p>\n<table border=\"1\" cellspacing=\"1\" cellpadding=\"2\" class=\"mtr-table mtr-tr-th\">\n<tbody>\n<tr>\n<th data-mtr-content=\"Precedence\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Precedence<\/div><\/th>\n<th data-mtr-content=\"Operator\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Operator<\/div><\/th>\n<th data-mtr-content=\"Type\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Type<\/div><\/th>\n<th data-mtr-content=\"Associativity\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Associativity<\/div><\/th>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">15<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">()<br>[]<br>\u00b7<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Parentheses<br>Array subscript<br>Member selection<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to Right\n<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">14<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">++<br>\u2014<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Unary post-increment<br>Unary post-decrement<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Right to left<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">13<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">++<br>\u2014<br>+<br>\u2013<br>!<br>~<br>( <i>type<\/i> )<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Unary pre-increment<br>Unary pre-decrement<br>Unary plus<br>Unary minus<br>Unary logical negation<br>Unary bitwise complement<br>Unary type cast<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Right to left<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">12<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"> * <br> \/ <br> % <\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Multiplication<br>Division<br>Modulus<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">11<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">+<br>\u2013<p><\/p><\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Addition<br>Subtraction<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">10<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">&lt;&lt;<br>&gt;&gt;<br>&gt;&gt;&gt;<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Bitwise left shift<br>Bitwise right shift with sign extension<br>Bitwise right shift with zero extension<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">9<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">&lt;<br>&lt;=<br>&gt;<br>&gt;=<br>instanceof<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Relational less than<br>Relational less than or equal<br>Relational greater than<br>Relational greater than or equal<br>Type comparison (objects only)<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">8<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">==<br>!=<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Relational is equal to<br>Relational is not equal to<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">7<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">&amp;<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Bitwise AND<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">6<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">^<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Bitwise exclusive OR<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">5<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">|<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Bitwise inclusive OR<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">4<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">&amp;&amp;<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Logical AND\n<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">3<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">||<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Logical OR<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Left to right<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">2<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">? :<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Ternary conditional<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Right to left<\/div><\/td>\n<\/tr>\n<tr>\n<td align=\"center\" data-mtr-content=\"Precedence\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">1<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Operator\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">=<br>+=<br>-=<br>*=<br>\/=<br>%=<\/div><\/td>\n<td data-mtr-content=\"Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Assignment<br>Addition assignment<br>Subtraction assignment<br>Multiplication assignment<br>Division assignment<br>Modulus assignment<\/div><\/td>\n<td align=\"center\" data-mtr-content=\"Associativity\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Right to left<\/div><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>That&#8217;s all for the <strong>operators in java<\/strong>.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn about available Java operators, precedence order and understand their usages with example. We will also try to understand when to use which operator and what to expect in result. Table of Contents 1. What Is an Operator? 2. Assignment Operator (=) 3. Arithmetic Operators 3.1. Unary Arithmetic Operators 3.2. Binary Arithmetic Operators 4. String &#8230; <a title=\"Java Operators\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/operators-in-java\/\" aria-label=\"More on Java Operators\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11157,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[1166],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Operators.png",484,293,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Operators.png",150,91,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Operators.png",300,182,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Operators.png",484,293,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Operators.png",484,293,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Operators.png",484,293,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Operators.png",484,293,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Operators.png",120,73,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":1,"uagb_excerpt":"Learn about available Java operators, precedence order and understand their usages with example. We will also try to understand when to use which operator and what to expect in result. Table of Contents 1. What Is an Operator? 2. Assignment Operator (=) 3. Arithmetic Operators 3.1. Unary Arithmetic Operators 3.2. Binary Arithmetic Operators 4. String&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4747"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4747"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4747\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11157"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4747"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4747"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4747"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}