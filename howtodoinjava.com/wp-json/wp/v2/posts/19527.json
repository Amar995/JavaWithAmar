{"id":19527,"date":"2022-01-29T00:28:01","date_gmt":"2022-01-28T18:58:01","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=19527"},"modified":"2022-04-23T22:10:29","modified_gmt":"2022-04-23T16:40:29","slug":"java-sorting","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/sort\/java-sorting\/","title":{"rendered":"Guide to Sorting in Java"},"content":{"rendered":"\n<p>Learn to sort a Java <code>Set<\/code>, <code>List<\/code> and <code>Map<\/code> of primitive types and custom objects using Comparator, Comparable and new lambda expressions. We will learn to sort in ascending and descending order as well.<\/p>\n\n\n\n<pre title=\"Quick Reference\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Sorting an array\r\nArrays.sort( arrayOfItems );\r\nArrays.sort( arrayOfItems, Collections.reverseOrder() );\r\nArrays.sort(arrayOfItems, 2, 6);\r\nArrays.parallelSort(arrayOfItems);\r\n\r\n\/\/Sorting a List\r\nCollections.sort(numbersList);\r\nCollections.sort(numbersList, Collections.reverseOrder());\r\n\r\n\/\/Sorting a Set\r\nSet to List -> Sort -> List to Set\r\nCollections.sort(numbersList);\r\n\r\n\/\/Sorting a Map\r\nTreeMap&lt;Integer, String> treeMap = new TreeMap&lt;>(map);\r\n\r\nunsortedeMap.entrySet()\r\n    .stream()\r\n    .sorted(Map.Entry.comparingByValue())\r\n    .forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));\r\n\r\n\/\/Java 8 Lambda\r\nComparator&lt;Employee> nameSorter = (a, b) -> a.getName().compareToIgnoreCase(b.getName());\r\nCollections.sort(list, nameSorter);\r\n\r\nCollections.sort(list, Comparator.comparing(Employee::getName));\r\n\r\n\/\/Group By Sorting\r\nCollections.sort(list, Comparator\r\n                        .comparing(Employee::getName)\r\n                        .thenComparing(Employee::getDob));<\/code><\/pre>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-50fc8a34 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-sorting-a-list-of-objects\">1. Sorting a List of Objects<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#11-comparable-interface\">1.1. Comparable Interface<\/a><li class=\"uagb-toc__list\"><a href=\"#12-comparator-interface\">1.2. Comparator Interface<\/a><li class=\"uagb-toc__list\"><a href=\"#13-sorting-with-lambda-expressions\">1.3. Sorting with Lambda Expressions<\/a><li class=\"uagb-toc__list\"><a href=\"#14-group-by-sorting\">1.4. Group By Sorting<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#2-sorting-an-array\">2. Sorting an Array<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-ascending-order\">2.1. Ascending Order<\/a><li class=\"uagb-toc__list\"><a href=\"#22-descending-order\">2.2. Descending Order<\/a><li class=\"uagb-toc__list\"><a href=\"#23-sorting-array-range\">2.3. Sorting Array Range<\/a><li class=\"uagb-toc__list\"><a href=\"#24-parallel-sorting\">2.4. Parallel Sorting<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-sorting-a-set\">3. Sorting a Set<\/a><li class=\"uagb-toc__list\"><a href=\"#4-sorting-a-map\">4. Sorting a Map<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-sort-by-key\">4.1. Sort by Key<\/a><li class=\"uagb-toc__list\"><a href=\"#42-sort-by-value\">4.2. Sort by Value<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#5-summary\">5. Summary<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"1-sorting-a-list-of-objects\">1. Sorting a List of Objects<\/h2>\n\n\n\n<p>To sort a list of objects, we have two popular approaches i.e. <strong>Comparable<\/strong> and <strong>Comparator<\/strong> interfaces. In the upcoming examples, we will sort a collection of <code>Employee<\/code> objects in different ways.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Employee implements Comparable&lt;Employee> {\n\n    private Long id;\n    private String name;\n    private LocalDate dob;\n}<\/code><\/pre>\n\n\n\n<h3 id=\"1-1-comparable-interface\">1.1. Comparable Interface<\/h3>\n\n\n\n<p><code><a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/lang\/Comparable.html\" target=\"_blank\" rel=\"noreferrer noopener\">Comparable<\/a><\/code> interface enables the <strong>natural ordering of the classes<\/strong> that implements it. This makes the classes comparable to its other instances.<\/p>\n\n\n\n<p>A class implementing <code>Comparable<\/code> interface must override <code>compareTo()<\/code> method in which it can specify the comparison logic between two instances of the same class.<\/p>\n\n\n\n<ul><li><strong>Lists<\/strong> (and <strong>arrays<\/strong>) of objects that implement <em>Comparable<\/em> interface can be sorted automatically by <code>Collections.sort()<\/code> and <code>Arrays.sort()<\/code> APIs.<\/li><li>Objects that implement this interface will be automatically sorted when put in a <strong>sorted map<\/strong> (as keys) or <strong>sorted set<\/strong> (as elements).<\/li><li>It is strongly recommended (though not required) that natural orderings be consistent with <code><a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/\">equals()<\/a><\/code> method. Virtually all Java core classes that implement <code>Comparable<\/code> have natural orderings that are consistent with <code>equals()<\/code>.<\/li><\/ul>\n\n\n\n<pre title=\"Natural Ordering\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee> list = new ArrayList&lt;>();\n\n\/\/add employees..\n\nCollections.sort(list);<\/code><\/pre>\n\n\n\n<p>To sort the list in <strong>reversed order<\/strong>, the best way is to use the <em>Comparator.reversed()<\/em> API that imposes the reverse ordering.<\/p>\n\n\n\n<pre title=\"Natural Ordering\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee> list = new ArrayList&lt;>();\n\n\/\/add employees..\n\nCollections.sort(list, Comparator.reversed());<\/code><\/pre>\n\n\n\n<h3 id=\"1-2-comparator-interface\">1.2. Comparator Interface<\/h3>\n\n\n\n<p>When not seeking the natural ordering, we can take the help of <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/Comparator.html\" target=\"_blank\" rel=\"noreferrer noopener\">Comparator<\/a> interface to apply <strong>custom sorting<\/strong> behavior.<\/p>\n\n\n\n<p><code>Comparator<\/code> does not require modifying the source code of the class. We can create the comparison logic in a separate class which implements <code>Comparator<\/code> interface and override its <code>compare()<\/code> method. <\/p>\n\n\n\n<p>During sorting, we pass an instance of this comparator to <code>sort()<\/code> method along with the list of custom objects.<\/p>\n\n\n\n<p>For example, we want to sort the list of employees by their first name, while the natural sorting has been implemented by <code>id<\/code> field. So, to sort on name field, we must write the custom sorting logic using <em>Comparator<\/em> interface.<\/p>\n\n\n\n<pre title=\"NameSorter.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.Comparator;\n\npublic class NameSorter implements Comparator&amp;lt;Employee&amp;gt;\n{\n    @Override\n    public int compare(Employee e1, Employee e2)\n    {\n        return e1.getName().compareToIgnoreCase( e2.getName() );\n    }\n}<\/code><\/pre>\n\n\n\n<p>Notice the use of <em>NameSorter<\/em> in <em>sort()<\/em> method as the second argument in the given example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee> list = new ArrayList&lt;>();\n\n\/\/add employees to list\n\nCollections.sort(list, new NameSorter());<\/code><\/pre>\n\n\n\n<p>To do the <strong>reverse sorting<\/strong>, we just need to call the <em>reversed()<\/em> method on the <em>Comparator<\/em> instance.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee> list = new ArrayList&lt;>();\n\n\/\/add employees to list\n\nCollections.sort(list, new NameSorter().reversed());<\/code><\/pre>\n\n\n\n<h3 id=\"1-3-sorting-with-lambda-expressions\">1.3. Sorting with Lambda Expressions<\/h3>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\">Lambda expressions<\/a> help in writing <code>Comparator<\/code> implementations on the fly. We do not need to create a separate class to provide the one-time comparison logic.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Comparator&lt;Employee> nameSorter = (a, b) -> a.getName().compareToIgnoreCase(b.getName());\r\n\r\nCollections.sort(list, nameSorter);<\/code><\/pre>\n\n\n\n<h3 id=\"1-4-group-by-sorting\">1.4. Group By Sorting<\/h3>\n\n\n\n<p>To apply <em>SQL style sorting<\/em> on a collection of objects on different fields (<strong>group by sort<\/strong>), we can use <strong>multiple comparators<\/strong> in a chain. This <strong>chaining of comparators<\/strong> can be created using <em>Comparator.comparing()<\/em> and <em>Comparator.thenComparing()<\/em> methods.<\/p>\n\n\n\n<p>For example, we can sort the list of employees by name and then sort again by their age.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee> list = new ArrayList&lt;>();\n\n\/\/add employees to list\n\nCollections.sort(list, Comparator\r\n                        .comparing(Employee::getName)\r\n                        .thenComparing(Employee::getDob));<\/code><\/pre>\n\n\n\n<h2 id=\"2-sorting-an-array\">2. Sorting an Array<\/h2>\n\n\n\n<p>Use <code>java.util.Arrays.sort()<\/code> method to sort a given array in a variety of ways. The <em>sort()<\/em> is an overloaded method that takes all sorts of types as the method argument. <\/p>\n\n\n\n<p>This method implements a Dual-Pivot Quicksort sorting algorithm that offers <strong><em>O(n log(n))<\/em> performance<\/strong> on all data sets and is typically faster than traditional (one-pivot) Quicksort implementations.<\/p>\n\n\n\n<h3 id=\"2-1-ascending-order-1\">2.1. Ascending Order<\/h3>\n\n\n\n<p>Java program to sort an array of integers in ascending order using <em>Arrays.sort()<\/em> method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Unsorted array\nInteger[] numbers = new Integer[] { 15, 11, ... };\n\n\/\/Sort the array\nArrays.sort(numbers);<\/code><\/pre>\n\n\n\n<h3 id=\"2-2-descending-order-1\">2.2. Descending Order<\/h3>\n\n\n\n<p>Java provides <em>Collections.reverseOrder()<\/em> <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-comparator\/\">comparator<\/a> to reverse the default sorting behavior in one line. We can use this comparator to sort the array in descending order.<\/p>\n\n\n\n<p>Note that all elements in the array must be\u00a0<em>mutually comparable<\/em>\u00a0by the specified comparator.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Unsorted array\nInteger[] numbers = new Integer[] { 15, 11, ... };\n\n\/\/Sort the array in reverse order\nArrays.sort(numbers, Collections.reverseOrder());<\/code><\/pre>\n\n\n\n<h3 id=\"2-3-sorting-array-range\">2.3. Sorting Array Range<\/h3>\n\n\n\n<p><code>Arrays.sort()<\/code> method is an overloaded method and takes two additional parameters i.e. <code>fromIndex<\/code> (inclusive) and <code>toIndex<\/code> (exclusive).<\/p>\n\n\n\n<p>When provided above arguments, the array will be sorted within the provided range from position <code>fromIndex<\/code> to position <code>toIndex<\/code>.<\/p>\n\n\n\n<p>Given below is an example to sort the array from element 9 to 18. i.e. {9, 55, 47, 18} will be sorted and the rest elements will not be touched.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Unsorted array\nInteger[] numbers = new Integer[] { 15, 11, 9, 55, 47, 18, 1123, 520, 366, 420 };\n\n\/\/Sort the array\nArrays.sort(numbers, 2, 6);\n\n\/\/Print array to confirm\nSystem.out.println(Arrays.toString(numbers));<\/code><\/pre>\n\n\n\n<p>Program output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">[15, 11, 9, 18, 47, 55, 1123, 520, 366, 420]<\/code><\/pre>\n\n\n\n<h3 id=\"2-4-parallel-sorting\">2.4. Parallel Sorting<\/h3>\n\n\n\n<p>Java 8 introduced lots of new APIs for parallel processing data sets and streams. One such API is <code>Arrays.parallelSort()<\/code>.<\/p>\n\n\n\n<p>The <code>parallelSort()<\/code> method breaks the array into multiple sub-arrays and each sub-array is sorted with <code>Arrays.sort()<\/code> in <strong>different threads<\/strong>. Finally, all sorted sub-arrays are merged into one sorted array.<\/p>\n\n\n\n<p>The output of the <code>parallelSort()<\/code> and <code>sort()<\/code>, both APIs, will be same at last. It\u2019s just a matter of leveraging the <a href=\"https:\/\/howtodoinjava.com\/java-concurrency-tutorial\/\">Java concurrency<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><pre class=\"brush: java; title: Java parallel sort an array; notranslate\" title=\"Java parallel sort an array\">\n\/\/Parallel sort complete array\nArrays.parallelSort(numbers);\n\n\/\/Parallel sort array range\nArrays.parallelSort(numbers, 2, 6);\n\n\/\/Parallel sort array in reverse order\nArrays.parallelSort(numbers, Collections.reverseOrder());\n<\/pre><\/pre>\n\n\n\n<h2 id=\"3-sorting-a-set\">3. Sorting a Set<\/h2>\n\n\n\n<p>There is no direct support for sorting the <code>Set<\/code> in Java. To sort a <code>Set<\/code>, follow these steps:<\/p>\n\n\n\n<ol><li>Convert <code>Set<\/code> to <code>List<\/code>.<\/li><li>Sort <code>List<\/code> using <code>Collections.sort()<\/code> API.<\/li><li>Convert <code>List<\/code> back to <code>Set<\/code>.<\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"kotlin\" class=\"language-kotlin\">\/\/Unsorted set\r\nHashSet&lt;Integer> numbersSet = new LinkedHashSet&lt;>(); \/\/with Set items\r\n\r\nList&lt;Integer> numbersList = new ArrayList&lt;Integer>(numbersSet) ;        \/\/set -> list\r\n\r\n\/\/Sort the list\r\nCollections.sort(numbersList);\r\n\r\n\/\/sorted set\r\nnumbersSet = new LinkedHashSet&lt;>(numbersList);          \/\/list -> set<\/code><\/pre>\n\n\n\n<h2 id=\"4-sorting-a-map\">4. Sorting a Map<\/h2>\n\n\n\n<p>A <code>Map<\/code> is the collection of key-value pairs. So logically, we can sort the maps in two ways i.e. <strong>sort by key<\/strong> or <strong>sort by value<\/strong>.<\/p>\n\n\n\n<h3 id=\"4-1-sort-by-key\">4.1. Sort by Key<\/h3>\n\n\n\n<p>The best and most effective a sort a map by keys is to add all map entries in <strong>TreeMap<\/strong> object. <code>TreeMap<\/code> stores the keys in sorted order, always.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">HashMap&lt;Integer, String> map = new HashMap&lt;>();   \/\/Unsorted Map\n\nTreeMap&lt;Integer, String> treeMap = new TreeMap&lt;>(map);   \/\/Sorted by map keys<\/code><\/pre>\n\n\n\n<h3 id=\"4-2-sort-by-value\">4.2. Sort by Value<\/h3>\n\n\n\n<p>In <a href=\"https:\/\/howtodoinjava.com\/java-8-tutorial\/\">Java 8<\/a>, <code>Map.Entry<\/code> class has <code>static<\/code> method <strong>comparingByValue()<\/strong> to help us in sorting the <code>Map<\/code> by values.<\/p>\n\n\n\n<p>The <code>comparingByValue()<\/code> method returns a <strong>Comparator<\/strong> that compares <code>Map.Entry<\/code> in natural order on values.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">HashMap&lt;Integer, String> unSortedMap = new HashMap&lt;>(); \/\/Unsorted Map\r\n\r\n\/\/LinkedHashMap preserve the ordering of elements in which they are inserted\r\nLinkedHashMap&lt;Integer, String> sortedMap = new LinkedHashMap&lt;>();\r\n\r\nunSortedMap.entrySet()\r\n    .stream()\r\n    .sorted(Map.Entry.comparingByValue())\r\n    .forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));<\/code><\/pre>\n\n\n\n<h2 id=\"5-summary\">5. Summary<\/h2>\n\n\n\n<p>In the above-given examples, we learned to sort an Array, List, Map, and Set. <\/p>\n\n\n\n<p>We saw different ways to initialize and use <code>Comparator<\/code> interface including lambda expressions. We also learned to effectively use the <em>Comparator<\/em> interface.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn to sort a Java Set, List and Map of primitive types and custom objects using Comparator, Comparable and new lambda expressions. We will learn to sort in ascending and descending order as well. 1. Sorting a List of Objects To sort a list of objects, we have two popular approaches i.e. Comparable and Comparator &#8230; <a title=\"Guide to Sorting in Java\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/sort\/java-sorting\/\" aria-label=\"More on Guide to Sorting in Java\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11043,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1152],"tags":[1531,468],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-Sorting.jpg",576,324,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-Sorting.jpg",150,84,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-Sorting.jpg",300,169,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-Sorting.jpg",576,324,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-Sorting.jpg",576,324,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-Sorting.jpg",576,324,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-Sorting.jpg",576,324,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/Java-Sorting.jpg",120,68,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn to sort a Java Set, List and Map of primitive types and custom objects using Comparator, Comparable and new lambda expressions. We will learn to sort in ascending and descending order as well. 1. Sorting a List of Objects To sort a list of objects, we have two popular approaches i.e. Comparable and Comparator&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19527"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=19527"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19527\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11043"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=19527"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=19527"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=19527"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}