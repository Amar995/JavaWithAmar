{"id":3699,"date":"2014-04-04T20:07:12","date_gmt":"2014-04-04T14:37:12","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=3699"},"modified":"2022-01-09T22:31:45","modified_gmt":"2022-01-09T17:01:45","slug":"how-to-use-predicate-in-java-8","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java8\/how-to-use-predicate-in-java-8\/","title":{"rendered":"Java Predicates"},"content":{"rendered":"\n<p>In mathematics, a <strong>predicate is commonly understood to be a boolean-valued function<\/strong><code> 'P:X ? {true, false}'<\/code>, called the <em>predicate on X<\/em>. Let&#8217;s learn how Java Predicate interface helps in writing filter expressions so easy.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-ee159478 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-java-predicate-interface\">1. Java Predicate Interface<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#11-when-to-use-predicates\">1.1. When to use Predicates<\/a><li class=\"uagb-toc__list\"><a href=\"#12-using-predicate-with-stream\">1.2. Using Predicate with Stream<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#2-predicate-examples\">2. Predicate Examples<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-creating-predicates\">2.1. Creating Predicates<\/a><li class=\"uagb-toc__list\"><a href=\"#22-filtering-streams-with-predicate\">2.2. Filtering Streams with Predicate<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-conclusion\">3. Conclusion<\/a><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. Java Predicate Interface<\/h2>\n\n\n\n<h3>1.1. When to use Predicates<\/h3>\n\n\n\n<p>Introduced in Java 8, <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/function\/Predicate.html\" target=\"_blank\" rel=\"noreferrer noopener\">Predicate<\/a> is a <a href=\"https:\/\/howtodoinjava.com\/java\/stream\/functional-interface-tutorial\/\" target=\"_blank\" rel=\"noreferrer noopener\">functional interface<\/a> and can therefore be used as the assignment target for a <a title=\"Complete lambda expressions tutorial\" href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\">lambda expression<\/a> or method reference. <\/p>\n\n\n\n<p>So, where do you think, we can use these <em>true\/false returning functions<\/em> in day-to-day programming? I will say we can use predicates anywhere we need to evaluate a condition on a collection of objects such that evaluation can result either in <em>true or false<\/em>.<\/p>\n\n\n\n<p>For example, we can use predicates in these <strong>real-life usecases<\/strong>:<\/p>\n\n\n\n<ul><li>Find all children born after a particular date<\/li><li>Pizzas ordered within a specific time range<\/li><li>Employees older than certain age<\/li><li>and so on&#8230;<\/li><\/ul>\n\n\n\n<h3>1.2. Using Predicate with Stream<\/h3>\n\n\n\n<p>As we know, <em>Predicate<\/em> is a <strong>functional interface<\/strong> that means we can pass it in lambda expressions wherever a predicate is expected. For example, one such method is <code>filter()<\/code> method from <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/stream\/Stream.html\">Stream<\/a> interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/**\n * Returns a stream consisting of the elements of this stream that match\n * the given predicate.\n *\n * &lt;p&gt;This is an &lt;a href=\"package-summary.html#StreamOps\"&gt;intermediate\n * operation&lt;\/a&gt;.\n *\n * @param predicate a non-interfering stateless predicate to apply to each element to determine if it\n * should be included in the new returned stream.\n * @return the new stream\n *\/\nStream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);<\/code><\/pre>\n\n\n\n<p>We can assume a <em>Stream<\/em> as a mechanism to create a sequence of elements supporting sequential and parallel aggregate operations. It means we can anytime collect and perform some operation of all elements present in the stream in one call.<\/p>\n\n\n\n<p>So, essentially we can use stream and predicate to &#8211;<\/p>\n\n\n\n<ul><li>first filter certain elements from a group, and<\/li><li>then perform some operation on filtered elements.<\/li><\/ul>\n\n\n\n<h2>2. Predicate Examples<\/h2>\n\n\n\n<p>To demonstrate the uses of Predicate with Java Stream, we have an <code>Employee<\/code> class as below:<\/p>\n\n\n\n<pre title=\"Employee.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Employee {\n\n   private Integer id;\n   private Integer age;\n   private String gender;\n   private String firstName;\n   private String lastName;\n   \n   \/\/Getters and setters are hidden for brevity\n}<\/code><\/pre>\n\n\n\n<h3>2.1. Creating Predicates<\/h3>\n\n\n\n<p>As mentioned earlier, predicates evaluate an expression and return a boolean value. Now let us see a few examples.<\/p>\n\n\n\n<ul><li>Predicate to <em>find all employees who are male and age more than 21<\/em><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public static Predicate&lt;Employee&gt; isAdultMale()\n{\n    return p -&gt; p.getAge() &gt; 21 &amp;&amp; p.getGender().equalsIgnoreCase(\"M\");\n}<\/code><\/pre>\n\n\n\n<ul><li>Predicate to <em>find all employees who are female and age more than 18<\/em><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public static Predicate&lt;Employee&gt; isAdultFemale()\n{\n    return p -&gt; p.getAge() &gt; 18 &amp;&amp; p.getGender().equalsIgnoreCase(\"F\");\n}<\/code><\/pre>\n\n\n\n<ul><li>Predicate to <em>find all employees whose age is more than a given age<\/em><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public static Predicate&lt;Employee&gt; isAgeMoreThan(Integer age)\n{\n    return p -&gt; p.getAge() &gt; age;\n}<\/code><\/pre>\n\n\n\n<p>We can build more of them as and when needed. <\/p>\n\n\n\n<h3>2.2. Filtering Streams with Predicate<\/h3>\n\n\n\n<p>Let&#8217;s use the predicates created above. When we pass the predicate in the <em>Stream.filter()<\/em> method, it returns a new stream with matching items only, that we can collect in a new List.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.List;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n \npublic class EmployeePredicates\n{\n    public static Predicate&lt;Employee&gt; isAdultMale() {\n        return p -&gt; p.getAge() &gt; 21 &amp;&amp; p.getGender().equalsIgnoreCase(\"M\");\n    }\n \n    public static Predicate&lt;Employee&gt; isAdultFemale() {\n        return p -&gt; p.getAge() &gt; 18 &amp;&amp; p.getGender().equalsIgnoreCase(\"F\");\n    }\n \n    public static Predicate&lt;Employee&gt; isAgeMoreThan(Integer age) {\n        return p -&gt; p.getAge() &gt; age;\n    }\n \n    public static List&lt;Employee&gt; filterEmployees (List&lt;Employee&gt; employees,\n                                                Predicate&lt;Employee&gt; predicate)\n    {\n        return employees.stream()\n                    .filter( predicate )\n                    .collect(Collectors.&lt;Employee&gt;toList());\n    }\n}<\/code><\/pre>\n\n\n\n<p>In the above example, we have created another utility method <code>filterEmployees()<\/code> that basically makes code clean and less repetitive. We can also <strong>combine more than one predicate to make a predicate chain<\/strong> or <strong>complex predicate<\/strong>, as we do in <a href=\"https:\/\/howtodoinjava.com\/design-patterns\/creational\/builder-pattern-in-java\/\" target=\"_blank\" rel=\"noreferrer noopener\">builder pattern<\/a>.<\/p>\n\n\n\n<p>So, in this function, we pass the list of <code>employees<\/code> and we pass a predicate, then this function will return a new collection of <code>employees<\/code> satisfying the condition mentioned in <strong>parameter predicate<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport static predicateExample.EmployeePredicates.*;\n \npublic class TestEmployeePredicates\n{\n    public static void main(String[] args)\n    {\n        Employee e1 = new Employee(1,23,\"M\",\"Rick\",\"Beethovan\");\n        Employee e2 = new Employee(2,13,\"F\",\"Martina\",\"Hengis\");\n        Employee e3 = new Employee(3,43,\"M\",\"Ricky\",\"Martin\");\n        Employee e4 = new Employee(4,26,\"M\",\"Jon\",\"Lowman\");\n        Employee e5 = new Employee(5,19,\"F\",\"Cristine\",\"Maria\");\n        Employee e6 = new Employee(6,15,\"M\",\"David\",\"Feezor\");\n        Employee e7 = new Employee(7,68,\"F\",\"Melissa\",\"Roy\");\n        Employee e8 = new Employee(8,79,\"M\",\"Alex\",\"Gussin\");\n        Employee e9 = new Employee(9,15,\"F\",\"Neetu\",\"Singh\");\n        Employee e10 = new Employee(10,45,\"M\",\"Naveen\",\"Jain\");\n \n        List&lt;Employee&gt; employees = new ArrayList&lt;Employee&gt;();\n        employees.addAll(Arrays.asList(new Employee[]{e1, e2, e3, e4, e5, e6, e7, e8, e9, e10}));\n \n        System.out.println( filterEmployees(employees, isAdultMale()) );\n \n        System.out.println( filterEmployees(employees, isAdultFemale()) );\n \n        System.out.println( filterEmployees(employees, isAgeMoreThan(35)) );\n \n        \/\/Employees less than or equals to 35\n        \/\/can be find using negate()\n        System.out.println(filterEmployees(employees, isAgeMoreThan(35).negate()));\n    }\n}<\/code><\/pre>\n\n\n\n<pre title=\"Program Output\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">[1 - 23, 3 - 43, 4 - 26, 8 - 79, 10 - 45]\n[5 - 19, 7 - 68]\n[3 - 43, 7 - 68, 8 - 79, 10 - 45]\n[1 - 23, 2 - 13, 4 - 26, 5 - 19, 6 - 15, 9 - 15]<\/code><\/pre>\n\n\n\n<p>Predicates are really very good addition in Java 8 and I am going to use it whenever I will get the chance.<\/p>\n\n\n\n<h2>3. Conclusion<\/h2>\n\n\n\n<ul><li>Predicates move the conditions (sometimes business logic) to a central place. This helps in unit-testing them separately.<\/li><li>Any code change need not be duplicated into multiple places thus predicates improve the code maintenance.<\/li><li>The names predicates such as &#8220;<em><em>isAdultFemale()<\/em><\/em>&#8221; are much more readable than writing a <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/if-else-statement-in-java\/\">if-else<\/a> block.<\/li><\/ul>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java 8 Predicate is a statement that may be true or false depending on the values of its variables. Predicates be used as argument for a lambda expression. <\/p>\n","protected":false},"author":2,"featured_media":11277,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[18],"tags":[579,1409,576],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Java-Predicate.png",559,340,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Java-Predicate.png",150,91,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Java-Predicate.png",300,182,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Java-Predicate.png",559,340,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Java-Predicate.png",559,340,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Java-Predicate.png",559,340,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Java-Predicate.png",559,340,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Java-Predicate.png",120,73,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":22,"uagb_excerpt":"Java 8 Predicate is a statement that may be true or false depending on the values of its variables. Predicates be used as argument for a lambda expression.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3699"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=3699"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3699\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11277"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=3699"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=3699"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=3699"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}