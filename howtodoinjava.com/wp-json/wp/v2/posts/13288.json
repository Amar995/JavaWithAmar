{"id":13288,"date":"2020-05-12T01:22:33","date_gmt":"2020-05-11T19:52:33","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=13288"},"modified":"2022-01-25T15:25:23","modified_gmt":"2022-01-25T09:55:23","slug":"switch-expressions","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java14\/switch-expressions\/","title":{"rendered":"Java 14 &#8211; Enhanced Switch Expressions"},"content":{"rendered":"\n<p>In general, a <strong><a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/switch-statement-in-java\/\">switch statement<\/a><\/strong> allows the application to have <strong>multiple possible execution paths<\/strong> based on the value of a given expression in runtime. <\/p>\n\n\n\n<p>The evaluated expression is called the <strong>selector expression<\/strong> which must be of type <em>char, byte, short, int, Character, Byte, Short, Integer, String, or an enum<\/em>.<\/p>\n\n\n\n<ul><li><strong>Java 14<\/strong> (<a href=\"https:\/\/openjdk.java.net\/jeps\/361\" target=\"_blank\" rel=\"noreferrer noopener\">JEP 361<\/a>) adds a new form of switch label \u201c<code>case L -><\/code>\u201d which <strong>allows multiple constants per case<\/strong>. <\/li><li>New <strong>switch expressions can yield a value<\/strong> for the whole switch-case block that can then be assigned to a variable in same statement.<\/li><\/ul>\n\n\n\n<h2>1. Switch Expressions<\/h2>\n\n\n\n<ul><li>In Java 14, switch expressions are a <strong>standard feature<\/strong>. In Java 13 and <a href=\"https:\/\/howtodoinjava.com\/java12\/new-features-enhancements\/\" target=\"_blank\" rel=\"noopener noreferrer\">Java 12<\/a>, it was added as an preview feature.<\/li><li>It has the support of <strong>multiple case labels<\/strong> and using keyword <code>yield<\/code> to return value in place of old <code>return<\/code> keyword.<\/li><li>It also support returning value via label rules (arrow operator similar to lambda).<\/li><li>If we use arraw <code>(->)<\/code> operator, we can skip <code>yield<\/code> keyword as shown in <em>isWeekDayV1_1()<\/em>.<\/li><li>If we use colon <code>(:)<\/code> operator, we need to use <code>yield<\/code> keyword as shown in <em>isWeekDayV1_2()<\/em>.<\/li><li>In case of multiple statements, use <strong>curly braces<\/strong> along with <code>yield<\/code> keyword as shown in <em>isWeekDayV2()<\/em>.<\/li><li>In case of <code><a href=\"https:\/\/howtodoinjava.com\/java\/enum\/enum-tutorial\/\" target=\"_blank\" rel=\"noopener noreferrer\">enum<\/a><\/code>, we can skip the <strong>default case<\/strong>. If there is any missing value not handled in cases, compiler will complain. In all other expression types (int, strings etc), we must provide <code>default<\/code> case as well.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class SwitchExpressions\n{\n\tpublic static void main(String[] argv)\n\t{\n\t\tSystem.out.println(isWeekDayV1_1(Day.MON));\t\t\/\/true\n\t\tSystem.out.println(isWeekDayV1_2(Day.MON));\t\t\/\/true\n\t\tSystem.out.println(isWeekDayV2(Day.MON));\t\t\/\/true\n\t}\n\n\t\/\/1 - Return value directly\n\n\tenum Day {\n\t\tMON, TUE, WED, THUR, FRI, SAT, SUN\n\t};\n\n\tpublic static Boolean isWeekDayV1_1 (Day day)\n\t{\n\t\tBoolean result = switch(day) {\n\t\t\tcase MON, TUE, WED, THUR, FRI -> true;\n\t\t\tcase SAT, SUN -> false;\n\t\t};\n\t\treturn result;\n\t}\n\n\tpublic static Boolean isWeekDayV1_2 (Day day)\n\t{\n\t\tBoolean result = switch(day) {\n\t\t\tcase MON, TUE, WED, THUR, FRI : yield true;\n\t\t\tcase SAT, SUN : yield false;\n\t\t};\n\t\treturn result;\n\t}\n\n\t\/\/2 - Multiple statements in case block\n\n\tpublic static Boolean isWeekDayV2 (Day day)\n\t{\n\t\tBoolean result = switch(day) {\n\t\t\tcase MON, TUE, WED, THUR, FRI ->\n\t\t\t{\n\t\t\t\tSystem.out.println(\"It is WeekDay\");\n\t\t\t\tyield true;\n\t\t\t}\n\t\t\tcase SAT, SUN ->\n\t\t\t{\n\t\t\t\tSystem.out.println(\"It is Weekend\");\n\t\t\t\tyield false;\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n}<\/code><\/pre>\n\n\n\n<h2>2. Difference between <code>yield<\/code> and <code>return<\/code><\/h2>\n\n\n\n<ul><li>A <code>return<\/code> statement returns control to the invoker of a method or constructor. <\/li><li>A <strong>yield<\/strong> statement transfers control by causing an enclosing <code>switch<\/code> expression to produce a specified value.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">SwitchExpression:\n\tYieldStatement:\n    \t       yield Expression;<\/code><\/pre>\n\n\n\n<p>In the above pseudo-code:<\/p>\n\n\n\n<ul><li><code>SwitchExpression<\/code> tries to find a correct <code>YieldStatement<\/code> to transfer control to innermost enclosing <code>yield<\/code> target.<\/li><li><code>SwitchExpression<\/code> terminates normally and the value of the <code>Expression<\/code> becomes the value of the <code>SwitchExpression<\/code>.<\/li><li>If the evaluation of the <code>Expression<\/code> completes abruptly for some reason, then the <code>yield<\/code> statement completes abruptly for same reason.<\/li><\/ul>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n<div class=\"noticeboxesde downgreennoticebox\"><a href=\"https:\/\/github.com\/lokeshgupta1981\/Core-Java\/tree\/master\/src\/main\/java\/com\/howtodoinjava\/core\/basic\" target=\"_blank\" rel=\"noopener noreferrer\">Sourcecode Download<\/a><\/div>\n","protected":false},"excerpt":{"rendered":"<p>In general, a switch statement allows the application to have multiple possible execution paths based on the value of a given expression in runtime. The evaluated expression is called the selector expression which must be of type char, byte, short, int, Character, Byte, Short, Integer, String, or an enum. Java 14 (JEP 361) adds a &#8230; <a title=\"Java 14 &#8211; Enhanced Switch Expressions\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java14\/switch-expressions\/\" aria-label=\"More on Java 14 &#8211; Enhanced Switch Expressions\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":13289,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1295],"tags":[1509,1297],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",1024,576,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14-300x169.png",300,169,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14-768x432.png",768,432,true],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",1024,576,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",1024,576,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",1024,576,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Java-14.png",120,68,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"In general, a switch statement allows the application to have multiple possible execution paths based on the value of a given expression in runtime. The evaluated expression is called the selector expression which must be of type char, byte, short, int, Character, Byte, Short, Integer, String, or an enum. Java 14 (JEP 361) adds a&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/13288"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=13288"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/13288\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/13289"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=13288"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=13288"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=13288"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}