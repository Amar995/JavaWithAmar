{"id":4709,"date":"2016-04-27T13:51:12","date_gmt":"2016-04-27T08:21:12","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4709"},"modified":"2022-01-31T00:13:14","modified_gmt":"2022-01-30T18:43:14","slug":"object-oriented-programming","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/object-oriented-programming\/","title":{"rendered":"Object Oriented Programming"},"content":{"rendered":"\n<p>Object-oriented programming (OOP) refers to a programming methodology <strong>based on objects instead of just functions and procedures<\/strong>. The objects contain the data and the methods (or behavior).<\/p>\n\n\n\n<p>In this tutorial, we will learn four major principles &#8211; <em><strong>abstraction<\/strong><\/em>, <em><strong>encapsulation<\/strong><\/em>, <em><strong>inheritance<\/strong><\/em>, and <em><strong>polymorphism<\/strong><\/em>. These are also known as the <strong>four pillars of the object-oriented programming paradigm<\/strong>.<\/p>\n\n\n\n<div class=\"wp-block-uagb-inline-notice uagb-inline_notice__outer-wrap uagb-inline_notice__align-left uagb-block-14800cc0\"><h4 class=\"uagb-notice-title\">Quick Reference<\/h4><div class=\"uagb-notice-text\"><p><em><strong>Abstraction<\/strong><\/em> is the process of exposing the essential details of an entity, while ignoring the irrelevant details, to reduce the complexity for the users.<\/p><p><em><strong>Encapsulation<\/strong><\/em> is the process of bundling data and operations on the data together in an entity.<\/p><p><em><strong>Inheritance<\/strong><\/em> derives a new type from an existing class, thereby establishing a parent-child relationship.<\/p><p><em><strong>Polymorphism<\/strong><\/em> lets an entity take on different meanings in different contexts.<\/p><\/div><\/div>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1 uagb-toc__collapse uagb-block-176e36fb \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-what-is-object-oriented-programming\">1. What is Object-oriented programming?<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#11-class-and-object\">1.1. Class and Object<\/a><li class=\"uagb-toc__list\"><a href=\"#12-constructor\">1.2. Constructor<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#2-four-pillars-of-oop\">2. Four Pillars of OOP<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-abstraction\">2.1. Abstraction<\/a><li class=\"uagb-toc__list\"><a href=\"#22-encapsulation\">2.2. Encapsulation<\/a><li class=\"uagb-toc__list\"><a href=\"#23-inheritance\">2.3. Inheritance<\/a><li class=\"uagb-toc__list\"><a href=\"#24-polymorphism\">2.4. Polymorphism<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-more-object-oriented-programming-concepts\">3. More Object Oriented Programming Concepts<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-coupling\">3.1. Coupling<\/a><li class=\"uagb-toc__list\"><a href=\"#32-cohesion\">3.2. Cohesion<\/a><li class=\"uagb-toc__list\"><a href=\"#33-association\">3.3. Association<\/a><li class=\"uagb-toc__list\"><a href=\"#34-aggregation\">3.4. Aggregation<\/a><li class=\"uagb-toc__list\"><a href=\"#35-composition\">3.5. Composition<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#4-best-practices\">4. Best Practices<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-favor-composition-over-inheritance\">4.1. Favor Composition over Inheritance<\/a><li class=\"uagb-toc__list\"><a href=\"#42-program-to-interface-not-to-the-implementation\">4.2. Program to Interface, Not to the Implementation<\/a><li class=\"uagb-toc__list\"><a href=\"#43-dry-dont-repeat-yourself\">4.3. DRY (Don&#8217;t Repeat Yourself)<\/a><li class=\"uagb-toc__list\"><a href=\"#44-encapsulate-what-changes\">4.4. Encapsulate What Changes<\/a><li class=\"uagb-toc__list\"><a href=\"#45-single-responsibility-principle\">4.5. Single Responsibility Principle<\/a><li class=\"uagb-toc__list\"><a href=\"#46-open-closed-principle\">4.6. Open Closed Principle<\/a><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"1-what-is-object-oriented-programming\">1. What is Object-oriented programming?<\/h2>\n\n\n\n<p>In early day, people wrote the programs with <strong>binary code<\/strong>, and used mechanical switches to load the programs. Later, as the hardware capabilities evolved, experts tried to simplify the programming using high-level languages where we used compilers to generate machine instructions from the program.<\/p>\n\n\n\n<p>With more evolution, experts created the <strong>structured programming<\/strong> which was based on small functions. These functions helped in many ways e.g. code reuse, local variables, code debugging, and code maintainability.<\/p>\n\n\n\n<p>With more computing advancement and demand for more complex applications, the limitations of structured programming started to be visible. The complex applications needed to be more closely modeled with the real-life world and usecases.<\/p>\n\n\n\n<p>Then experts developed object-oriented programming. <strong>In the center of OOP, we have objects and classes.<\/strong> Just like a real-life entity, an object has two significant characteristics :<\/p>\n\n\n\n<ul><li><strong>data<\/strong> &#8211; tells about the attributes and the state of the object<\/li><li><strong>behavior<\/strong> &#8211; gives it the ability to change itself and communicate with other objects<\/li><\/ul>\n\n\n\n<h3 id=\"1-1-class-and-object\">1.1. Class and Object<\/h3>\n\n\n\n<p>An object is an instance of a class. Each object has its own state, behavior, and identity. A class is the blueprint or template for its objects. <\/p>\n\n\n\n<p>Objects can communicate with other objects by calling functions. It is sometimes referred to as <strong>message passing<\/strong>.<\/p>\n\n\n\n<p>For example, if we are working on an HR application then it consists of entities\/actors e.g. employee, manager, department, payslips, vacation, goals, time tracking, etc. To model these entities in computer programs, we can create classes with similar data attributes and behavior like in real-life.<\/p>\n\n\n\n<p>For example, an employee entity can be represented as <code>Employee<\/code> class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Employee\n{\n    private long id;\n    private String title;\n    private String firstName;\n    private String middleName;\n    private String lastName;\n    private Date dateOfBirth;\n\n    private Address mailingAddress;\n    private Address permanentAddress;\n\n    \/\/ More such attributes, getters and setters according to application requirements\n}<\/code><\/pre>\n\n\n\n<p>The above <code>Employee<\/code> acts as a template. We can use this class to create as many different employee objects as we need in the application.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Employee e = new Employee(111);\ne.setFirstName(\"Alex\");\n..\n..\n\nint age = e.getAge();<\/code><\/pre>\n\n\n\n<p>The <code>id<\/code> field helps in storing and retrieving the detail of any individual employee.<\/p>\n\n\n\n<p>The object identity is generally maintained by the application runtime environment e.g., for Java applications, its Java Virtual Machine (JVM). Each time we create a Java object, JVM creates a <em>hashcode<\/em> for this object and assigns it. This way, even if the programmer forgets to add <code>id<\/code> field, JVM ensures that all objects are uniquely identified.<\/p>\n\n\n\n<h3 id=\"1-2-constructor\">1.2. Constructor<\/h3>\n\n\n\n<p>Constructors are special <strong>methods without any return value<\/strong>. Their name is always the same as the name of the class, but they can accept parameters that help set the object&#8217;s initial state before the application starts using it.<\/p>\n\n\n\n<p>If we do not provide any constructor, JVM assigns a <strong>default constructor<\/strong> to the class. This default constructor does not accept any parameter.<\/p>\n\n\n\n<p>Remember, if we assign a constructor to any class then JVM does not assign the default constructor to it. If needed, we need to specify the default constructor explicitly to the class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Employee\n{\n    \/\/ Default constructor\n    public Employee()\n    {\n\n    }\n\n    \/\/ Custom constructor\n    public Employee(int id)\n    {\n        this.id = id;\n    }\n}<\/code><\/pre>\n\n\n\n<h2 id=\"2-four-pillars-of-oop\">2. Four Pillars of OOP<\/h2>\n\n\n\n<p>The four major features of object-oriented programming are:<\/p>\n\n\n\n<ul><li>Abstraction<\/li><li>Encapsulation<\/li><li>Inheritance<\/li><li>Polymorphism<\/li><\/ul>\n\n\n\n<div class=\"wp-block-image size-full wp-image-13399\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop.png\" alt=\"Object Oriented Programming\" class=\"wp-image-13399\" width=\"730\" height=\"348\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop.png 948w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop-300x143.png 300w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop-768x366.png 768w\" sizes=\"(max-width: 730px) 100vw, 730px\" \/><figcaption>OOP Pillars<\/figcaption><\/figure><\/div>\n\n\n\n<h3 id=\"2-1-abstraction\">2.1. Abstraction<\/h3>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/\">Abstraction<\/a> is very easy to understand when we relate it to the real-time example. For example, when we drive our car, we do not have to be concerned with the exact internal working of the car. What we are concerned with is interacting with the car via its interfaces like steering wheel, brake pedal, accelerator pedal, etc. Here the knowledge we have of the car is <strong>abstract<\/strong>.<\/p>\n\n\n\n<p>In computer science, abstraction is the process by which data and programs are defined with a representation similar in form to its meaning (<em>semantics<\/em>) while hiding away the implementation details.<\/p>\n\n\n\n<p>In more simple terms, <strong>abstraction hides information that is not relevant to context or rather shows only relevant information and simplifies<\/strong> it by comparing it to something similar in the real world.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default info\"><p>Abstraction captures only those details about an object that is relevant to the current perspective.<\/p><\/blockquote>\n\n\n\n<p>Typically abstraction can be seen in two ways:<\/p>\n\n\n\n<h4><h4>2.1.1. Data Abstraction<\/h4><\/h4>\n\n\n\n<p><p>Data abstraction is the way to create complex data types from multiple smaller data types &#8211; which is more close to real-life entities. e.g., An <code>Employee<\/code> class can be a complex object of having various small associations.<\/p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Employee \n{\n    private Department department;\n    private Address address;\n    private Education education;\n    \/\/So on...\n}<\/code><\/pre>\n\n\n\n<p>So, if you want to fetch information of an employee, you ask it from&nbsp;<code>Employee<\/code>&nbsp;object \u2013 as you do in real life, ask the person itself.<\/p>\n\n\n\n<h4 id=\"2-1-2-control-abstraction\">2.1.2. Control Abstraction<\/h4>\n\n\n\n<p>Control abstraction is achieved by hiding the sequence of actions for a complex task \u2013 inside a simple method call, so logic to perform the task can be hidden from the client and could be changed in the future without impacting the client code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class EmployeeManager\n{\n    public Address getPrefferedAddress(Employee e)\n    {\n        \/\/Get all addresses from database \n        \/\/Apply logic to determine which address is preferred\n        \/\/Return address\n    }\n}<\/code><\/pre>\n\n\n\n<p>In the above example, tomorrow if you want to change the logic so that everytime domestic address is always the preferred address, you will change the logic inside&nbsp;<em>getPrefferedAddress()<\/em>&nbsp;method, and the client will be unaffected.<\/p>\n\n\n\n<h3 id=\"2-2-encapsulation\">2.2. Encapsulation<\/h3>\n\n\n\n<p><strong>Wrapping data and methods within classes<\/strong> in combination with implementation hiding (through access control) is often called encapsulation. The result is a data type with characteristics and behaviors.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>&#8220;<strong>Whatever changes, encapsulate it<\/strong>&#8221; &#8211; A famous design principle<\/p><\/blockquote>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/oops\/encapsulation-in-java-and-its-relation-with-abstraction\/\">Encapsulation<\/a> essentially has both i.e. information hiding and implementation hiding.<\/p>\n\n\n\n<ul><li><strong>Information hiding<\/strong> is done through using <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-access-modifiers\/\">access control modifiers<\/a> (public, private, protected) and <code>implementation hiding<\/code> is achieved through creation of interface for a class.<\/li><li><strong>Implementation hiding<\/strong> gives the designer the freedom to modify how the responsibility is fulfilled by an object. This is especially valuable at points where the design (or even the requirements) are likely to change.<\/li><\/ul>\n\n\n\n<p>Let&#8217;s take an example to make it more clear.<\/p>\n\n\n\n<h4 id=\"2-2-1-information-hiding\">2.2.1. Information Hiding<\/h4>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class InformationHiding\n{\n    \/\/Restrict direct access to inward data\n    private ArrayList items = new ArrayList();\n\n    \/\/Provide a way to access data - internal logic can safely be changed in future\n    public ArrayList getItems(){\n        return items;\n    }\n}<\/code><\/pre>\n\n\n\n<h4 id=\"2-2-2-implementation-hiding\">2.2.2. Implementation Hiding<\/h4>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">interface ImplemenatationHiding {\n    Integer sumAllItems(ArrayList items);\n}\n\nclass InformationHiding implements ImplemenatationHiding\n{\n    \/\/Restrict direct access to inward data\n    private ArrayList items = new ArrayList();\n\n    \/\/Provide a way to access data - internal logic can safely be changed in future\n    public ArrayList getItems(){\n        return items;\n    }\n\n    public Integer sumAllItems(ArrayList items) {\n        \/\/Here you may do N number of things in any sequence\n        \/\/Which you do not want your clients to know\n        \/\/You can change the sequence or even whole logic\n        \/\/without affecting the client\n    }\n}<\/code><\/pre>\n\n\n\n<h3 id=\"2-3-inheritance\">2.3. Inheritance<\/h3>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-inheritance\/\">Inheritance<\/a> is another important concept in object-oriented programming. Inheritance is a <strong>mechanism by which one class acquires the properties and behaviors of the parent class<\/strong>. It&#8217;s essentially creating a parent-child relationship between classes. In Java, we will use inheritance mainly for code reusability and maintainability.<\/p>\n\n\n\n<p>Keyword \u201c<strong>extends<\/strong>\u201d is used to inherit a class in java. The \u201c<code>extends<\/code>\u201d keyword indicates that we are making a new class that derives from an existing class.<\/p>\n\n\n\n<p>In the terminology of Java, a class that is inherited is called a <strong>super<\/strong> class. The new class is called a <strong>subclass<\/strong>.<\/p>\n\n\n\n<p>A subclass inherits all the non-private members (fields, methods, and nested classes) from its superclass. Constructors are not members, so they are not inherited by subclasses, but the <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-constructors\/\">constructor<\/a> of the superclass can be invoked from the subclass.<\/p>\n\n\n\n<h4 id=\"2-3-1-inheritance-example\">2.3.1. Inheritance Example<\/h4>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Employee\n{\n    private Department department;\n    private Address address;\n    private Education education;\n    \/\/So on...\n}\n\npublic class Manager extends Employee {\n    private List&lt;Employee&gt; reportees;\n}<\/code><\/pre>\n\n\n\n<p>In the above code, Manager is a specialized version of Employee and reuses department, address and education from Employee class as well as define its own <code>reportees<\/code> list.<\/p>\n\n\n\n<h4 id=\"2-3-2-types-of-inheritance\">2.3.2. Types of Inheritance<\/h4>\n\n\n\n<p><strong>Single inheritance<\/strong> &#8211; A child class is derived from one parent class. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Parent\n{\n    \/\/code\n}\n \nclass Child extends Parent\n{\n    \/\/code\n}<\/code><\/pre>\n\n\n\n<p><strong>Multiple inheritances<\/strong> &#8211; A child can derive from multiple parents. Till JDK 1.7, multiple inheritance was not possible in java through the use of classes. But from JDK 1.8 onwards, multiple inheritance is possible via the use of <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/exploring-interfaces-and-abstract-classes-in-java\/\">interfaces<\/a> with <a href=\"https:\/\/howtodoinjava.com\/java8\/default-methods-in-java-8\/\">default methods<\/a>. <p>Multiple inheritance through the use of interfaces is always possible in Java.<\/p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">interface MyInterface1\n{\n        \n}\n \ninterface MyInterface2\n{\n       \n}\n \nclass MyClass implements MyInterface1, MyInterface2\n{\n \n}\n<\/code><\/pre>\n\n\n\n<p><strong>Multilevel inheritance<\/strong> &#8211; it refers to inheritance between more than three classes in such a way that a child class will act as parent class for another child class. <p>In given example, <code>B<\/code> is parent class as well as child class also.<\/p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class A\n{\n \n}\n \nclass B extends A\n{\n \n}\n \nclass C extends B\n{\n \n}<\/code><\/pre>\n\n\n\n<p><strong>Hierarchical inheritance<\/strong> &#8211; It refers to inheritance when there is one super class and more than one sub classes extending the super class. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class A\n{\n \n}\n \nclass B extends A\n{\n \n}\n \nclass C extends A\n{\n \n}\n \nclass D extends A\n{\n \n}<\/code><\/pre>\n\n\n\n<p><strong>Hybrid inheritance<\/strong> &#8211; It is a combination of two or more types of inheritance. So when the relationship between classes contains inheritance of two or more types, then we say classes implement hybrid inheritance. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">interface A\n{\n \n}\n \ninterface B extends A\n{\n \n}\n \nclass C implements A\n{\n \n}\n \nclass D extends C impements B\n{\n \n}<\/code><\/pre>\n\n\n\n<h3 id=\"2-4-polymorphism\">2.4. Polymorphism<\/h3>\n\n\n\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/oops\/what-is-polymorphism-in-java\/\">Polymorphism<\/a> is the ability by which, we can create functions or reference variables which behave differently in a different programmatic context. It is often referred to as <strong>one name with many forms<\/strong>.<\/p>\n\n\n\n<p>For example, in most programming languages, <code> '+' <\/code> operator is used for adding two numbers as well as concatenating two strings. Based on the type of variables, the operator changes its behavior. It is known as <em><strong>operator overloading<\/strong><\/em>.<\/p>\n\n\n\n<p>In Java, polymorphism is essentially considered into two types:<\/p>\n\n\n\n<h4 id=\"2-4-1-compile-time-polymorphism\">2.4.1. Compile-time Polymorphism<\/h4>\n\n\n\n<p>In compile-time polymorphism, the compiler can bind the appropriate methods to the respective objects at compile time because it has all the necessary information and knows which method to call during program compilation.<\/p>\n\n\n\n<p>It is often referred to as the <strong>static binding<\/strong> or <strong>early binding<\/strong>.<\/p>\n\n\n\n<p>In Java, it is achieved with the use of <strong>method overloading<\/strong>. In method overloading, the method parameters can vary with a number, order, or the types of parameter.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class PlusOperator\n{\n       int sum(int x, int y) {\n             return x + y;\n       }\n\n       double sum(double x, double y) {\n             return x + y;\n       }\n\n       String sum(String s1, String s2) {\n             return s1.concat(s2);\n       }\n}<\/code><\/pre>\n\n\n\n<h4 id=\"2-4-2-runtime-polymorphism\">2.4.2. Runtime Polymorphism<\/h4>\n\n\n\n<p>In runtime polymorphism, the call to an overridden method is resolved dynamically at runtime. The object, on which the method will be executed, is determined at runtime &#8211; generally depending on user-driven context.<\/p>\n\n\n\n<p>It is often referred to as the <strong>dynamic binding<\/strong> or <strong>method overriding<\/strong>. We may have heard it with the name <strong>dynamic method dispatch<\/strong>.<\/p>\n\n\n\n<p>In runtime polymorphism, we generally have a parent class and minimum of one child class. In a class, we write a statement to execute a method that is present in the parent class and child class.<\/p>\n\n\n\n<p>The method call is given using the variable of the type of parent class. The actual instance of the class is determined at runtime because a parent class type variable can store the reference to the instance of the parent class as well as child class also.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Animal {\n   public void sound() {\n         System.out.println(\"Some sound\");\n   }\n}\n\nclass Lion extends Animal {\n   public void sound() {\n         System.out.println(\"Roar\");\n   }\n}\n\nclass Main\n{\n   public static void main(String[] args)\n   {\n        \/\/Parent class reference is pointing to a parent object\n        Animal animal = new Animal();\n        animal.sound(); \/\/Some sound\n\n        \/\/Parent class reference is pointing to a child object\n        Animal animal = new Lion();\n        animal.sound(); \/\/Roar\n   }\n}<\/code><\/pre>\n\n\n\n<h2 id=\"3-more-object-oriented-programming-concepts\">3. More Object Oriented Programming Concepts<\/h2>\n\n\n\n<p>Apart from the above 4 building blocks of OOP, we have a few more concepts that play an important role in building the whole understanding.<\/p>\n\n\n\n<p>Before going deeper, we shall understand the term <strong>module<\/strong>. In general programming, a module refers to a class or a sub-application which performs unique functionality. In HR application, a class can perform various functions such as sending emails, generating salary slips, calculate the age of the employee, etc.<\/p>\n\n\n\n<h3 id=\"3-1-coupling\">3.1. Coupling<\/h3>\n\n\n\n<p>Coupling is the measure of the degree of interdependence between the modules. Coupling refers to how strongly a software element is connected to other elements. <strong>A good software will have <em>low coupling<\/em><\/strong>.<\/p>\n\n\n\n<p>It means a class should perform a unique task or only tasks that are independent of other tasks. E.g. an <code>EmailValidator<\/code> class will only validate the email. Similarly, <code>EmailSender<\/code> class will only send emails.<\/p>\n\n\n\n<p>If we include both functionality within a single class <code>EmailUtils<\/code> then it is example of <em>tight coupling<\/em>.<\/p>\n\n\n\n<h3 id=\"3-2-cohesion\">3.2. Cohesion<\/h3>\n\n\n\n<p>Cohesion is the internal glue that keeps the module together. <strong>Good software design will have high cohesion<\/strong>.<\/p>\n\n\n\n<p>It means a class\/module should include all the information that is needed for it to perform its function without any dependency. For example, an EmailSender class should be able to configure SMTP server, accept the sender&#8217;s email, subject and content. Basically, it should focus on sending emails only.<\/p>\n\n\n\n<p>The application should not use <code>EmailSender<\/code> for any other function other than sending email. Low cohesion results in monolithic classes that are difficult to maintain, understand and reduces reusablity.<\/p>\n\n\n\n<h3 id=\"3-3-association\">3.3. Association<\/h3>\n\n\n\n<p>Association refers to the <strong>relationship between objects who have independent lifecycles without ownership<\/strong> <strong>of each other<\/strong>.<\/p>\n\n\n\n<p>Let\u2019s take an example of a teacher and student. Multiple students can associate with a single teacher, and a single student can associate with multiple teachers, but both have their own lifecycles.<\/p>\n\n\n\n<p>Both can be created and deleted independently so when a teacher leaves the school, we don\u2019t need to delete any students, and when a student leaves the school, we don\u2019t need to delete any teachers.<\/p>\n\n\n\n<h3 id=\"3-4-aggregation\">3.4. Aggregation<\/h3>\n\n\n\n<p>Association refers to the <strong>relationship between objects who have independent lifecycles, but &#8216;WITH ownership&#8217;<\/strong>. It is between child and parent classes where child objects cannot belong to another parent object.<\/p>\n\n\n\n<p>Let\u2019s take an example of a cell phone and a cell phone battery. A single battery can belong to only one phone at a time. If the phone stops working, and we delete it from our database, the phone battery will not be deleted because it may still be functional. So in aggregation, while there is ownership, objects have their own lifecycle.<\/p>\n\n\n\n<h3 id=\"3-5-composition\">3.5. Composition<\/h3>\n\n\n\n<p>Composition refers to <strong>relationships when objects don\u2019t have an independent lifecycle<\/strong>. If the parent object is deleted, all child objects will also be deleted.<\/p>\n\n\n\n<p>For example, the relationship between questions and answers. Single questions can have multiple answers, but the answers cannot belong to multiple questions. If we delete a question, all its answers will automatically be deleted.<\/p>\n\n\n\n<h2 id=\"4-best-practices\">4. Best Practices<\/h2>\n\n\n\n<h3 id=\"4-1-favor-composition-over-inheritance\">4.1. Favor Composition over Inheritance<\/h3>\n\n\n\n<p>Inheritance and composition, both kind of promote the code reusability. But the use of composition is preferred over the inheritance.<\/p>\n\n\n\n<p>An implementation of composition over inheritance typically begins with the creation of various interfaces representing the behaviors that the system must exhibit. Interfaces enable polymorphic behavior. Classes implementing the identified interfaces are built and added to business domain classes as needed. Thus, system behaviors are realized without inheritance.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">interface Printable {\n    print();\n}\n\ninterface Convertible {\n    print();\n}\n\nclass HtmlReport implements Printable, Convertible\n{\n\n}\n\nclass PdfReport implements Printable\n{\n\n}\n\nclass XmlReport implements Convertible\n{\n\n}<\/code><\/pre>\n\n\n\n<h3 id=\"4-2-program-to-interface-not-to-the-implementation\">4.2. Program to Interface, Not to the Implementation<\/h3>\n\n\n\n<p>This leads to flexible code that can work with any new implementation of the interface. We should aim to use interfaces as variables, as return types of a method or as argument type of methods.<\/p>\n\n\n\n<p>Interfaces act as superclass types. In this way, we can create more specializations of the interface in the future without modifying the existing code.<\/p>\n\n\n\n<h3 id=\"4-3-dry-don-t-repeat-yourself\">4.3. DRY (Don&#8217;t Repeat Yourself)<\/h3>\n\n\n\n<p>Don&#8217;t write duplicate code, instead use Abstraction to abstract common things in one place.<\/p>\n\n\n\n<p>As a thumb rule, if you write the same piece of code at two places &#8211; consider extracting in a separate function and call the function at both places.<\/p>\n\n\n\n<h3 id=\"4-4-encapsulate-what-changes\">4.4. Encapsulate What Changes<\/h3>\n\n\n\n<p>All software gets changes over time. So, encapsulate the code you expect or suspect to be changed in the future.<\/p>\n\n\n\n<p>In Java, use <code>private<\/code> methods to hide such implementations from clients so that when you make a change, the client is not forced to make changes to its code.<\/p>\n\n\n\n<p>The use of design patterns is also recommeded to acheive encapsulation. For example, the <a href=\"https:\/\/howtodoinjava.com\/design-patterns\/creational\/implementing-factory-design-pattern-in-java\/\">factory design pattern<\/a> encapsulates object creation code and provides flexibility to introduce a new type later with no impact on existing clients.<\/p>\n\n\n\n<h3 id=\"4-5-single-responsibility-principle\">4.5. Single Responsibility Principle<\/h3>\n\n\n\n<p>It is one of the <a href=\"https:\/\/howtodoinjava.com\/best-practices\/solid-principles\/\">Solid principles<\/a> of OOP class design. It emphasizes that <em><strong>one class should have one and only one responsibility<\/strong><\/em>.<\/p>\n\n\n\n<p>In other words, we should write, change, and maintain a class for only one purpose. This will give us the flexibility to make changes in the future without worrying about the impacts of changes for another entity.<\/p>\n\n\n\n<h3 id=\"4-6-open-closed-principle\">4.6. Open Closed Principle<\/h3>\n\n\n\n<p>It emphasizes that <strong>software components should be open for extension, but closed for modification<\/strong>.<\/p>\n\n\n\n<p>This means that our classes should be designed in such a way that whenever fellow developers wants to change the flow of control in specific conditions in the application, all they need to extend our class and override some functions and that\u2019s it.<\/p>\n\n\n\n<p>If other developers are not able to design desired behavior due to constraints put by our class, then we should reconsider changing our class.<\/p>\n\n\n\n<p>There are a lot of other concepts and definitions in the whole <strong>OOP paradigm<\/strong> which we will learn in other tutorials.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this Java OOPs concepts tutorial, we will learn four major object oriented principles\u2013 abstraction, encapsulation, inheritance, and polymorphism. They are also known as four pillars of the object oriented programming paradigm.<\/p>\n","protected":false},"author":2,"featured_media":13399,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1454],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop.png",948,452,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop-300x143.png",300,143,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop-768x366.png",768,366,true],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop.png",948,452,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop.png",948,452,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop.png",948,452,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/04\/oop.png",120,57,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":14,"uagb_excerpt":"In this Java OOPs concepts tutorial, we will learn four major object oriented principles\u2013 abstraction, encapsulation, inheritance, and polymorphism. They are also known as four pillars of the object oriented programming paradigm.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4709"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4709"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4709\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/13399"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4709"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4709"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4709"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}