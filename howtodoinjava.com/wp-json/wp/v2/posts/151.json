{"id":151,"date":"2012-10-28T10:34:22","date_gmt":"2012-10-28T05:04:22","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=151"},"modified":"2022-01-29T23:26:36","modified_gmt":"2022-01-29T17:56:36","slug":"how-to-make-a-java-class-immutable","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/","title":{"rendered":"Creating an Immutable Class in Java"},"content":{"rendered":"<p>An <a title=\"immutable class\" href=\"https:\/\/en.wikipedia.org\/wiki\/Immutable_object\">immutable class<\/a> is one whose state can not be changed once created. There are certain guidelines to <strong>create a class immutable in Java<\/strong>.<\/p>\n<p>In this post, we will revisit these guidelines.<\/p>\n<pre>Table of Contents\r\n\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/#immutable-class\">1. Rules to create immutable classes<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/#immutable-class-example\">2. Java immutable class example<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/#benefits\">3. Benefits of making a class immutable<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/#summary\">5. Summary<\/a><\/pre>\n<p><a id=\"immutable-class\"><\/a><\/p>\n<h2>1. Rules to create immutable classes<\/h2>\n<p>Java documentation itself has some guidelines identified to <a title=\"immutable classes\" href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/essential\/concurrency\/imstrat.html\">write immutable classes<\/a> in this link. We will understand what these guidelines mean actually by creating an immutable class with mutable object with <code>Date<\/code> field.<\/p>\n<ol>\n<li>\n<h4>Don&#8217;t provide &#8220;setter&#8221; methods \u2014 methods that modify fields or objects referred to by fields.<\/h4>\n<p>This principle says that for all mutable properties in your class, do not provide setter methods. Setter methods are meant to change the state of an object and this is what we want to prevent here.<\/li>\n<li>\n<h4>Make all fields final and private<\/h4>\n<p>This is another way to increase <em>immutability<\/em>. Fields declared <strong>private<\/strong> will not be accessible outside the class and making them final will ensure the even accidentally you can not change them.<\/li>\n<li>\n<h4>Don&#8217;t allow subclasses to override methods<\/h4>\n<p>The simplest way to do this is to declare the class as <strong><em>final<\/em><\/strong>. Final classes in java can not be extended.<\/li>\n<li>\n<h4>Special attention when having mutable instance variables<\/h4>\n<p>Always remember that your instance variables will be either <strong>mutable<\/strong> or <strong>immutable<\/strong>. Identify them and return new objects with copied content for all mutable objects. Immutable variables can be returned safely without extra effort.<\/p>\n<p>A more sophisticated approach is to make the constructor <strong><em>private<\/em><\/strong> and construct instances in <strong>factory methods<\/strong>.<\/li>\n<\/ol>\n<p><a id=\"immutable-class-example\"><\/a><\/p>\n<h2>2. Java immutable class example<\/h2>\n<p>Lets apply all above rules for immutable classes and make a concrete class implementation for <strong>immutable class in Java<\/strong>.<\/p>\n<pre class=\"brush: java; title: ImmutableClass.java; notranslate\" title=\"ImmutableClass.java\">\r\n\r\nimport java.util.Date;\r\n\r\n\/**\r\n* Always remember that your instance variables will be either mutable or immutable.\r\n* Identify them and return new objects with copied content for all mutable objects.\r\n* Immutable variables can be returned safely without extra effort.\r\n* *\/\r\npublic final class ImmutableClass\r\n{\r\n\r\n\t\/**\r\n\t* Integer class is immutable as it does not provide any setter to change its content\r\n\t* *\/\r\n\tprivate final Integer immutableField1;\r\n\r\n\t\/**\r\n\t* String class is immutable as it also does not provide setter to change its content\r\n\t* *\/\r\n\tprivate final String immutableField2;\r\n\r\n\t\/**\r\n\t* Date class is mutable as it provide setters to change various date\/time parts\r\n\t* *\/\r\n\tprivate final Date mutableField;\r\n\r\n\t\/\/Default private constructor will ensure no unplanned construction of class\r\n\tprivate ImmutableClass(Integer fld1, String fld2, Date date)\r\n\t{\r\n\t\tthis.immutableField1 = fld1;\r\n\t\tthis.immutableField2 = fld2;\r\n\t\tthis.mutableField = new Date(date.getTime());\r\n\t}\r\n\r\n\t\/\/Factory method to store object creation logic in single place\r\n\tpublic static ImmutableClass createNewInstance(Integer fld1, String fld2, Date date)\r\n\t{\r\n\t\treturn new ImmutableClass(fld1, fld2, date);\r\n\t}\r\n\r\n\t\/\/Provide no setter methods\r\n\r\n\t\/**\r\n\t* Integer class is immutable so we can return the instance variable as it is\r\n\t* *\/\r\n\tpublic Integer getImmutableField1() {\r\n\t\treturn immutableField1;\r\n\t}\r\n\r\n\t\/**\r\n\t* String class is also immutable so we can return the instance variable as it is\r\n\t* *\/\r\n\tpublic String getImmutableField2() {\r\n\t\treturn immutableField2;\r\n\t}\r\n\r\n\t\/**\r\n\t* Date class is mutable so we need a little care here.\r\n\t* We should not return the reference of original instance variable.\r\n\t* Instead a new Date object, with content copied to it, should be returned.\r\n\t* *\/\r\n\tpublic Date getMutableField() {\r\n\t\treturn new Date(mutableField.getTime());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn immutableField1 +&quot; - &quot;+ immutableField2 +&quot; - &quot;+ mutableField;\r\n\t}\r\n}\r\n\r\n<\/pre>\n<p>Now its time to test our class:<\/p>\n<pre class=\"brush: java; title: TestMain.java; notranslate\" title=\"TestMain.java\">\r\n\r\nclass TestMain\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tImmutableClass im = ImmutableClass.createNewInstance(100,&quot;test&quot;, new Date());\r\n\t\tSystem.out.println(im);\r\n\t\ttryModification(im.getImmutableField1(),im.getImmutableField2(),im.getMutableField());\r\n\t\tSystem.out.println(im);\r\n\t}\r\n\r\n\tprivate static void tryModification(Integer immutableField1, String immutableField2, Date mutableField)\r\n\t{\r\n\t\timmutableField1 = 10000;\r\n\t\timmutableField2 = &quot;test changed&quot;;\r\n\t\tmutableField.setDate(10);\r\n\t}\r\n}\r\n<\/pre>\n<p>Program output:<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n100 - test - Tue Oct 30 21:34:08 IST 2012\r\n100 - test - Tue Oct 30 21:34:08 IST 2012\r\n<\/pre>\n<p>As it can be seen that even changing the instance variables using their references does not change their value, so the class is immutable.<\/p>\n<h4>Immutable classes in JDK<\/h4>\n<p>Apart from your written classes, JDK itself has lots of immutable classes. Given is such a list of immutable classes in Java.<\/p>\n<ol>\n<li>String<\/li>\n<li>Wrapper classes such as Integer, Long, Double etc.<\/li>\n<li>Immutable collection classes such as Collections.singletonMap() etc.<\/li>\n<li>java.lang.StackTraceElement<\/li>\n<li>Java enums (ideally they should be)<\/li>\n<li>java.util.Locale<\/li>\n<li>java.util.UUID<\/li>\n<\/ol>\n<p><a id=\"benefits\"><\/a><\/p>\n<h2>3. Benefits of making a class immutable<\/h2>\n<p>Lets first identify <strong>advantages of immutable class<\/strong>. In Java, immutable classes are:<\/p>\n<ol>\n<li>are simple to construct, test, and use<\/li>\n<li>are automatically thread-safe and have no synchronization issues<\/li>\n<li>do not need a copy constructor<\/li>\n<li>do not need an implementation of clone<\/li>\n<li>allow <a title=\"Working with hashCode and equals methods in java\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/\"><code>hashCode()<\/code><\/a> to use lazy initialization, and to cache its return value<\/li>\n<li>do not need to be copied defensively when used as a field<\/li>\n<li>make good <a title=\"How hashmap works in java\" href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/how-hashmap-works-in-java\/\">Map keys and Set elements<\/a> (these objects must not change state while in the collection)<\/li>\n<li>have their class invariant established once upon construction, and it never needs to be checked again<\/li>\n<li>always have &#8220;<strong>failure atomicity<\/strong>&#8221; (a term used by Joshua Bloch) : if an immutable object throws an exception, it&#8217;s never left in an undesirable or indeterminate state<\/li>\n<\/ol>\n<p><a id=\"summary\"><\/a><\/p>\n<h2>4. Summary<\/h2>\n<p>In this tutorial, we learned to <strong>create immutable java class with mutable objects<\/strong> as well as immutable fields as well. We also saw the benefits which immutable classes bring in an application.<\/p>\n<p>As a design best practice, always aim to make your application Java classes to be immutable. In this way, you can always worry less about <a href=\"https:\/\/howtodoinjava.com\/java-concurrency-tutorial\/\">concurrency<\/a> related defects in your program.<\/p>\n<p>How to write an immutable class? This could be an <a href=\"https:\/\/howtodoinjava.com\/java-interview-questions\/\">interview question<\/a> as well.<\/p>\n<p>Happy Learning!!<\/p>\n<p>Read More:<\/p>\n<p><a href=\"https:\/\/howtodoinjava.com\/java\/string\/java-interview-question-why-strings-are-immutable\/\">Why string class is immutable in Java?<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn what is immutable class in Java. How to create a Java class immutable step by step. Also learn the benefits of immutable classes in real-life examples<\/p>\n","protected":false},"author":2,"featured_media":4758,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[1482],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":108,"uagb_excerpt":"Learn what is immutable class in Java. How to create a Java class immutable step by step. Also learn the benefits of immutable classes in real-life examples","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/151"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=151"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/151\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4758"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=151"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=151"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=151"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}