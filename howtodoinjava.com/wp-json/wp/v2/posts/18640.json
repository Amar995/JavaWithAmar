{"id":18640,"date":"2021-11-28T23:30:26","date_gmt":"2021-11-28T18:00:26","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=18640"},"modified":"2021-11-28T23:30:28","modified_gmt":"2021-11-28T18:00:28","slug":"new-features","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java17\/new-features\/","title":{"rendered":"Java 17 Features and Enhancements"},"content":{"rendered":"\n<p><strong>Java 17<\/strong> was released on September 14, 2021. Java 17 is an LTS (Long Term Support) release, like Java 11 and Java 8. Oracle will support it for bug fixes, patches and performance enhancements for the next few years.<\/p>\n\n\n\n<p><a href=\"https:\/\/www.infoq.com\/news\/2021\/09\/spring-6-spring-boot-3-overhaul\/\" target=\"_blank\" rel=\"noreferrer noopener\">Spring 6 and Spring boot 3<\/a> will have first-class support for Java 17. So it is a good idea to plan for upgrading to Java 17.<\/p>\n\n\n\n<p>We can <em><a href=\"https:\/\/jdk.java.net\/17\/\" target=\"_blank\" rel=\"noreferrer noopener\">download Java 17<\/a><\/em> from this link.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1 uagb-toc__collapse uagb-block-53c80709 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-list-of-jeps-in-java-17\">1. List of JEPs in Java 17<\/a><li class=\"uagb-toc__list\"><a href=\"#2-java-17-features-for-developers\">2. Java 17 Features for Developers<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-restore-always-strict-floating-point-semantics\">2.1. Restore Always-Strict Floating-Point Semantics<\/a><li class=\"uagb-toc__list\"><a href=\"#22-pattern-matching-for-switch-preview\">2.2. Pattern Matching for Switch (Preview)<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#221-no-explicit-null-checks-are-needed\">2.2.1. No explicit null checks are needed<\/a><li class=\"uagb-toc__list\"><a href=\"#222-improved-instanceof-checking\">2.2.2. Improved instanceof checking<\/a><\/li><\/ul><li class=\"uagb-toc__list\"><a href=\"#23-sealed-classes\">2.3. Sealed Classes<\/a><li class=\"uagb-toc__list\"><a href=\"#24-enhanced-pseudo-random-number-generators\">2.4. Enhanced Pseudo-Random Number Generators<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#241-randomgenerator\">2.4.1. RandomGenerator<\/a><li class=\"uagb-toc__list\"><a href=\"#242-randomgeneratorfactory\">2.4.2. RandomGeneratorFactory<\/a><\/li><\/ul><li class=\"uagb-toc__list\"><a href=\"#25-deprecate-the-applet-api-for-removal\">2.5. Deprecate the Applet API for Removal<\/a><li class=\"uagb-toc__list\"><a href=\"#26-strongly-encapsulate-jdk-internals\">2.6. Strongly Encapsulate JDK Internals<\/a><li class=\"uagb-toc__list\"><a href=\"#27-remove-rmi-activation\">2.7. Remove RMI Activation<\/a><li class=\"uagb-toc__list\"><a href=\"#28-remove-the-experimental-aot-and-jit-compiler\">2.8. Remove the Experimental AOT and JIT Compiler<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-conclusion\">3. Conclusion<\/a><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. List of JEPs in Java 17<\/h2>\n\n\n\n<p>The below listed 14 JEPs are part of Java 17.<\/p>\n\n\n\n<ol><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/306\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-306<\/a>) Restore Always-Strict Floating-Point Semantics<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/356\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-356<\/a>) Enhanced Pseudo-Random Number Generators<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/382\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-382<\/a>) New macOS Rendering Pipeline<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/391\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-391<\/a>) macOS\/AArch64 Port<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/398\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-398<\/a>) Deprecate the Applet API for Removal<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/403\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-403<\/a>) Strongly Encapsulate JDK Internals<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/406\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-406<\/a>) Pattern Matching for switch (Preview)<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/407\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-407<\/a>) Remove RMI Activation<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/409\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-409<\/a>) Sealed Classes<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/410\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-410<\/a>) Remove the Experimental AOT and JIT Compiler<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/411\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-411<\/a>) Deprecate the Security Manager for Removal<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/412\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-412<\/a>) Foreign Function &amp; Memory API (Incubator)<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/414\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-414<\/a>) Vector API (Second Incubator)<\/li><li>(<a href=\"https:\/\/openjdk.java.net\/jeps\/415\" target=\"_blank\" rel=\"noreferrer noopener\">JEP-415<\/a>) Context-Specific Deserialization Filters<\/li><\/ol>\n\n\n\n<h2>2. Java 17 Features for Developers<\/h2>\n\n\n\n<p>Let us talk about which JEPs directly impact the work that developers do everyday.<\/p>\n\n\n\n<h3>2.1. Restore Always-Strict Floating-Point Semantics<\/h3>\n\n\n\n<p>This JEP is targeted towards scientific calculations which involve floating-point numbers. To guarantee the same calculation result on all platforms, we have been using the keyword <code>strictfp<\/code>.<\/p>\n\n\n\n<p>The <em><a href=\"https:\/\/howtodoinjava.com\/java\/keywords\/strictfp-modifier\/\">strictfp<\/a><\/em> modifier accomplishes this by representing all intermediate values as IEEE single-precision and double-precision values. But due to hardware heating issues, it became optional in JDK 1.2.<\/p>\n\n\n\n<p>Today, as the hardwares have evolved and those heating issues are fixed, default floating-point semantics have been changed to <em>consistently strict<\/em>.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>With this change, we do not need to use <code>strictfp<\/code> keyword, anymore.<\/p><\/blockquote>\n\n\n\n<h3>2.2. Pattern Matching for Switch (Preview)<\/h3>\n\n\n\n<p>This change adds pattern matching for <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/switch-statement-in-java\/\">switch statements<\/a> and expressions. Since this is a preview feature, we need to use <strong>&#8211;enable-preview<\/strong> option to enable it.<\/p>\n\n\n\n<h4>2.2.1. No explicit <code>null<\/code> checks are needed<\/h4>\n\n\n\n<p>Traditional <code>switch<\/code> statements throw <code>NullPointerException<\/code> if the selector expression evaluates to <code>null<\/code>. With this change, we can check for such <em>null<\/em> expressions as the separate <em>case<\/em> itself.<\/p>\n\n\n\n<pre title=\"Before Java 17\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">if (s == null) {\r\n    System.out.println(\"oops!\");\r\n    return;\r\n}\r\nswitch (s) {\r\n    case \"Foo\", \"Bar\" -> System.out.println(\"Great\");\r\n    default           -> System.out.println(\"Ok\");\r\n}<\/code><\/pre>\n\n\n\n<pre title=\"In Java 17\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">switch (s) {\r\n    case null         -> System.out.println(\"Oops\");\r\n    case \"Foo\", \"Bar\" -> System.out.println(\"Great\");\r\n    default           -> System.out.println(\"Ok\");\r\n}<\/code><\/pre>\n\n\n\n<h4>2.2.2. Improved <code>instanceof<\/code> checking<\/h4>\n\n\n\n<p>Before Java 16, if we had to write a code that checks the instance type and perform some logic, it was the way:<\/p>\n\n\n\n<pre title=\"Before Java 16\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Object o;\r\nif (o instanceof String) \r\n{\r\n    String s = (String) o;\r\n    String.format(\"String %s\", s)\r\n} \r\nelse if (o instanceof Integer) \r\n{\r\n    Integer i = (Integer) o; \r\n    String.format(\"int %d\", i)\r\n} \r\nelse if (o instanceof Double) \r\n{\r\n    Double d = (Double) o;\r\n    String.format(\"double %f\", d)\r\n}<\/code><\/pre>\n\n\n\n<p>In Java 16, we can write the above expression in a much simpler way.<\/p>\n\n\n\n<pre title=\"In Java 16\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Object o;\r\nif (o instanceof String s) \r\n{\r\n    String.format(\"String %s\", s)\r\n} \r\nelse if (o instanceof Integer i) \r\n{\r\n    String.format(\"int %d\", i)\r\n} \r\nelse if (o instanceof Double d) \r\n{\r\n    String.format(\"double %f\", d)\r\n}<\/code><\/pre>\n\n\n\n<p>Java 17 takes it to the next level with switch expression. Now we can rewrite the above code as:<\/p>\n\n\n\n<pre title=\"In Java 17\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Object o;\r\nswitch (o) \r\n{\r\n    case Integer i -> String.format(\"int %d\", i);\r\n    case Double d  -> String.format(\"double %f\", d);\r\n    case String s  -> String.format(\"String %s\", s);\r\n    default        -> o.toString();\r\n}<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>While the above changes have been made, it has been ensured that all of the old switch expressions must continue to work. You can see all the changes to <code>switch<\/code> expressions in the JEP webpage.<\/p><\/blockquote>\n\n\n\n<h3>2.3. Sealed Classes<\/h3>\n\n\n\n<p>In Java, by default, there has been no restriction on a class which public interfaces it can implement. From Java 15, we can declare a class or interface <em>sealed class<\/em> or <em>sealed interface<\/em> using the modifier <strong>sealed<\/strong>.<\/p>\n\n\n\n<p>Sealed classes and interfaces restrict which other classes or interfaces may extend or implement them.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public sealed class Account\r\n    permits CurrentAccount, SavingAccount, LoanAccount {\r\n}<\/code><\/pre>\n\n\n\n<p>It was a preview feature in Java 15 and Java 16. In Java 17, it has become a standard feature with no changes to what was available in Java 16.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java15\/sealed-classes-interfaces\/\">Sealed Classes and Interfaces<\/a><\/p><\/blockquote>\n\n\n\n<h3>2.4. Enhanced Pseudo-Random Number Generators<\/h3>\n\n\n\n<h4>2.4.1. RandomGenerator<\/h4>\n\n\n\n<p>This JEP introduced a new interface called <code>RandomGenerator<\/code> which aims to make future pseudorandom number generator (PRNG) algorithms easier to implement or use.<\/p>\n\n\n\n<p>With the legacy PRNG classes <em>Random<\/em>, <em>ThreadLocalRandom<\/em>, and <em>SplittableRandom<\/em>, it is difficult to replace any of them in an application with some other algorithm because they did not have any supertype to support runtime changes.<\/p>\n\n\n\n<p>With the introduction of <code>RandomGenerator<\/code> interface, we can inject any implementing generator class where the client uses <code>RandomGenerator<\/code> type in the application code. The new classes are:<\/p>\n\n\n\n<ul><li><em>SplittableGenerator<\/em> &#8211; can be split into two objects (the original one and a new one) each of which obey that same protocol.<\/li><li><em>JumpableGenerator<\/em> &#8211; can easily jump forward, by a moderate amount.<\/li><li><em>LeapableGenerator<\/em> &#8211; can easily not only jump but also leap forward, by a large amount.<\/li><li><em>ArbitrarilyJumpableGenerator<\/em> &#8211; can easily jump forward, by an arbitrary amount, to a distant point in the state cycle.<\/li><li><em>StreamableGenerator<\/em> &#8211; augments the <em>RandomGenerator<\/em> interface to provide methods that return streams of <em>RandomGenerator<\/em> objects.<\/li><\/ul>\n\n\n\n<p>Also, legacy random classes, such as <em>Java.util.Random<\/em>, <em>SplittableRandom<\/em>, <em>ThreadLocalRandom<\/em> and <em>SecureRandom<\/em> now extend the new <em>RandomGenerator<\/em> interface.<\/p>\n\n\n\n<h4>2.4.2. RandomGeneratorFactory<\/h4>\n\n\n\n<p>The <em>RandomGeneratorFactory<\/em> provides methods for selecting random number generator algorithms. We can choose a particular algorithm by its name and use it for generating random numbers.<\/p>\n\n\n\n<p>The default algorithm is <em>L32X64MixRandom<\/em>. Following is the list of all supported algorithms:<\/p>\n\n\n\n<ul><li>L128X1024MixRandom<\/li><li>L128X128MixRandom<\/li><li>L128X256MixRandom<\/li><li>L32X64MixRandom<\/li><li>L64X1024MixRandom<\/li><li>L64X128MixRandom<\/li><li>L64X128StarStarRandom<\/li><li>L64X256MixRandom<\/li><li>Random (Legacy)<\/li><li>SecureRandom (Legacy)<\/li><li>SplittableRandom (Legacy)<\/li><li>Xoroshiro128PlusPlus<\/li><li>Xoshiro256PlusPlus<\/li><\/ul>\n\n\n\n<p>The <code>Legecy<\/code> group represents the old PRNGs. Please note that none of the new implementations are thread-safe while both <em>Java.util.Random<\/em> and <em>Java.security.SecureRandom<\/em> are.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">RandomGeneratorFactory factory = RandomGeneratorFactory.of(\"SecureRandom\")\r\nRandomGenerator random = factory.create(200L);\r\n\r\n\/\/get random numbers\r\nrandomGenerator.nextDouble();<\/code><\/pre>\n\n\n\n<h3>2.5. Deprecate the Applet API for Removal<\/h3>\n\n\n\n<p>Most of the web browsers have already removed the support for Applets due to security concerns. In Java 9, Applet API was marked deprecated.<\/p>\n\n\n\n<p>Since it has become irrelevant today, Java 17 has marked it for removal.<\/p>\n\n\n\n<h3>2.6. Strongly Encapsulate JDK Internals<\/h3>\n\n\n\n<p>This JEP strongly encapsulates all internal elements of the JDK, except for critical internal APIs such as <em>sun.misc.Unsafe<\/em>.<\/p>\n\n\n\n<p>From Java 9 to Java 16, developers were able to access the JDK internal APIs using the flag <code>\u2013illegal-access<\/code>. Java 17 will ignore the flag, and if the flag is present.<\/p>\n\n\n\n<p>The console will display a message informing the discontinuation of the flag.<\/p>\n\n\n\n<h3>2.7. Remove RMI Activation<\/h3>\n\n\n\n<p>Remove the Remote Method Invocation (RMI) Activation mechanism while preserving the rest of RMI. It is obsolete and has been deprecated in Java 15.<\/p>\n\n\n\n<h3>2.8. Remove the Experimental AOT and JIT Compiler<\/h3>\n\n\n\n<p>This JEP removes the experimental Java-based ahead-of-time (AOT) and just-in-time (JIT) compiler introduced in Java 9 and Java 10.<\/p>\n\n\n\n<p>The Graal compiler was made available as an experimental JIT compiler in JDK 10 via JEP 317. Since they were introduced, there was little use of these experimental features, and the effort required to maintain and enhance them was significant.<\/p>\n\n\n\n<p>The developers can still leverage these features using GraalVM.<\/p>\n\n\n\n<h2>3. Conclusion<\/h2>\n\n\n\n<p>Java 17 has lots of exciting features and a long road of support and commitment. It removes many of the already deprecated APIs from Java.<\/p>\n\n\n\n<p>There is significantly less chance to find any applications which are still using those deprecated features, still, developers must be careful to thoroughly check the application code and dependencies before migrating to Java 17.<\/p>\n\n\n\n<p>As Java 17 is an LTS release, and major popular frameworks (e.g., Spring 6 and Spring Boot 3) will be supporting the new features, it is better to plan for Java 17 migration.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java 17 was released on September 14, 2021. Java 17 is an LTS (Long Term Support) release, like Java 11 and Java 8. Oracle will support it for bug fixes, patches and performance enhancements for the next few years. Spring 6 and Spring boot 3 will have first-class support for Java 17. So it is &#8230; <a title=\"Java 17 Features and Enhancements\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java17\/new-features\/\" aria-label=\"More on Java 17 Features and Enhancements\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":18641,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1388],"tags":[1435],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo-300x300.png",300,300,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Java 17 was released on September 14, 2021. Java 17 is an LTS (Long Term Support) release, like Java 11 and Java 8. Oracle will support it for bug fixes, patches and performance enhancements for the next few years. Spring 6 and Spring boot 3 will have first-class support for Java 17. So it is&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/18640"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=18640"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/18640\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/18641"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=18640"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=18640"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=18640"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}