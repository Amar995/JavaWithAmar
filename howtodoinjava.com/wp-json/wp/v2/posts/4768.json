{"id":4768,"date":"2015-06-09T07:31:58","date_gmt":"2015-06-09T07:31:58","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4768"},"modified":"2020-08-04T00:50:14","modified_gmt":"2020-08-03T19:20:14","slug":"static-import-declarations-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/static-import-declarations-in-java\/","title":{"rendered":"Static Import Declarations in Java"},"content":{"rendered":"<p>The normal import declaration imports classes from packages, so that they can be used without package reference. Similarly the static import declaration imports static members from classes and allowing them to be used without class reference.<\/p>\n<p>A static import declaration also comes in two flavors: single-static import and static-import-on-demand. A single-static import declaration imports one static member from a type. A static-import-on-demand declaration imports all static members of a type. The general syntax of static import declaration is as follows:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/Single-static-import declaration:\r\n\r\nimport static &lt;&lt;package name&gt;&gt;.&lt;&lt;type name&gt;&gt;.&lt;&lt;static member name&gt;&gt;;\r\n\r\n\/\/Static-import-on-demand declaration:\r\n\r\nimport static &lt;&lt;package name&gt;&gt;.&lt;&lt;type name&gt;&gt;.*;\r\n<\/pre>\n<h3>Static import example<\/h3>\n<p>For example, You remember printing messages in the standard output using the <code>System.out.println()<\/code> method. <code>System<\/code> is a class in <strong>java.lang<\/strong> package that has a static variable named <code>out<\/code>. When you use <code>System.out<\/code>, you are referring to that static variable out of the <code>System<\/code> class. You can use a static import declaration to import the <code>out<\/code> static variable from the <code>System<\/code> class as follows:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nimport static java.lang.System.out;\r\n<\/pre>\n<p>You code can now use the name <strong>out<\/strong> to mean <code>System.out<\/code> in your program. The compiler will use the static import declaration to resolve the name <code>out<\/code> to <code>System.out<\/code>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class StaticImportTest {\r\n        public static void main(String[] args) {\r\n                out.println(&quot;Hello static import!&quot;);\r\n        }\r\n}\r\n<\/pre>\n<h3>Static import rules<\/h3>\n<p>The following are some important rules about static import declaration.<\/p>\n<p>1) If two static members with the same simple name are imported, one using single-static import declaration and other using static-import-on-demand declaration, the one imported using single-static import declaration takes precedence. <\/p>\n<p>Suppose there are two classes, <code>package1.Class1<\/code> and <code>package2.Class2<\/code>. Both classes have a static method called <code>methodA<\/code>. The following code will use <code>package1.Class1.methodA()<\/code> method because it is imported using the single-static import declaration:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nimport static package1.Class1.methodA; \/\/ Imports Class1.methodA() method\r\nimport static package2.Class2.*;  \/\/ Imports Class2.methodA() method too\r\n \r\npublic class Test {\r\n        public static void main(String[] args) {\r\n                methodA();   \/\/ Class1.methodA() will be called\r\n        }\r\n}\r\n<\/pre>\n<p>2) Using single-static-import declaration to import two static members with the same simple name is not allowed. The following static import declarations generate an error because both of them import the static member with the same simple name of <code>methodA<\/code>:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nimport static package1.Class1.methodA;\r\nimport static package1.Class2.methodA; \/\/ An error\r\n<\/pre>\n<p>3) If a static member is imported using a single-static import declaration and there exists a static member in the same class with the same name, the static member in the class is used.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/ A.java\r\npackage package1;\r\n \r\npublic class A {\r\n        public static void test() {\r\n                System.out.println(&quot;package1.A.test()&quot;);\r\n        }\r\n}\r\n \r\n\/\/ Test.java\r\npackage package2;\r\n \r\nimport static package1.A.test;\r\n \r\npublic class Test {\r\n        public static void main(String[] args) {\r\n                test(); \/\/ Will use package2.Test.test() method, not package1.A.test() method\r\n        }\r\n \r\n        public static void test() {\r\n                System.out.println(&quot;package2.Test.test()&quot;);\r\n        }\r\n}\r\n\r\nOutput:\r\n\r\npackage2.Test.test()\r\n<\/pre>\n<p>It may seem that static imports help you use simple names of static members to make the program simpler to write and read. Sometimes static imports may introduce subtle bugs in your program, which may be hard to debug. You are advised not use static imports at all, or only in very rare circumstances.<\/p>\n<p><strong>Happy Learning !!<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>The normal import declaration imports classes from packages, so that they can be used without package reference. Similarly the static import declaration imports static members from classes and allowing them to be used without class reference. A static import declaration also comes in two flavors: single-static import and static-import-on-demand. A single-static import declaration imports one &#8230; <a title=\"Static Import Declarations in Java\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/static-import-declarations-in-java\/\" aria-label=\"More on Static Import Declarations in Java\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4757,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[1488],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-keywords.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"The normal import declaration imports classes from packages, so that they can be used without package reference. Similarly the static import declaration imports static members from classes and allowing them to be used without class reference. A static import declaration also comes in two flavors: single-static import and static-import-on-demand. A single-static import declaration imports one&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4768"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4768"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4768\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4757"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4768"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4768"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4768"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}