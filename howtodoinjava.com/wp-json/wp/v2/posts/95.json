{"id":95,"date":"2012-10-17T23:46:29","date_gmt":"2012-10-17T18:16:29","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=95"},"modified":"2022-01-30T00:14:17","modified_gmt":"2022-01-29T18:44:17","slug":"understanding-abstraction-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/","title":{"rendered":"Guide to Abstraction"},"content":{"rendered":"<p>In simplest words, you can define abstraction as which captures only those details about a Java object that are relevant to the current perspective.<\/p>\n<p>For example, a <code>HashMap<\/code> stores key-value pairs. It provides you two methods <code>get()<\/code> and <code>put()<\/code> methods to store and retrieve key-value pairs from map. It is, in fact, the only information you will need if you want to use the map in your application. How it works inside, you are not required to know it to use it. This is very much <strong>example of abstraction in Java<\/strong>.<\/p>\n<p>Take a more <strong>real-life example of abstraction<\/strong> which can be a TV remote. You know that when you press any button in remote, some function is applied on television e.g. change the channel, change the volume level etc. You are not required to know how internally remote works, to use it properly. It is an abstraction example.<\/p>\n<pre>Table of Contents\n\n<a href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/#abstraction\">1. What is abstraction in oops?<\/a>\n<a href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/#abstraction-types\">2. Types of abstraction<\/a>\n<a href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/#abstraction-usecases\">3. How to use abstraction in java<\/a>\n<a href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/#abstraction-vs-encapsulation\">4. Encapsulation vs Abstraction<\/a>\n<\/pre>\n<p>\u00a0<\/p>\n<h2>1. What is abstraction in oops?<\/h2>\n<p>In <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/object-oriented-programming\/\">object-oriented programming<\/a> theory, abstraction involves the facility to <strong>define objects that represent abstract &#8220;actors&#8221; that can perform work<\/strong>, report on and change their state, and &#8220;communicate&#8221; with other objects in the system.<\/p>\n<blockquote>\n<p>In computer science, abstraction is the process by which data and programs are defined with a representation similar in form to its meaning (semantics), while hiding away the implementation details. &#8211; <a title=\"Abstraction\" href=\"https:\/\/en.wikipedia.org\/wiki\/Abstraction_%28computer_science%29\">WikiPedia<\/a><\/p>\n<\/blockquote>\n<p>Abstraction in any programming language works in many ways. It can be seen from creating subroutines to defining interfaces for making low-level language calls.<\/p>\n<p>Some abstractions try to limit the breadth of concepts a programmer needs, by completely hiding the abstractions they in turn are built on, e.g. <a href=\"https:\/\/howtodoinjava.com\/gang-of-four-java-design-patterns\/\">design patterns<\/a>.<\/p>\n<p>\u00a0<\/p>\n<h2>2. Types of abstraction<\/h2>\n<p>Typically abstraction can be seen in two ways:<\/p>\n<ol>\n<li>\n<h4>Data abstraction<\/h4>\n<p>Data abstraction is the way to create complex data types and exposing only meaningful operations to interact with the data type, whereas hiding all the implementation details from outside works.<\/p>\n<p>The benefit of this approach involves capability of improving the implementation over time e.g. solving performance issues is any. The idea is that such changes are not supposed to have any impact on client code since they involve no difference in the abstract behavior.<\/p>\n<\/li>\n<li>\n<h4>Control abstraction<\/h4>\n<p>A software is essentially a collection of numerous statements written in any programming language. Most of the times, statement are similar and repeated over places multiple times.<\/p>\n<p>Control abstraction is the process of identifying all such statements and expose them as a unit of work. We normally use this feature when we create a function to perform any work.<\/p>\n<\/li>\n<\/ol>\n<p>\u00a0<\/p>\n<h2>3. How to achieve abstraction in java?<\/h2>\n<p>As abstraction is one of the core principles of Object-oriented programming practices and Java following all OOPs principles, abstraction is one of the major building blocks of java language.<\/p>\n<p><strong>In java, abstraction is achieved by <code>interfaces<\/code> and <code>abstract classes<\/code>.<\/strong> Interfaces allows you to abstract the implemetation completely while abstract classes allow partial abstraction as well.<\/p>\n<p><strong><em>Data abstraction<\/em><\/strong> spans from creating simple data objects to complex collection implementations such as <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/how-hashmap-works-in-java\/\">HashMap<\/a> or <code>HashSet<\/code>.<\/p>\n<p>Similarly, <strong><em>control abstraction<\/em><\/strong> can be seen from defining simple function calls to complete open source frameworks. control abstraction is main force behind <a title=\"Structured programming\" href=\"https:\/\/en.wikipedia.org\/wiki\/Structured_programming\">structured programming<\/a>.<\/p>\n<h4>3.1. Java abstraction example<\/h4>\n<p>Let&#8217;s see one more <strong>example of abstraction in Java using interfaces<\/strong>. In this example, I am creating various reports which can be run on demand at any time during application lifetime. As a consumer of the report, a class needs not to know the internal of report&#8217;s <code>run()<\/code>, it only should execute this method and report will be executed.<\/p>\n<pre><pre class=\"brush: java; title: Report.java; notranslate\" title=\"Report.java\">\nimport java.util.List;\n\npublic interface Report\n{\n    List&amp;amp;lt;Object&amp;amp;gt; run(ReportContext reportContext);\n}\n<\/pre><\/pre>\n<pre><pre class=\"brush: java; title: ReportContext.java; notranslate\" title=\"ReportContext.java\">\npublic class ReportContext {\n\t\/\/fields\n}\n<\/pre><\/pre>\n<pre><pre class=\"brush: java; title: EmployeeReport.java; notranslate\" title=\"EmployeeReport.java\">\nimport java.util.List;\n\npublic class EmployeeReport implements Report\n{\n    @Override\n    public List&amp;amp;lt;Object&amp;amp;gt; run(ReportContext reportContext) {\n        \/\/Custom Logic\n        System.out.println(&quot;Executing employee report&quot;);\n        return null;\n    }\n}\n<\/pre><\/pre>\n<pre><pre class=\"brush: java; title: SalaryReport.java; notranslate\" title=\"SalaryReport.java\">\nimport java.util.List;\n\npublic class SalaryReport implements Report\n{\n    @Override\n    public List&amp;amp;lt;Object&amp;amp;gt; run(ReportContext reportContext) {\n        \/\/Custom logic\n        System.out.println(&quot;Executing salary report&quot;);\n        return null;\n    }\n}\n<\/pre><\/pre>\n<p>Now execute the reports with <code>run()<\/code> method.<\/p>\n<pre><pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\npackage com.howtodoinjava.abstraction;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        ReportContext reportContext = new ReportContext();\n        \/\/Populate context\n\n        Report eReport = new EmployeeReport();\n        eReport.run(reportContext);\n\n        Report sReport = new EmployeeReport();\n        sReport.run(reportContext);\n    }\n}\n<\/pre><\/pre>\n<p>Program output.<\/p>\n<pre><pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\nExecuting employee report\nExecuting employee report\n<\/pre><\/pre>\n<p>\u00a0<\/p>\n<h2>4. Encapsulation vs Abstraction<\/h2>\n<blockquote>\n<p><code>Encapsulation<\/code> is realization of your desired <code>abstraction<\/code>.<\/p>\n<\/blockquote>\n<p>Abstraction is more about hiding the implementation details. In Java abstraction is achieved through abstract classes and interfaces.<\/p>\n<p>Encapsulation is about wrapping the implementation (code) and the data it manipulates (variables) within the same class. A Java class, where all instance variables are private and only the methods within the class can manipulate those variables, is an example of an encapsulated class.<\/p>\n<p>If you want to read more about abstract classes and interfaces in Java, follow my next post <a title=\"Exploring interfaces and abstract classes in java\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/exploring-interfaces-and-abstract-classes-in-java\/\">Exploring interfaces and abstract classes in java<\/a>.<\/p>\n<p>Happy Learning !!<\/p>\n\n\n<p><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In simple words, java abstraction captures only those details about an object that is relevant to the current perspective. Learn more about abstraction in java.<\/p>\n","protected":false},"author":2,"featured_media":4644,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1519,1454],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/04\/howtodoinjava_logo-e1434552355773.png",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/04\/howtodoinjava_logo-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/04\/howtodoinjava_logo-300x300.png",300,300,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/04\/howtodoinjava_logo-e1434552355773.png",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/04\/howtodoinjava_logo-e1434552355773.png",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/04\/howtodoinjava_logo-e1434552355773.png",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/04\/howtodoinjava_logo-e1434552355773.png",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/04\/howtodoinjava_logo-e1434552355773.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":7,"uagb_excerpt":"In simple words, java abstraction captures only those details about an object that is relevant to the current perspective. Learn more about abstraction in java.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/95"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=95"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/95\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4644"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=95"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=95"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=95"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}