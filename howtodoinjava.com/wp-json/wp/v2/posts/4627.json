{"id":4627,"date":"2015-03-19T11:09:54","date_gmt":"2015-03-19T11:09:54","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4627"},"modified":"2020-12-26T00:51:28","modified_gmt":"2020-12-25T19:21:28","slug":"tomcats-architecture-and-server-xml-configuration-tutorial","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/tomcat\/tomcats-architecture-and-server-xml-configuration-tutorial\/","title":{"rendered":"Tomcat &#8211; Architecture and server.xml configuration"},"content":{"rendered":"<p>We already learnt <strong><a href=\"https:\/\/howtodoinjava.com\/tomcat\/a-birds-eye-view-on-how-web-servers-work\/\" title=\"A birds-eye view on \u201chow web servers work?\u201d\" target=\"_blank\" rel=\"noopener noreferrer\">how webservers work<\/a><\/strong> in general when you deploy your web application on server and access from a browser. Now let&#8217;s learn the stuffs inside server which may not be used in day to day job, but they will certainly help you when you are configuring your application first time. I have been using <strong>tomcat server<\/strong> from long time so I am picking it for tutorial. I will try to share my learning on other servers in future whenever time permits.<\/p>\n<p><strong><a href=\"http:\/\/tomcat.apache.org\/\" title=\"tomcat\" target=\"_blank\" rel=\"noopener noreferrer\">Apache Tomcat<\/a><\/strong> is an open-source web server and servlet container developed by the Apache Software Foundation (ASF). Tomcat implements several Java EE specifications including Java Servlet, JavaServer Pages (JSP), Java EL, and WebSocket, and provides a &#8220;pure Java&#8221; HTTP web server environment for Java code to run in. [<a href=\"https:\/\/en.wikipedia.org\/wiki\/Apache_Tomcat\" title=\"wiki tomcat\" target=\"_blank\" rel=\"noopener noreferrer\">Wiki<\/a>]<\/p>\n<h2>Tomcat\u2019s Architecture<\/h2>\n<p><strong>Tomcat\u2019s architecture<\/strong> consists of a series of functional components that can be combined according to well-defined rules.<\/p>\n<figure id=\"attachment_4628\" aria-describedby=\"caption-attachment-4628\" style=\"width: 440px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture.jpg\" alt=\"Tomcat Architecture\" width=\"450\" height=\"335\" class=\"size-full wp-image-4628\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture.jpg 450w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture-300x223.jpg 300w\" sizes=\"(max-width: 450px) 100vw, 450px\" \/><figcaption id=\"caption-attachment-4628\" class=\"wp-caption-text\">Tomcat Architecture<\/figcaption><\/figure>\n<p>The structure of each server installation (via these functional components) is defined in the file <code>server.xml<\/code>, which is located in the <code>\/conf<\/code> subdirectory of <strong>Tomcat\u2019s installation folder<\/strong>. Let&#8217;s discuss these components in detail.<\/p>\n<h2>server.xml components<\/h2>\n<p>By default, <code>server.xml<\/code> file comes with this configuration and we will study it&#8217;s elements in detail.<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n&lt;?xml version='1.0' encoding='utf-8'?&gt;\r\n&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;\r\n   &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; \/&gt;\r\n   &lt;Listener className=&quot;org.apache.catalina.core.JasperListener&quot; \/&gt;\r\n   &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; \/&gt;\r\n   &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; \/&gt;\r\n   &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; \/&gt;\r\n   &lt;GlobalNamingResources&gt;\r\n     &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;\r\n               type=&quot;org.apache.catalina.UserDatabase&quot;\r\n               description=&quot;User database that can be updated and saved&quot;\r\n               factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;\r\n               pathname=&quot;conf\/tomcat-users.xml&quot; \/&gt;\r\n   &lt;\/GlobalNamingResources&gt;\r\n   &lt;Service name=&quot;Catalina&quot;&gt;\r\n     &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP\/1.1&quot;\r\n                connectionTimeout=&quot;20000&quot;\r\n                redirectPort=&quot;8443&quot; \/&gt;\r\n     &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP\/1.3&quot; redirectPort=&quot;8443&quot; \/&gt;\r\n     &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;\r\n       &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;\r\n         &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;\r\n                resourceName=&quot;UserDatabase&quot;\/&gt;\r\n       &lt;\/Realm&gt;\r\n       &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;\r\n             unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;\r\n         &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;\r\n                prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;\r\n                pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; \/&gt;\r\n       &lt;\/Host&gt;\r\n     &lt;\/Engine&gt;\r\n   &lt;\/Service&gt;\r\n&lt;\/Server&gt;\r\n<\/pre>\n<p>Let&#8217;s discuss the functional components of <strong>tomcat configuration file<\/strong> from inside to outside to better relate the things.<\/p>\n<h4><strong>Context<\/strong><\/h4>\n<p>A Context is the innermost element of a group of Tomcat components called containers, and it <strong>represents a single web application<\/strong>. Tomcat automatically instantiates and configures a standard context upon loading your application. As part of the configuration, Tomcat also processes the properties defined in the <code>\\WEB-INF\\web.xml<\/code> file of your application folder and makes them available to the application. <\/p>\n<h4><strong>Connector [Lines 16\u201319]<\/strong><\/h4>\n<p><strong>A Connector handles communications with the client.<\/strong>  There are multiple connectors available with Tomcat e.g. HTTP connector  for most of the HTTP traffic and AJP connector which implements the AJP protocol used when connecting Tomcat to another web server such as Apache HTTPD server.<\/p>\n<p>The default configuration of Tomcat includes a connector to handle HTTP communication. By default, this connector waits for requests coming through port <strong>8080<\/strong>. This is why the URLs of our examples always start with <code>http:\/\/localhost:8080\/<\/code>. Note that the requests for all applications go through a single instance of this connector. Each new request causes the instantiation of a new thread that remains alive within the connector for the duration of the request. Articles available on internet about Tomcat often refer to this connector as &#8220;<strong><code>Coyote<\/code><\/strong>&#8220;.<\/p>\n<p>The <strong><em>connectionTimeout<\/em><\/strong> attribute set to 20,000 means that a session is terminated after 5 hours, 33 minutes, and 20 seconds of inactivity, while <strong><em>redirectPort=&#8221;8443&#8243;<\/em><\/strong> means that incoming requests that require Secure Socket Layer (SSL) transport are redirected to port 8443.<\/p>\n<p>AJP connector lets Tomcat only handle dynamic web pages and lets a pure HTML server (e.g., the Apache Web Server) handle the requests for static pages. This maximizes the efficiency with which the requests are handled. You can probably comment out this connector as tomcat itself is pretty fast today OR simply if you don\u2019t plan on using a web server together with Tomcat.<\/p>\n<h4><strong>Host [Lines 25\u201330]<\/strong><\/h4>\n<p><strong>A Host is an association of a network name, e.g. www.yourdomain.com, to the Tomcat server.<\/strong> A host can contain any number of contexts (i.e. applications). You can define several hosts on the same server. For example, if you have registered the domain <code>yourdomain.com<\/code>, you can define host names such as <code>w1.yourdomain.com<\/code> and <code>w2.yourdomain.com<\/code>. Keep in mind that it will only be accessible from the Internet if a domain name server maps its name to the IP address of your computer. <\/p>\n<p>The default configuration of Tomcat includes the host named <strong>localhost<\/strong>. The association between <strong>localhost<\/strong> and your computer is done instead by writing an entry in the file <code>C:\\Windows\\System32\\drivers\\etc\\hosts<\/code>. <\/p>\n<p>The Host attribute &#8220;<strong><em>appBase<\/em><\/strong>&#8221; defines the application directory within the Tomcat installation folder. Each application is then identified by its path within that directory. The only exception is the path ROOT, which is mapped to the empty string. The application base directory for localhost is webapps. This means that the application in directory &#8220;<code>C:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\webapps\\ROOT\\<\/code>&#8221; is identified by the empty string. Therefore, its URL is &#8220;<code>http:\/\/localhost:8080\/<\/code>&#8220;. For other applications, which reside in directories other than ROOT, as in &#8220;<code>C:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\webapps\\myapp\\<\/code>&#8220;, the URL is like &#8220;<code>http:\/\/localhost:8080\/myapp\/<\/code>&#8220;.<\/p>\n<p>The attribute <strong><em>unpackWARs=&#8221;true&#8221;<\/em><\/strong> means that if you drop a WAR file in the <code>appBase<\/code> directory, Tomcat will automatically expand it into a normal folder. If you set this attribute to false, the application will run directly from the WAR file. This obviously means a slower execution of the application, because Tomcat needs to unzip the WAR file at execution time.<\/p>\n<p>The attribute <strong><em>autoDeploy=&#8221;true&#8221;<\/em><\/strong> means that if you drop an application in the <code>appBase<\/code> directory while Tomcat is running, it will be deployed automatically.<\/p>\n<h4><strong>Engine [Line 20]<\/strong><\/h4>\n<p><strong>An Engine represents request processing pipeline for a specific Service.<\/strong> As a Service may have multiple Connectors, the Engine receives and processes all requests from these connectors, handing the response back to the appropriate connector for transmission to the client.<\/p>\n<p>An engine must contain one or more hosts, one of which is designated as the default host. The default Tomcat configuration includes the engine Catalina, which contains the host localhost (obviously designated to be the default host because it is the only one). The Catalina engine handles all incoming requests received via the HTTP connector and sends back the corresponding responses. It forwards each request to the correct host and context on the basis of the information contained in the request header.<\/p>\n<h4><strong>Service [Line 15]<\/strong><\/h4>\n<p><strong>A Service is an intermediate component which lives inside a Server and ties one or more Connectors to exactly one Engine.<\/strong> Tomcat\u2019s default configuration includes the service Catalina which associates the HTTP and AJP connectors to the Catalina engine. Accordingly, Connector and Engine are subelements of the Service element.<\/p>\n<p>The Service element is rarely customized by users, as the default implementation is simple and sufficient.<\/p>\n<h4><strong>Server [Line 2]<\/strong><\/h4>\n<p><strong>The Server is the top component and represents an instance of Tomcat.<\/strong> It can contain one or more services, each with its own engine and connectors.<\/p>\n<p>Now let&#8217;s discuss few other concepts used in above <code>server.xml<\/code>.<\/p>\n<h4><strong>Listener [Line 3-7]<\/strong><\/h4>\n<p>A Listener is a Java object that, by implementing the <code>org.apache.catalina.LifecycleListener<\/code> interface, is able to respond to specific events.<\/p>\n<ul>\n<li><strong>AprLifecycleListener<\/strong> : enables the Apache Portable Runtime (APR) library. This library provides OS level support to tomcat.<\/li>\n<li><strong>JasperListener<\/strong> : enables Jasper, which is the JSP engine. This listener is what makes it possible to recompile JSP documents that have been updated.<\/li>\n<li><strong>JreMemoryLeakPreventionListener<\/strong> : deal with different known situations that can cause memory leaks.<\/li>\n<li><strong>GlobalResourcesLifecycleListener<\/strong> : is responsible for instantiating the managed beans associated with global Java Naming and Directory Interface (JNDI).<\/li>\n<li><strong>ThreadLocalLeakPreventionListener<\/strong> : also deal with different known situations that can cause memory leaks.<\/li>\n<\/ul>\n<h4><strong>Global Naming Resources<\/strong><\/h4>\n<p>The <code>GlobalNamingResources<\/code> element can only be defined inside the Server component. <strong>It defines JNDI resources that are accessible throughout the server.<\/strong> The only resource defined in the default <code>server.xml<\/code> is a user and password memory-based database defined via the file <code>conf\/tomcat-users.xml<\/code>.<\/p>\n<h4><strong>Realm [Line 21-24]<\/strong><\/h4>\n<p>The Realm component can appear inside any container component (Engine, Host, and Context). <strong>It represents a database of users, passwords, and user roles. Its purpose is to support container-based authentication.<\/strong> <\/p>\n<p>Beside <code>UserDatabaseRealm<\/code>, the following realm classes are available: <code>JDBCRealm<\/code> (to connect to a relational database via its JDBC driver), <code>DataSourceRealm<\/code> (to connect to a JDBC data source named via JNDI), <code>JNDIRealm<\/code> (to connect to a Lightweight Directory Access Protocol directory), and <code>MemoryRealm<\/code> (to load an XML file in memory).<\/p>\n<h4><strong>Valve [Line 27-29]<\/strong><\/h4>\n<p>A Valve is an interceptor like element that, when inserted in a Container (Context, Host, or Engine), <strong>intercepts all the incoming HTTP requests before they reach the application<\/strong>. This gives you the ability to preprocess the requests directed to a particular application; to the applications running in a virtual host OR to all the applications running within an engine.<\/p>\n<p>There can be multiple usage of valves e.g. <\/p>\n<p>The <code>RemoteAddrValve<\/code> valve lets you selectively allow or block requests on the basis of their source IP address. It support two attributes &#8211; allow and block.<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; block=&quot;192\\.168.*&quot;\/&gt;<\/pre>\n<p>The <code>RemoteHostValve<\/code> valve operates like remote address filter but on client host names instead of client IP addresses.<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteHostValve&quot; deny=&quot;.*badweb\\.com&quot;\/&gt;<\/pre>\n<p>The <code>RequestDumperValve<\/code> logs details of the incoming requests and therefore is useful for debugging purposes. <\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;Valve className=&quot;org.apache.catalina.valves.RequestDumperValve&quot;\/&gt;<\/pre>\n<p>The <code>single sign on valve<\/code>, when included in a Host container, has the effect of requiring only one authentication for all the applications of that host. Without this valve, the user would have to enter his ID and password before using each separate application.<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;Valve className=&quot;org.apache.catalina.valves.SingleSignOn&quot;\/&gt;<\/pre>\n<p>That&#8217;s all for this limited introduction of elements inside <code>server.xml<\/code>. I will cover more tasks\/concepts related to tomcat server in future. <\/p>\n<p><strong>Happy Learning !!<\/strong><\/p>\n<p><strong>Reference :<\/strong> <a href=\"http:\/\/tomcat.apache.org\/tomcat-7.0-doc\/architecture\/overview.html\" title=\"overview\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/tomcat.apache.org\/tomcat-7.0-doc\/architecture\/overview.html<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>We already learnt how webservers work in general when you deploy your web application on server and access from a browser. Now let&#8217;s learn the stuffs inside server which may not be used in day to day job, but they will certainly help you when you are configuring your application first time. I have been &#8230; <a title=\"Tomcat &#8211; Architecture and server.xml configuration\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/tomcat\/tomcats-architecture-and-server-xml-configuration-tutorial\/\" aria-label=\"More on Tomcat &#8211; Architecture and server.xml configuration\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4628,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[742],"tags":[511],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture.jpg",450,335,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture-300x223.jpg",300,223,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture.jpg",450,335,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture.jpg",450,335,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture.jpg",450,335,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture.jpg",450,335,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/03\/Tomcat-Architechture.jpg",120,89,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":9,"uagb_excerpt":"We already learnt how webservers work in general when you deploy your web application on server and access from a browser. Now let&#8217;s learn the stuffs inside server which may not be used in day to day job, but they will certainly help you when you are configuring your application first time. I have been&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4627"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4627"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4627\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4628"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4627"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4627"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4627"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}