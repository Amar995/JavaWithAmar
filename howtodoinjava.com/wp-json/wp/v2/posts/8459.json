{"id":8459,"date":"2017-06-28T15:32:15","date_gmt":"2017-06-28T10:02:15","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=8459"},"modified":"2022-01-29T23:32:35","modified_gmt":"2022-01-29T18:02:35","slug":"java-inheritance","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/java-inheritance\/","title":{"rendered":"Guide to Inheritance"},"content":{"rendered":"<p><strong>Inheritance<\/strong> in java (IS-A relationship) is referred to the ability where child objects inherit or acquire all the properties and behaviors from parent object. In object oriented programming, inheritance is used to promote the code re-usability. <\/p>\n<p>In this Java tutorial, we will learn about <strong>inheritance types<\/strong> supported in Java  and <strong>how inheritance is achieved<\/strong> in Java applications.<\/p>\n<pre>Table of Contents\r\n\r\n1. <a href=\"#inheritance-details\">What is inheritance<\/a>\r\n2. <a href=\"#types\">Types of Inheritance in Java<\/a>\r\n    - 2.1. <a href=\"#single\">Single Inheritance<\/a>\r\n    - 2.2. <a href=\"#multilevel\">Multilevel Inheritance<\/a>\r\n    - 2.3. <a href=\"#hierarchical\">Hierarchical Inheritance<\/a>\r\n    - 2.4. <a href=\"#multiple\">Multiple inheritance<\/a>\r\n3. <a href=\"#member-access\">Accessing Inherited Super Class Members<\/a>\r\n    - 3.1. <a href=\"#constructors\">Constructors<\/a>\r\n    - 3.2. <a href=\"#fields\">Fields<\/a>\r\n    - 3.3. <a href=\"#methods\">Methods<\/a>\r\n4. <a href=\"#summary\">Summary<\/a><\/pre>\n<p><a id=\"inheritance-details\"><\/a><\/p>\n<h2>1. What is inheritance in Java<\/h2>\n<p>As said before, inheritance is all about inheriting the <strong>common state and behavior<\/strong> of parent class (super class) by it&#8217;s derived class (sub class or child class). A sub class can inherit all <strong>non-private members<\/strong> from super class, by default.<\/p>\n<p>In java, <strong>extends<\/strong> keyword is used for inheritance between classes. let&#8217;s see a quick inheritance example.<\/p>\n<h4>1.1. Java inheritance example<\/h4>\n<p>Let&#8217;s say we have <code>Employee<\/code> class. Employee class has all common attributes and methods which all employees must have within organization. There can be other specialized employees as well e.g. <code>Manager<\/code>. Managers are regular employees of organization but, additionally, they have few more attributes over other employees e.g. they have reportees or subordinates.<\/p>\n<p>Let&#8217;s design above classes.<\/p>\n<pre class=\"brush: java; title: Employee.java; notranslate\" title=\"Employee.java\">\r\npublic class Employee \r\n{   \r\n    private Long id;\r\n    private String firstName;\r\n    private String lastName;\r\n    \r\n    public Long getId() {\r\n        return id;\r\n    }\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n    public String getFirstName() {\r\n        return firstName;\r\n    }\r\n    public void setFirstName(String firstName) {\r\n        this.firstName = firstName;\r\n    }\r\n    public String getLastName() {\r\n        return lastName;\r\n    }\r\n    public void setLastName(String lastName) {\r\n        this.lastName = lastName;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return &quot;Employee [id=&quot; + id + &quot;, firstName=&quot; + firstName + &quot;, lastName=&quot; + lastName + &quot;]&quot;;\r\n    }\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: Manager.java; notranslate\" title=\"Manager.java\">\r\nimport java.util.List;\r\n\r\npublic class Manager extends Employee \r\n{\r\n    private List&lt;Employee&gt; subordinates;\r\n\r\n    public List&lt;Employee&gt; getSubordinates() {\r\n        return subordinates;\r\n    }\r\n\r\n    public void setSubordinates(List&lt;Employee&gt; subordinates) {\r\n        this.subordinates = subordinates;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return &quot;Manager [subordinates=&quot; + subordinates + &quot;, details=&quot; + super.toString() + &quot;]&quot;;\r\n    }\r\n}\r\n<\/pre>\n<p>In above implementation, employees have common attributes like <code>id<\/code>, <code>firstName<\/code> and <code>lastName<\/code>; while manager has it&#8217;s specialized <code>subordinates<\/code> attribute only. To inherit all non-private members from <code>Employee<\/code> class (in this case getter and setter methods), <code>Manager extends Employee<\/code> is used.<\/p>\n<p>Let&#8217;s see how it works?<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Manager mgr = new Manager();\r\n\r\n        mgr.setId(1L);\r\n        mgr.setFirstName(&quot;Lokesh&quot;);\r\n        mgr.setLastName(&quot;Gupta&quot;);\r\n        \r\n        System.out.println(mgr);\r\n    }\r\n}\r\n<\/pre>\n<p>Program Output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nManager [subordinates=null, details=Employee [id=1, firstName=Lokesh, lastName=Gupta]]\r\n<\/pre>\n<p>Clearly, <code>Manager<\/code> class is able to use members of <code>Employee<\/code> class. This very behavior is called inheritance. Simple, isn&#8217;t it?<\/p>\n<p>Now consider if we do not use inheritance. Then we would have defined id, firstName and lastName in both classes. It would have caused code duplication which always create problems in code maintenance.<\/p>\n<p><a id=\"types\"><\/a><\/p>\n<h2>2. Types of inheritance in Java<\/h2>\n<p>In Java, inheritance can be one of <strong>four types<\/strong> &#8211; depending on classes hierarchy. Let&#8217;s learn about all four types of inheritances.<\/p>\n<p><a id=\"single\"><\/a><\/p>\n<h4>2.1. Single inheritance<\/h4>\n<p>This one is simple. There is one Parent class and one Child class. <strong>One child class extends one parent class<\/strong>. It&#8217;s single inheritance. The above example code (employee and manager) is example of single inheritance.<\/p>\n<figure id=\"attachment_8460\" aria-describedby=\"caption-attachment-8460\" style=\"width: 346px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png\" alt=\"Java Single Inheritance\" width=\"356\" height=\"296\" class=\"size-full wp-image-8460\" \/><figcaption id=\"caption-attachment-8460\" class=\"wp-caption-text\">Java Single Inheritance<\/figcaption><\/figure>\n<p><a id=\"multilevel\"><\/a><\/p>\n<h4>2.2. Multi-level inheritance<\/h4>\n<p>In multilevel inheritance, there will be inheritance between more than three classes in such a way that a <strong>child class will act as parent class for another child class<\/strong>. Let&#8217;s understand with a diagram.<\/p>\n<figure id=\"attachment_8461\" aria-describedby=\"caption-attachment-8461\" style=\"width: 328px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Multilevel-Inheritance.png\" alt=\"Multilevel Inheritance\" width=\"338\" height=\"425\" class=\"size-full wp-image-8461\" \/><figcaption id=\"caption-attachment-8461\" class=\"wp-caption-text\">Multilevel Inheritance<\/figcaption><\/figure>\n<p>In above example, Class <code>B<\/code> extends class <code>A<\/code>, so class <code>B<\/code> is child class of class <code>A<\/code>. But <code>C<\/code> extends <code>B<\/code>, so <code>B<\/code> is parent class of <code>C<\/code>. So <code>B<\/code> is parent class as well as child class also.<\/p>\n<p><a id=\"hierarchical\"><\/a><\/p>\n<h4>2.3. Hierarchical inheritance<\/h4>\n<p>In hierarchical inheritance, there is <strong>one super class and more than one sub classes<\/strong> extend the super class.<\/p>\n<figure id=\"attachment_8462\" aria-describedby=\"caption-attachment-8462\" style=\"width: 375px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Hierarchical-Inheritance.png\" alt=\"Hierarchical Inheritance\" width=\"385\" height=\"296\" class=\"size-full wp-image-8462\" \/><figcaption id=\"caption-attachment-8462\" class=\"wp-caption-text\">Hierarchical Inheritance<\/figcaption><\/figure>\n<p>These subclasses <code>B<\/code>, <code>C<\/code>, <code>D<\/code> will share the common members inherited from <code>A<\/code>, but they will not be aware of members from each other.<\/p>\n<p><a id=\"multiple\"><\/a><\/p>\n<h4>2.4. Multiple inheritance<\/h4>\n<p>In multiple inheritance, a class can <strong>inherit the behavior from more than one parent classes<\/strong> as well. Let&#8217;s understand with diagram.<\/p>\n<figure id=\"attachment_8463\" aria-describedby=\"caption-attachment-8463\" style=\"width: 545px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Multiple-inheritance.png\" alt=\"Multiple inheritance\" width=\"555\" height=\"368\" class=\"size-full wp-image-8463\" \/><figcaption id=\"caption-attachment-8463\" class=\"wp-caption-text\">Multiple inheritance<\/figcaption><\/figure>\n<p>In diagram, <code>D<\/code> is extending class <code>A<\/code> and <code>B<\/code>, both. In this way, <code>D<\/code> can inherit the non-private members of both the classes.<\/p>\n<p>BUT, in java, you cannot use <code>extends<\/code> keyword with two classes. So, how multiple inheritance will work?<\/p>\n<blockquote><p>Till JDK 1.7, multiple inheritance was not possible in java. But <strong>from JDK 1.8 onwards, <a href=\"https:\/\/howtodoinjava.com\/java\/oops\/multiple-inheritance-in-java\/\">multiple inheritance<\/a> is possible via use of interfaces with default methods<\/strong>.<\/p><\/blockquote>\n<p><a id=\"member-access\"><\/a><\/p>\n<h2>3. Accessing inherited parent class members<\/h2>\n<p>Now we know that using four types of inheritance mechanisms, we can access non-private members of parent classes. Let&#8217;s see how individual member can be accessed.<\/p>\n<p><a id=\"constructors\"><\/a><\/p>\n<h4>3.1. Parent class constructors<\/h4>\n<p>Constructors of super class can be called via <code>super<\/code> keyword. There are only two rules:<\/p>\n<ol>\n<li><code>super()<\/code> call must be made from child class constructor.<\/li>\n<li><code>super()<\/code> call must be first statement inside constructor.<\/li>\n<\/ol>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class Manager extends Employee \r\n{\r\n    public Manager() \r\n    {\r\n        \/\/This must be first statement inside constructor\r\n        super();\r\n        \r\n        \/\/Other code after super class\r\n    }\r\n}\r\n<\/pre>\n<p><a id=\"fields\"><\/a><\/p>\n<h4>3.2. Parent class fields<\/h4>\n<p>In java, non-private member fields can be inherited in child class. You can access them using dot operator e.g. <code>manager.id<\/code>. Here <code>id<\/code> attribute is inherited from parent class <code>Employee<\/code>.<\/p>\n<p>You need to be careful when dealing with fields with same name in parent and child class. Remember that <strong>java fields cannot be overridden<\/strong>. Having same name field will hide the field from parent class &#8211; while accessing via child class.<\/p>\n<p>In this case, attribute accessed will be decided based on the <strong>class of reference type<\/strong>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">ReferenceClass variable = new ActualClass();<\/pre>\n<p>In above case, member field will be accessed from <code>ReferenceClass<\/code>. e.g.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/Parent class\r\npublic class Employee \r\n{   \r\n    public Long id = 10L;\r\n}\r\n\r\n\/\/Child class\r\npublic class Manager extends Employee \r\n{\r\n    public Long id = 20L;   \/\/same name field\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) \r\n    {\r\n        Employee manager = new Manager();\r\n        System.out.println(manager.id);     \/\/Reference of type Employee\r\n        \r\n        Manager mgr = new Manager();\r\n        System.out.println(mgr.id);     \/\/Reference of type Manager\r\n    }\r\n}\r\n\r\nOutput:\r\n\r\n10\r\n20\r\n<\/pre>\n<p><a id=\"methods\"><\/a><\/p>\n<h4>3.3. Parent class methods<\/h4>\n<p>Opposite to field access, method access uses the type of actual object created in runtime.<\/p>\n<p>java]ReferenceClass variable = new ActualClass();[\/java]<\/p>\n<p>In above case, member method will be accessed from <code>ActualClass<\/code>. e.g.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class Employee \r\n{   \r\n    private Long id = 10L;\r\n    \r\n    public Long getId() {\r\n        return id;\r\n    }\r\n}\r\n\r\npublic class Manager extends Employee \r\n{\r\n    private Long id = 20L;\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n}\r\n\r\npublic class Main \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Employee employee = new Employee();     \/\/Actual object is Employee Type\r\n        System.out.println(employee.getId());\r\n        \r\n        Employee manager = new Manager();       \/\/Actual object is Manager Type\r\n        System.out.println(manager.getId());\r\n        \r\n        Manager mgr = new Manager();       \/\/Actual object is Manager Type\r\n        System.out.println(mgr.getId());\r\n    }\r\n}\r\n\r\nOutput:\r\n\r\n10\r\n20\r\n20\r\n<\/pre>\n<p><a id=\"summary\"><\/a><\/p>\n<h2>4. Summary<\/h2>\n<p>Let&#8217;s summarize what we learned about <strong>java inheritance<\/strong>:<\/p>\n<ul>\n<li>Inheritance is also known <strong>IS-A<\/strong> relationship.<\/li>\n<li>It provides child class the ability to inherit non-private members of parent class.<\/li>\n<li>In java, inheritance is achieved via <code>extends<\/code> keyword.<\/li>\n<li>From <a href=\"\/\/howtodoinjava.com\/java-8-tutorial\/\">Java 8<\/a> onward, you can use interfaces with default methods to achieve multiple inheritance.<\/li>\n<li>Member fields are accessed from reference type class.<\/li>\n<li>Member methods are accessed from actual instance types.<\/li>\n<\/ul>\n<p>Drop me any question, you might have, in comments section.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Inheritance in java (IS-A relationship) is referred to the ability where child objects inherit or acquire all the properties and behaviors from parent object. In object oriented programming, inheritance is used to promote the code re-usability.<\/p>\n","protected":false},"author":2,"featured_media":8460,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1517,1454],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png",356,296,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png",150,125,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png",300,249,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png",356,296,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png",356,296,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png",356,296,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png",356,296,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/06\/Single-Inheritance-Example.png",120,100,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":3,"uagb_excerpt":"Inheritance in java (IS-A relationship) is referred to the ability where child objects inherit or acquire all the properties and behaviors from parent object. In object oriented programming, inheritance is used to promote the code re-usability.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/8459"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=8459"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/8459\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/8460"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=8459"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=8459"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=8459"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}