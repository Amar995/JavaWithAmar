{"id":11149,"date":"2018-08-15T00:55:30","date_gmt":"2018-08-14T19:25:30","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=11149"},"modified":"2022-01-25T01:59:21","modified_gmt":"2022-01-24T20:29:21","slug":"java-wrapper-classes","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/java-wrapper-classes\/","title":{"rendered":"Java Wrapper Classes, Autoboxing and Unboxing"},"content":{"rendered":"\n<p>Learn about <strong>Java wrapper classes<\/strong>, their usage, conversion between primitives and objects; and autoboxing and unboxing with examples.<\/p>\n\n\n\n<h2>1. Java Wrapper Classes<\/h2>\n\n\n\n<p>In Java, we have <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/primitive-data-types-in-java\/\">8 primitive data types<\/a>. Java provides <strong>type wrappers<\/strong>, which are classes that encapsulate a primitive type within an Object.<\/p>\n\n\n\n<ul><li>A wrapper class wraps (encloses) around a primitive datatype and gives it an object appearance. Wherever the primitive datatype is required as an object type, this type wrapper can be used.<\/li><li>Wrapper classes include methods to unwrap the object and give back the data type.<\/li><li>The <i>type wrappers<\/i> classes are part of <i>java.lang<\/i> package.<\/li><li>Each primitive type has a corresponding wrapper class.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"mtr-table mtr-tr-th\"><tbody><tr><th data-mtr-content=\"Primitive Type\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Primitive Type<\/div><\/th><th data-mtr-content=\"Wrapper Class\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Wrapper Class<\/div><\/th><\/tr><tr><td data-mtr-content=\"Primitive Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">double<\/div><\/td><td data-mtr-content=\"Wrapper Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Double<\/div><\/td><\/tr><tr><td data-mtr-content=\"Primitive Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">float<\/div><\/td><td data-mtr-content=\"Wrapper Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Float<\/div><\/td><\/tr><tr><td data-mtr-content=\"Primitive Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">long<\/div><\/td><td data-mtr-content=\"Wrapper Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Long<\/div><\/td><\/tr><tr><td data-mtr-content=\"Primitive Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">int<\/div><\/td><td data-mtr-content=\"Wrapper Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Integer<\/div><\/td><\/tr><tr><td data-mtr-content=\"Primitive Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">short<\/div><\/td><td data-mtr-content=\"Wrapper Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Short<\/div><\/td><\/tr><tr><td data-mtr-content=\"Primitive Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">byte<\/div><\/td><td data-mtr-content=\"Wrapper Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Byte<\/div><\/td><\/tr><tr><td data-mtr-content=\"Primitive Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">char<\/div><\/td><td data-mtr-content=\"Wrapper Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Character<\/div><\/td><\/tr><tr><td data-mtr-content=\"Primitive Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">boolean<\/div><\/td><td data-mtr-content=\"Wrapper Class\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Boolean<\/div><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>2. When to use Wrapper Classes<\/h2>\n\n\n\n<p>Java wrapper classes are used in scenarios &#8211;<\/p>\n\n\n\n<ul><li>When two methods wants to refer to the same instance of an primitive type, then pass wrapper class as <strong>method arguments<\/strong>.<\/li><li>Java <strong>Generics works only with object types<\/strong> and does not support primitive types.<\/li><li>Java <strong>Collections deal only with objects<\/strong>; to store a primitive type in one of these classes, you need to wrap the primitive type in a class.<\/li><li>When you want to refer <code>null<\/code> from data type, the you need object. <strong>Primitives cannot have <code>null<\/code><\/strong> as value.<\/li><\/ul>\n\n\n\n<h2>3. Conversions<\/h2>\n\n\n\n<h4>3.1. Converting Primitive Types to Wrapper Classes<\/h4>\n\n\n\n<p>There are two ways for converting a primitive type into an instance of the corresponding wrapper class &#8211;<\/p>\n\n\n\n<ol><li>Using <strong>constrcutors<\/strong><\/li><li>Using <strong>static factory methods<\/strong><\/li><\/ol>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/ 1. using constructor\r\nInteger object = new Integer(10);\r\n\r\n\/\/ 2. using static factory method\r\nInteger anotherObject = Integer.valueOf(10);<\/code><\/pre>\n\n\n\n<p>In the above example, the <i>valueOf()<\/i> method is a static factory method that returns an instance of <code>Integer<\/code> class representing the specified <code>int<\/code> value.<\/p>\n\n\n\n<p>Similarly, we can convert the other primitive types like <code>boolean<\/code> to <code>Boolean<\/code>, <code>char<\/code> to <code>Character<\/code>, <code>short<\/code> to <code>Short<\/code>, etc.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Java wrapper classes use <a href=\"https:\/\/howtodoinjava.com\/java-examples\/internal-cache-wrapper-classes\/\">internal caching<\/a> which returns internally cached values upto a limit. This internal caching of instances makes the wrapper classes more efficient in perfomance and memory unilization.<\/p><\/blockquote>\n\n\n\n<h4>3.2. Converting Wrapper Class to Primitive Type<\/h4>\n\n\n\n<p>Converting from wrapper class to primitive type is simple. We can use the corresponding instance methods to get the primitive type. e.g. <strong>intValue()<\/strong>, <strong>doubleValue()<\/strong>, <strong>shortValue()<\/strong> etc.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Integer object = new Integer(10);\r\n\r\nint val = object.intValue();\t\/\/wrapper to primitive<\/code><\/pre>\n\n\n\n<h2>4. Autoboxing and Unboxing<\/h2>\n\n\n\n<p>Beginning with JDK 5, Java added two important features:<\/p>\n\n\n\n<ul><li>Autoboxing<\/li><li>Auto-Unboxing<\/li><\/ul>\n\n\n\n<h4>4.1. Autoboxing<\/h4>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Autoboxing is the <strong>automatic conversion of the primitive types into their corresponding wrapper class<\/strong>.<\/p><\/blockquote>\n\n\n\n<p>For example, converting an <code>int<\/code> to an <code>Integer<\/code>, a <code>char<\/code> to a <code>Character<\/code>, and so on.<\/p>\n\n\n\n<p>We can simply pass or assign a primitive type to an argument or reference accepting wrapper class type.<\/p>\n\n\n\n<h6>Java Autoboxing Example<\/h6>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\rList&lt;Integer> integerList = new ArrayList&lt;>();\r\n\r\nfor (int i = 1; i &lt; 10; i ++)\r\n{\r\n    integerList.add(i);\t\t\/\/int to Integer\r\n}<\/code><\/pre>\n\n\n\n<p>In given example, <code>integerList<\/code> is a <code>List<\/code> of <code>Integer<\/code>s. It is not a list of primitive type int values.<\/p>\n\n\n\n<p>Here compiler automatically creates an <code>Integer<\/code> object from <code>int<\/code> and adds the object to <code>integerList<\/code>. Thus, the previous code turns into the following at runtime:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;Integer> integerList = new ArrayList&lt;>();\n\nfor (int i = 1; i &lt; 10; i ++)\n{\n      integerList.add(Integer.valueOf(i));\t\t\/\/autoboxing\n}<\/code><\/pre>\n\n\n\n<h4>4.2. Unboxing<\/h4>\n\n\n\n<p><b>Unboxing<\/b> happens <strong>when the conversion happens from wrapper class to its corresponding primitive type<\/strong>. It means we can pass or assign a wrapper object to an argument or reference accepting primitive type.<\/p>\n\n\n\n<h6>Java Unboxing Example<\/h6>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public static int sumOfEven(List&lt;Integer> integerList)\r\n{\r\n    int sum = 0;\r\n    for (Integer i: integerList) {\r\n    \tif (i % 2 == 0)\r\n            sum += i;\t\t\t\/\/Integer to int\r\n    }\r\n    return sum;\r\n}<\/code><\/pre>\n\n\n\n<p>In the above example, the remainder (<code>%) and unary plus (+=) operators do<\/code> not apply on Integer objects. The compiler automatically converts an Integer to an int at runtime by invoking the <code>intValue()<\/code> method.<\/p>\n\n\n\n<p>Autoboxing and unboxing lets developers write <strong>cleaner code<\/strong>, make it easier to read.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn about Java wrapper classes, their usage, conversion between primitives and objects; and autoboxing and unboxing with examples. 1. Java Wrapper Classes In Java, we have 8 primitive data types. Java provides type wrappers, which are classes that encapsulate a primitive type within an Object. A wrapper class wraps (encloses) around a primitive datatype and &#8230; <a title=\"Java Wrapper Classes, Autoboxing and Unboxing\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-wrapper-classes\/\" aria-label=\"More on Java Wrapper Classes, Autoboxing and Unboxing\">Read more<\/a><\/p>\n","protected":false},"author":11,"featured_media":7944,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[754,1502],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/05\/java-amp-logo.jpg",700,550,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/05\/java-amp-logo-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/05\/java-amp-logo-300x236.jpg",300,236,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/05\/java-amp-logo.jpg",700,550,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/05\/java-amp-logo.jpg",700,550,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/05\/java-amp-logo.jpg",700,550,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/05\/java-amp-logo.jpg",700,550,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/05\/java-amp-logo.jpg",120,94,false]},"uagb_author_info":{"display_name":"Shailender","author_link":"https:\/\/howtodoinjava.com\/author\/dshailender24\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn about Java wrapper classes, their usage, conversion between primitives and objects; and autoboxing and unboxing with examples. 1. Java Wrapper Classes In Java, we have 8 primitive data types. Java provides type wrappers, which are classes that encapsulate a primitive type within an Object. A wrapper class wraps (encloses) around a primitive datatype and&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/11149"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/11"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=11149"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/11149\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/7944"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=11149"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=11149"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=11149"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}