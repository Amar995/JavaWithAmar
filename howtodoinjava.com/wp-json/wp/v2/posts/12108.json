{"id":12108,"date":"2018-11-13T13:02:30","date_gmt":"2018-11-13T07:32:30","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=12108"},"modified":"2022-01-29T23:30:48","modified_gmt":"2022-01-29T18:00:48","slug":"extends-vs-implements","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/extends-vs-implements\/","title":{"rendered":"Java extends vs implements Keywords"},"content":{"rendered":"<p>In Java, <strong>extends<\/strong> is used for extending a class and <strong>implements<\/strong> is used for implementing the interfaces. It&#8217;s the main <strong>difference between extends vs implements<\/strong>.<\/p>\n<h2>1. extends keyword<\/h2>\n<p>In Java, we can inherit the fields and methods of a class by extending it using <strong>extends keyword<\/strong>. Please note that in Java, a class can extend maximum one class only.<\/p>\n<p>Take the example of <code><a href=\"https:\/\/howtodoinjava.com\/java-arraylist\/\">ArrayList<\/a><\/code> class. It extends <code>AbstractList<\/code> class which in turn extends <code>AbstractCollection<\/code> class.<\/p>\n<p>So essentially ArrayList class has methods and behaviors of both it&#8217;s parent classes AbstractList and AbstractCollection. <\/p>\n<p>AbstractCollection provides methods like contains(Object o), toArray(), remove(Object o) etc. While AbstractList class provides add(), indexOf(), lastIndexOf(), clear() etc. Some of the methods are overridden by ArrayList again.<\/p>\n<pre class=\"brush: java; title: ArrayList.java; notranslate\" title=\"ArrayList.java\">\r\npublic class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;\r\n        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable\r\n{\r\n\t\/\/code\r\n}\r\n<\/pre>\n<h4>Java extends example<\/h4>\n<p>Let&#8217;s create something from scratch to better understand how Java inheritance using <code>extends<\/code> keyword works. I have created two classes &#8211; <code>ParentClass<\/code> and <code>ChildClass<\/code>, where <strong>ChildClass extends ParentClass<\/strong>.<\/p>\n<pre class=\"brush: java; title: ParentClass.java; notranslate\" title=\"ParentClass.java\">\r\npublic class ParentClass {\r\n\t\r\n\tpublic int dataVal = 100;\r\n\t\r\n\tpublic int getDataVal() {\r\n\t\treturn this.dataVal;\r\n\t}\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: ChildClass.java; notranslate\" title=\"ChildClass.java\">\r\npublic class ChildClass extends ParentClass \r\n{\r\n\t\r\n}\r\n<\/pre>\n<p>I have not added any field or method to <code>ChildClass<\/code> just to show that even if we don&#8217;t add anything to it, it still has behavior of it&#8217;s parent class.<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main \r\n{\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\tChildClass child = new ChildClass();\r\n\t\t\r\n\t\tSystem.out.println( child.dataVal );\r\n\t\tSystem.out.println( child.getDataVal() );\r\n\t}\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n100\r\n100\r\n<\/pre>\n<h2>2. implements keyword<\/h2>\n<p>Interfaces are way to enforce a contract in Java. They force the implementing class to provide a certain behavior. To implement an interface, class must use <strong>implements keyword<\/strong>.<\/p>\n<p>In Java, we can implement more than one interfaces. In this case, class must implement all the methods from all the interfaces. (or declare itself <a href=\"https:\/\/howtodoinjava.com\/java\/keywords\/abstract-keyword\/\">abstract<\/a>).<\/p>\n<p>Look at the ArrayList class declaration one more time. It implements 4 interfaces i.e. <code>List<\/code>, <code>RandomAccess<\/code>, <code>Cloneable<\/code> and <code><a href=\"https:\/\/howtodoinjava.com\/java\/serialization\/externalizable-vs-serializable\/\">Serializable<\/a><\/code>. It has implemented all the methods in given interfaces.<\/p>\n<h4>Java implements example<\/h4>\n<p>Similar to previous example, lets create something basic to understand how interface implementations look like. I have created two interfaces <code>Movable<\/code> and <code>Swimmable<\/code>. Both interfaces define one method.<\/p>\n<p>A class <code>Human<\/code> implement both interfaces so it MUST implement the methods defined in both interfaces.<\/p>\n<pre class=\"brush: java; title: Movable.java; notranslate\" title=\"Movable.java\">\r\npublic interface Movable {\r\n\t\r\n\tpublic void move();\r\n}\r\n<\/pre>\n<pre class=\"brush: java; title: Swimmable.java; notranslate\" title=\"Swimmable.java\">\r\npublic interface Swimmable\r\n{\r\n\tpublic void swim();\r\n}\r\n\r\n<\/pre>\n<pre class=\"brush: java; title: Human.java; notranslate\" title=\"Human.java\">\r\npublic class Human implements Movable, Swimmable \r\n{\r\n\t@Override\r\n\tpublic void swim() {\r\n\t\tSystem.out.println(&quot;I am swimming&quot;);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void move() {\r\n\t\tSystem.out.println(&quot;I am moving&quot;);\r\n\t}\r\n}\r\n<\/pre>\n<p>Now we will test the human class and it&#8217;s enforced behavior.<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main \r\n{\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\tHuman obj = new Human();\r\n\t\t\r\n\t\tobj.move();\r\n\t\tobj.swim();\r\n\t}\r\n}\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nI am moving\r\nI am swimming\r\n<\/pre>\n<p>Clearly, Human class implemented both interfaces and defined their behavior. That&#8217;s whole purpose of interfaces in Java.<\/p>\n<h2>3. Differences between extends vs implements<\/h2>\n<p>Based on above examples, let&#8217;s list down the <strong>differences between extends and implements keywords in Java<\/strong>.<\/p>\n<ol>\n<li>extends keyword is used to inherit a class; while implements keyword is used to inherit the interfaces.<\/li>\n<li>A class can extend only one class; but can implement any number of interfaces.<\/li>\n<li>A subclass that extends a superclass may override some of the methods from superclass. A class must implement all the methods from interfaces.<\/li>\n<\/ol>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In Java, extends is used for extending a class and implements is used for implementing the interfaces. It&#8217;s the main difference between extends vs implements. 1. extends keyword In Java, we can inherit the fields and methods of a class by extending it using extends keyword. Please note that in Java, a class can extend &#8230; <a title=\"Java extends vs implements Keywords\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/extends-vs-implements\/\" aria-label=\"More on Java extends vs implements Keywords\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4758,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1517],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":1,"uagb_excerpt":"In Java, extends is used for extending a class and implements is used for implementing the interfaces. It&#8217;s the main difference between extends vs implements. 1. extends keyword In Java, we can inherit the fields and methods of a class by extending it using extends keyword. Please note that in Java, a class can extend&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12108"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=12108"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12108\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4758"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=12108"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=12108"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=12108"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}