{"id":4449,"date":"2015-01-21T11:17:03","date_gmt":"2015-01-21T11:17:03","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4449"},"modified":"2022-04-22T13:43:52","modified_gmt":"2022-04-22T08:13:52","slug":"copy-files-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/io\/copy-files-in-java\/","title":{"rendered":"Copying a File in Java"},"content":{"rendered":"\n<p>Copying a file from one place to another in Java is a common task that we need to do in the applications. In this Java tutorial, we will see different ways to <strong>copy a file in Java<\/strong>.<\/p>\n\n\n\n<p>Note that <strong>file copying is not an atomic operation<\/strong> &#8211; in the case of an I\/O error, power loss, process termination, or other problems, the copying operation is not complete. If we need to guard against those conditions, we should employ other file-level synchronization.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-e9b79a5e \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-using-nio-filescopy\">1. Using NIO Files.copy()<\/a><li class=\"uagb-toc__list\"><a href=\"#2-using-filechanneltransferto\">2. Using FileChannel.transferTo()<\/a><li class=\"uagb-toc__list\"><a href=\"#3-using-commons-ios-fileutils\">3. Using Commons IO&#8217;s FileUtils<\/a><li class=\"uagb-toc__list\"><a href=\"#4-using-guavas-files\">4. Using Guava&#8217;s Files<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<p>In all given examples, we will be copying the content of <code>testoriginal.txt<\/code> to an another file <code>testcopied.txt<\/code>. The name and the location of the files can be replaced in any of the examples.<\/p>\n\n\n\n<h2>1. Using NIO <em>Files.copy()<\/em><\/h2>\n\n\n\n<p>The <code>Files<\/code> class is in <code>java.nio.file<\/code> package. It provides the <em>static<\/em> methods that operate on files, directories, or other types of files. <\/p>\n\n\n\n<ul><li><strong>By default, the copy fails if the target file already exists<\/strong> or is a symbolic link, except if the source and target are the\u00a0same\u00a0files, in which case the method completes without copying the file.<\/li><li><strong>If the file is a directory then it creates an empty directory<\/strong> in the target location (entries in the directory are not copied).<\/li><\/ul>\n\n\n\n<p>Use one or more  <code>CopyOption<\/code> enums to control how the copy should be done.<\/p>\n\n\n\n<ul><li><code>REPLACE_EXISTING<\/code> : Any existing target file will be replaced.<\/li><li><code>COPY_ATTRIBUTES<\/code> : Copy the file attributes from the source to the target file.<\/li><li><code>NOFOLLOW_LINKS<\/code> : If the file is a symbolic link, then the symbolic link itself, not the target of the link, is copied.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path source = Paths.get(\"c:\/temp\/testoriginal.txt\");\nPath target = Paths.get(\"c:\/temp\/testcopied.txt\");\n\nFiles.copy(source, target, StandardCopyOption.REPLACE_EXISTING);<\/code><\/pre>\n\n\n\n<h2>2. Using <em>FileChannel.transferTo()<\/em><\/h2>\n\n\n\n<p>If you are fond of <code>FileChannel<\/code> class for their brilliant performance, use this method. The key advantage here is that the JVM uses the OS&#8217;s access to <em>DMA (Direct Memory Access)<\/em> if present.<\/p>\n\n\n\n<p>Using this technique, the data goes straight to\/from disc to the bus, and then to the destination&#8230; bypassing any circuit through RAM or the CPU.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">File fileToCopy = new File(\"c:\/temp\/testoriginal.txt\");\r\nFileInputStream inputStream = new FileInputStream(fileToCopy);\r\nFileChannel inChannel = inputStream.getChannel();\r\n\r\nFile newFile = new File(\"c:\/temp\/testcopied.txt\");\r\nFileOutputStream outputStream = new FileOutputStream(newFile);\r\nFileChannel outChannel = outputStream.getChannel();\r\n\r\ninChannel.transferTo(0, fileToCopy.length(), outChannel);\r\n\r\ninputStream.close();\r\noutputStream.close();<\/code><\/pre>\n\n\n\n<h2>3. Using Commons IO&#8217;s <em>FileUtils<\/em><\/h2>\n\n\n\n<p>To use Apache Commons IO, we will need to download the <a href=\"https:\/\/mvnrepository.com\/artifact\/commons-io\/commons-io\" target=\"_blank\" rel=\"noreferrer noopener\"><code>commons-io<\/code> dependency<\/a> and include in the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency>\r\n    &lt;groupId>commons-io&lt;\/groupId>\r\n    &lt;artifactId>commons-io&lt;\/artifactId>\r\n    &lt;version>2.11.0&lt;\/version>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<p>Use one of the following classes for copying one file to another.<\/p>\n\n\n\n<ul><li><code><strong>FileUtils<\/strong><\/code> &#8211; Internally it uses the <code>java.nio.file.Files<\/code> class so it is equivalent to use the <code>java.nio.file.Files.copy()<\/code> function.<\/li><li><code><strong>IOUtils<\/strong><\/code> &#8211; It copies bytes from a large (over 2GB) <code>InputStream<\/code> to an <code>OutputStream<\/code>. This method uses the provided buffer, so there is no need to use a <code>BufferedInputStream<\/code>.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">File fileToCopy = new File(\"c:\/temp\/testoriginal.txt\");\r\nFile newFile = new File(\"c:\/temp\/testcopied.txt\");\r\n\r\nFileUtils.copyFile(fileToCopy, newFile);\r\n\r\n\/\/ OR\r\n\r\nIOUtils.copy(new FileInputStream(fileToCopy), new FileOutputStream(newFile));<\/code><\/pre>\n\n\n\n<h2>4. Using Guava&#8217;s <em>Files<\/em><\/h2>\n\n\n\n<p>To use Guava, we will need to download the <a href=\"https:\/\/mvnrepository.com\/artifact\/com.google.guava\/guava\" target=\"_blank\" rel=\"noreferrer noopener\"><code>com.google.guava<\/code> dependency<\/a> and include in the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency>\r\n    &lt;groupId>com.google.guava&lt;\/groupId>\r\n    &lt;artifactId>guava&lt;\/artifactId>\r\n    &lt;version>31.1-jre&lt;\/version>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<p>The <code>Files<\/code> class provides utility methods for working with files. The <code>Files.copy()<\/code> method copies all the bytes from one file to another.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">File fileToCopy = new File(\"c:\/temp\/testoriginal.txt\");\r\nFile newFile = new File(\"c:\/temp\/testcopied.txt\");\r\n\r\nFiles.copy(fileToCopy, newFile);<\/code><\/pre>\n\n\n\n<p>After Java 7, there have not been any major improvements in the Java IO package. So for any later Java release (Java 8 to Java 14), we have to reply on above-listed techniques.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Core-Java\/tree\/master\/src\/main\/java\/com\/howtodoinjava\/io\" target=\"_blank\" rel=\"noreferrer noopener\">Source Code on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Copying a file from one place to another in Java is a common task. Learn to copy files using Java NIO, Commons-IO and Guava APIs.<\/p>\n","protected":false},"author":2,"featured_media":20207,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[19],"tags":[1418],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-300x170.jpg",300,170,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-120x120.jpg",120,120,true]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"Copying a file from one place to another in Java is a common task. Learn to copy files using Java NIO, Commons-IO and Guava APIs.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4449"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4449"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4449\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/20207"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4449"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4449"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4449"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}