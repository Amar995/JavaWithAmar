{"id":19620,"date":"2022-01-31T00:05:06","date_gmt":"2022-01-30T18:35:06","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=19620"},"modified":"2022-06-26T23:57:08","modified_gmt":"2022-06-26T18:27:08","slug":"mock-testing-frameworks","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/guides\/mock-testing-frameworks\/","title":{"rendered":"Top Mock Testing Frameworks in Java"},"content":{"rendered":"\n<p>In this Java tutorial, we will go through some popular and most used Java testing frameworks used for mocking the test dependencies and verifying the results.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-0ae7ab2e \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-mockito\">1. Mockito<\/a><li class=\"uagb-toc__list\"><a href=\"#2-easymock\">2. EasyMock<\/a><li class=\"uagb-toc__list\"><a href=\"#3-wiremock\">3. WireMock<\/a><li class=\"uagb-toc__list\"><a href=\"#4-mockwebserver\">4. MockWebServer<\/a><li class=\"uagb-toc__list\"><a href=\"#5-jmockit\">5. JMockit<\/a><li class=\"uagb-toc__list\"><a href=\"#6-powermock\">6. PowerMock<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. <a href=\"https:\/\/howtodoinjava.com\/mockito\/junit-mockito-example\/\">Mockito<\/a><\/h2>\n\n\n\n<p>Mockito is an open-source framework that <strong>allows us to easily create test doubles (mocks)<\/strong>. Test Double is a generic term for any case where you replace a production object for testing purposes.<\/p>\n\n\n\n<p>In mockito, we generally work with the following kinds of test doubles.<\/p>\n\n\n\n<ul><li><strong>Stubs<\/strong> \u2013 is an object that has predefined return values to method executions made during the test.<\/li><li><strong>Spies<\/strong> \u2013 are objects that are similar to stubs, but they additionally record how they were executed.<\/li><li><strong>Mocks<\/strong> \u2013 are objects that have return values to method executions made during the test and have recorded expectations of these executions. Mocks can throw an exception if they receive a call they don\u2019t expect and are checked during verification to ensure they got all the calls they were expecting.<\/li><\/ul>\n\n\n\n<p>We can mock both interfaces and classes in the test class. Mockito also helps to produce minimum boilerplate code while using mockito annotations.<\/p>\n\n\n\n<h2>2. <a href=\"https:\/\/howtodoinjava.com\/java\/library\/easymock-tutorial\/\">EasyMock<\/a><\/h2>\n\n\n\n<p>EasyMock framework <strong>creates the mock objects using the <em>java.lang.reflect.Proxy<\/em> object<\/strong>. When we create a mock object, during test execution, the proxy object takes the place of the real object. The proxy object gets its fields and methods from the interface or class we pass when creating the mock.<\/p>\n\n\n\n<p>A typical test with EasyMock has four stages:<\/p>\n\n\n\n<ul><li><strong>Create Mocks<\/strong> &#8211; whose behavior we want to delegate to the proxy objects. Generally, we mock the classes that interact with external systems or classes that should not be part of the test code.<\/li><li><strong>Record<\/strong> &#8211; expectations from the mock objects. These expectations include simulating a method with certain arguments, the return value of the invoked method and the number of times the method should be invoked.<\/li><li><strong>Replay<\/strong> &#8211; makes the Mock object available. In \u2018replay\u2019 mode, when the test invokes a recorded method then the mock will return the recorded results in the previous step.<\/li><li><strong>Verify<\/strong> &#8211; that all expectations were executed as recorded and no unexpected call was performed on a mock.<\/li><\/ul>\n\n\n\n<h2>3. <a href=\"https:\/\/howtodoinjava.com\/java\/library\/mock-rest-api-with-wiremock\/\">WireMock<\/a><\/h2>\n\n\n\n<p>The microservices architecture allows us to develop, test and deploy different components of an application independently. Though such a component can be developed independently, testing this in isolation can be challenging. For a true integration testing of a microservice, we must test its interaction with other APIs.<\/p>\n\n\n\n<p>WireMock helps in integration testing when we need to mock external APIs for testing a particular API dependent on those external APIs to complete a transaction.<strong> WireMock is a popular HTTP mock server that helps in mocking APIs and stubbing HTTP responses.<\/strong><\/p>\n\n\n\n<h2>4. <a href=\"https:\/\/howtodoinjava.com\/java\/library\/mockwebserver-junit-webclient\/\">MockWebServer<\/a><\/h2>\n\n\n\n<p>The MockWebServer is a helpful library to mock dependent APIs on which the current component (under test) depends. Such mock APIs are extremely helpful in microservices architecture where we are developing multiple dependent services at the same time.<\/p>\n\n\n\n<p><strong>MockWebServer is somewhat similar to WireMock, and it can be used to test async HTTP calls made from the Spring <a href=\"https:\/\/howtodoinjava.com\/tag\/webclient\/\">WebClient<\/a>.<\/strong><\/p>\n\n\n\n<h2>5. <a href=\"https:\/\/howtodoinjava.com\/java\/library\/jmockit-tutorial\/\">JMockit<\/a><\/h2>\n\n\n\n<p>JMockit is open-source software that contains support for mocking, faking, and integration testing, and a code coverage tool.\u00a0It is used for mocking the external dependencies outside the test boundary, similar to\u00a0<em>Mockito<\/em>.<\/p>\n\n\n\n<p>The most important feature of JMockit is that it lets us mock anything, even the things that are hard to mock with other libraries such as\u00a0<em>private<\/em>\u00a0methods,\u00a0<em>constructors<\/em>,\u00a0<em>static<\/em>\u00a0and\u00a0<em>final<\/em>\u00a0methods. It even allows mocking the\u00a0<em>member fields<\/em>\u00a0and\u00a0<em>initialization blocks<\/em>\u00a0as well.<\/p>\n\n\n\n<p>Similar to\u00a0EasyMock, JMockit also uses the\u00a0<strong>Record-Replay-Verify<\/strong>\u00a0model in a test but allows defining the expectations and verifications in a very elaborative and declarative manner.<\/p>\n\n\n\n<h2>6. <a href=\"https:\/\/howtodoinjava.com\/java\/library\/mock-testing-using-powermock-with-junit-and-mockito\/\">PowerMock<\/a><\/h2>\n\n\n\n<p>PowerMock extends the existing mocking frameworks, such as <em>EasyMock<\/em> and&nbsp;<em>Mockito<\/em>, to add even more powerful features to them. PowerMock enables us to write good unit tests for even the most untestable code. <\/p>\n\n\n\n<p>For example, most of the mocking frameworks in Java cannot mock&nbsp;<em>static<\/em>&nbsp;methods or&nbsp;<em>final<\/em>&nbsp;classes. But using PowerMock, we can mock almost any class.<\/p>\n\n\n\n<p>PowerMock currently extends the&nbsp;<em>EasyMock<\/em>&nbsp;and&nbsp;<em>Mockito<\/em>&nbsp;mocking frameworks. Depending on which extension is preferred, the syntax to write any unit test differs slightly.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Spring-Boot-Examples\/tree\/master\/Testing-Libraries\" target=\"_blank\" rel=\"noreferrer noopener\">Sourcecode on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Learn some popular and the most used Java unit testing frameworks used for mocking the test dependencies and verifying the test results.<\/p>\n","protected":false},"author":2,"featured_media":20207,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1530],"tags":[1531,1471],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-300x170.jpg",300,170,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-120x120.jpg",120,120,true]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn some popular and the most used Java unit testing frameworks used for mocking the test dependencies and verifying the test results.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19620"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=19620"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/19620\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/20207"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=19620"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=19620"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=19620"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}