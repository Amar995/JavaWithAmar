{"id":104,"date":"2012-10-19T04:44:36","date_gmt":"2012-10-18T23:14:36","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=104"},"modified":"2022-01-29T23:32:56","modified_gmt":"2022-01-29T18:02:56","slug":"encapsulation-in-java-and-its-relation-with-abstraction","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/encapsulation-in-java-and-its-relation-with-abstraction\/","title":{"rendered":"Encapsulation vs Abstraction in Java"},"content":{"rendered":"<p>Most of you will agree that encapsulation and abstraction together brings a lot of confusion. Most blogs add only confusion further. Lets solve this puzzle.<\/p>\n<p>I started working on this post after my previous post &#8220;<a title=\"Understanding abstraction in java\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/\">Understanding abstraction in java<\/a>&#8220;. My goal was to understand encapsulation in java and how it relates to abstraction. As soon as i began, i started going down in more confusion like never before. After browsing many hours and reading some really well written as well as confusing blog entries, i was able to make out some clear understanding. Follow my footprints..<\/p>\n<pre>Table of Contents\r\n\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/oops\/encapsulation-in-java-and-its-relation-with-abstraction\/#encapsulation\">Encapsulation in simple words<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/oops\/encapsulation-in-java-and-its-relation-with-abstraction\/#encapsulation-in-detail\">Encapsulation in Detail<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/oops\/encapsulation-in-java-and-its-relation-with-abstraction\/#encapsulation-vs-abstraction\">Encapsulation vs Abstraction<\/a><\/pre>\n<p><a id=\"encapsulation\"><\/a><\/p>\n<h2>Encapsulation in simple words<\/h2>\n<p>Wrapping data and methods within classes in combination with implementation hiding (through access control) is often called encapsulation. The result is a data type with characteristics and behaviors. <strong>Encapsulation essentially has both i.e. information hiding and implementation hiding.<\/strong><\/p>\n<p><a id=\"encapsulation-in-detail\"><\/a><\/p>\n<h2>Encapsulation in Detail<\/h2>\n<p>I read it somewhere : &#8220;<strong>Whatever changes, encapsulate it<\/strong>&#8220;. It has been quoted as a famous design principle. For that matter in any class, changes can happen in data in runtime and changes in implementation can happen in future releases. So, encapsulation applies to both i.e. data as well as implementation.<\/p>\n<p>Access control or implementation hiding puts boundaries within a data type or class for two important reasons. The first is to establish what the client programmers can and can\u2019t use. This feeds directly into the second reason, which is to separate the interface from the implementation.<\/p>\n<p>If you are sure that client programmers can\u2019t do anything but send messages to the public interface, then you are free to change anything that\u2019s not public (e.g., package access, protected, or private) without breaking client code. Encapsulation helps you in achieving this surety.<\/p>\n<p><a id=\"encapsulation-vs-abstraction\"><\/a><\/p>\n<h2>Encapsulation vs Abstraction<\/h2>\n<p>If you have gone through <a title=\"Understanding abstraction in java\" href=\"https:\/\/howtodoinjava.com\/java\/oops\/understanding-abstraction-in-java\/\">my last post<\/a>, you will see that abstraction is essentially an idea, which helps in setting the guidelines. Encapsulation is the mechanism by which we achieve the desired abstraction.<\/p>\n<p>In short, from OOAD perspective:<\/p>\n<ul>\n<li><em>Abstraction is more about &#8216;<strong>What<\/strong>&#8216; a class can do. [<strong>Idea<\/strong>]<\/em><\/li>\n<li><em>Encapsulation is more about &#8216;<strong>How<\/strong>&#8216; to achieve that functionality. [<strong>Implementation<\/strong>]<\/em><\/li>\n<\/ul>\n<p>I have seen many contradictions to this theory over many blogs. So, if you also don&#8217;t agree with this, please bear with me. Also, i will request you to put a comment you idea related to topic. I will happily try to relate or negate.<\/p>\n<p>Going forward, i will take example of our well known class <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/hashmap\/how-hashmap-works-in-java\/\">HashMap<\/a>. This class is responsible for storing key-value pair, searching based on key and do more things. From outside, client code only knows the method names and their behavior. It calls these methods and live happily. This is actually what abstraction guidelines are. Abstraction says that client code should call a method to add key-value pair, a method to retrieve value based on key and so on. How it should be done? is not business of abstraction.<\/p>\n<p>And here comes encapsulation, when you start writing actual code. You write HashMap.Entry class and create variable <em>table<\/em> of type <code>Entry[]<\/code>. Then you declare all such things private and give public access to only <code>put()<\/code> and <code>get()<\/code> methods etc. This is actually encapsulation. <em>A realization of your desired abstraction<\/em>.<\/p>\n<p>I hope that you have more clarity about <strong>java encapsulation<\/strong> and it&#8217;s <strong>difference with abstraction<\/strong>.<\/p>\n<p>Happy learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, I will explain the encapsulation in java and its relation with abstraction. Also learn about information hiding and implementation hiding.<\/p>\n","protected":false},"author":2,"featured_media":4758,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1519,1520,1454],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":23,"uagb_excerpt":"In this tutorial, I will explain the encapsulation in java and its relation with abstraction. Also learn about information hiding and implementation hiding.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/104"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=104"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/104\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4758"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=104"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=104"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=104"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}