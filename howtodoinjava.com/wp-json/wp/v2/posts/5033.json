{"id":5033,"date":"2015-09-04T10:02:53","date_gmt":"2015-09-04T04:32:53","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=5033"},"modified":"2022-01-29T23:31:47","modified_gmt":"2022-01-29T18:01:47","slug":"multiple-inheritance-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/oops\/multiple-inheritance-in-java\/","title":{"rendered":"Multiple Inheritance in Java"},"content":{"rendered":"<p>As we have long learned the fact that <em><strong>multiple inheritance<\/strong> is not directly supported<\/em> in Java, well that was only till Java 7. In <a href=\"https:\/\/howtodoinjava.com\/java-8-tutorial\/\">Java 8<\/a>, we can realize the concept of <strong>multiple inheritance<\/strong> through use of <a href=\"https:\/\/howtodoinjava.com\/java8\/default-methods-in-java-8\/\">default methods<\/a> without getting into <strong><a href=\"https:\/\/howtodoinjava.com\/java\/oops\/java-inheritance\/\">diamond problem<\/a><\/strong>. <\/p>\n<p>Let&#8217;s see how?<\/p>\n<pre>Table of Contents\r\n\r\n1. <a href=\"#default-methods\">What are default methods?<\/a>\r\n2. <a href=\"#multiple-inheritance\">How multiple inheritance is achieved via default methods?<\/a>\r\n3. <a href=\"#conflicts-resolutions\">Possible conflicts and their resolutions<\/a><\/pre>\n<p><a name=\"default-methods\"><\/a><\/p>\n<h2>1. What are default methods?<\/h2>\n<p>If you been in java programming since enough long time, you may realize that how painful can be adding a new method in an existing interface. You will need to implement that new method in java classes which implement that interface. It&#8217;s really difficult job. Well, java 8 brought <strong>default methods<\/strong> to help you in exactly same situation.<\/p>\n<blockquote><p>Default methods enable you to add new functionality to the interfaces and ensure backward compatibility for existing classes which implement that interface.<\/p><\/blockquote>\n<p>As their name implies, default methods in interfaces are methods which will be <strong>invoked by default &#8211; if not overridden<\/strong> in implementing classes. Let\u2019s understand with an example.<\/p>\n<p><code>Moveable<\/code> interface is some existing interface and wants to add a new method <code>moveFast()<\/code>. If it adds <code>moveFast()<\/code> method using old technique, then all classes implemeting <code>Moveable<\/code> will also be changed. So, let&#8217;s add <code>moveFast()<\/code> method as default method.<\/p>\n<pre class=\"brush: java; title: Moveable.java; notranslate\" title=\"Moveable.java\">\r\npublic interface Moveable \r\n{\r\n    default void moveFast()\r\n    {\r\n        System.out.println(&quot;I am moving fast, buddy !!&quot;);\r\n    }\r\n}\r\n<\/pre>\n<p>If all classes implementing <code>Moveable<\/code> interface do not need change themselves (until some class specifically wants to override <code>moveFast()<\/code> method to add custom logic). All classes can directly call <code>instance.moveFast()<\/code> method.<\/p>\n<pre class=\"brush: java; title: Animal.java; notranslate\" title=\"Animal.java\">\r\npublic class Animal implements Moveable\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Animal tiger = new Animal();\r\n\r\n        \/\/Call default method using instance reference\r\n        tiger.moveFast();\r\n    }\r\n}\r\n<\/pre>\n<p><a name=\"multiple-inheritance\"><\/a><\/p>\n<h2>2. How multiple inheritance is achieved via default methods?<\/h2>\n<div class=\"noticeboxesde bluenoticebox\">Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit characteristics and behavior from more than one parent object or parent class.<\/div>\n<p>We know that in java (until jdk 7), inheritence in java was supported by <code><a href=\"https:\/\/howtodoinjava.com\/oops\/extends-vs-implements\/\">extends<\/a><\/code> keyword which is used to create a child class from a parent class. You cannot extend from two classes.<\/p>\n<p>Until java 7, interfaces were only for declaring the contracts which implementing classes MUST implement (except the implementing class in not <code><a href=\"https:\/\/howtodoinjava.com\/java\/basics\/abstract-keyword\/\">abstract<\/a><\/code> itself). So there was no specific behavior attached with interfaces which a class can inherit. So, even after a class was capable of implementing as many interfaces as it want, it was not appropriate to term as multiple inheritance.<\/p>\n<p>But since java 8&#8217;s default methods, interfaces have behavior as well. So now <strong>if a class implement two interfaces and both defines default methods, then it is essentially inheriting behaviors from two parents which is multiple inheritance<\/strong>. <\/p>\n<p>For example, in below code <code>Animal<\/code> class does not define any of it&#8217;s own behavior; rather it is inheriting behavior from parent interfaces. That&#8217;s multiple inheritance.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npackage com.howtodoinjava.examples;\r\n\r\ninterface Moveable\r\n{\r\n    default void moveFast(){\r\n        System.out.println(&quot;I am moving fast, buddy !!&quot;);\r\n    }\r\n}\r\n \r\ninterface Crawlable\r\n{\r\n    default void crawl(){\r\n        System.out.println(&quot;I am crawling !!&quot;);\r\n    }\r\n}\r\n \r\npublic class Animal implements Moveable, Crawlable \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Animal self = new Animal();\r\n        \r\n        self.moveFast();\r\n        self.crawl();\r\n    }\r\n}\r\n<\/pre>\n<p><a name=\"conflicts-resolutions\"><\/a><\/p>\n<h2>3. Possible conflicts during mutiple inheritance<\/h2>\n<p>In above example, we have two different interfaces and two different methods &#8211; so there is no conflict. What if <strong>both interfaces decide to define a new method with same name<\/strong>. Well they can define without problem. But which method will be invoked when <code>Animal<\/code> instance will call it&#8217;s name. <\/p>\n<p>That&#8217;s conflicting situation.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npackage com.howtodoinjava.examples;\r\n\r\ninterface Moveable\r\n{\r\n    default void run(){\r\n        System.out.println(&quot;I am running, kid !!&quot;);\r\n    }\r\n}\r\n \r\ninterface Crawlable\r\n{\r\n    default void run(){\r\n        System.out.println(&quot;I am running, daddy !!&quot;);\r\n    }\r\n}\r\n \r\npublic class Animal implements Moveable, Crawlable \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Animal self = new Animal();\r\n\r\n        \/\/What will happen when below statement will execute\r\n        \/\/self.run();\r\n    }\r\n}\r\n<\/pre>\n<p>So solve above conflict, caller class must decide which <code>run()<\/code> method it want to invoke and then call <strong>using interface&#8217;s reference<\/strong> like below.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nMoveable.super.run();   \/\/Call Moveable's run() method\r\n\r\n\/\/or \r\n\r\nCrawlable.super.run();  \/\/Call Crawlable's run() method\r\n<\/pre>\n<p>That&#8217;s all you should know about multiple inheritance feature Java 8, using default methods.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit characteristics and behavior from more than one parent object or parent class.<\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[30],"tags":[1517],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":10,"uagb_excerpt":"Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit characteristics and behavior from more than one parent object or parent class.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/5033"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=5033"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/5033\/revisions"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=5033"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=5033"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=5033"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}