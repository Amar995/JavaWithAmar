{"id":10421,"date":"2018-05-28T23:49:32","date_gmt":"2018-05-28T18:19:32","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=10421"},"modified":"2022-01-25T15:21:36","modified_gmt":"2022-01-25T09:51:36","slug":"java10-features","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java10\/java10-features\/","title":{"rendered":"Java 10 Features and Enhancements"},"content":{"rendered":"<p>After <a href=\"https:\/\/howtodoinjava.com\/java9\/java9-new-features-enhancements\/\">Java 9<\/a> release, Java 10 came very quickly. Unlike it&#8217;s previous release, Java 10 does not have that many exciting features, still it has few important updates which will change the way you code, and other future Java versions.<\/p>\n<pre>Table of Contents\r\n\r\n<a href=\"#1\">JEP 286: Local Variable Type Inference<\/a>\r\n<a href=\"#2\">JEP 322: Time-Based Release Versioning<\/a>\r\n<a href=\"#3\">JEP 304: Garbage-Collector Interface<\/a>\r\n<a href=\"#4\">JEP 307: Parallel Full GC for G1<\/a>\r\n<a href=\"#5\">JEP 316: Heap Allocation on Alternative Memory Devices<\/a>\r\n<a href=\"#6\">JEP 296: Consolidate the JDK Forest into a Single Repository<\/a>\r\n<a href=\"#7\">JEP 310: Application Class-Data Sharing<\/a>\r\n<a href=\"#8\">JEP 314: Additional Unicode Language-Tag Extensions<\/a>\r\n<a href=\"#9\">JEP 319: Root Certificates<\/a>\r\n<a href=\"#10\">JEP 317: Experimental Java-Based JIT Compiler<\/a>\r\n<a href=\"#11\">JEP 312: Thread-Local Handshakes<\/a>\r\n<a href=\"#12\">JEP 313: Remove the Native-Header Generation Tool<\/a>\r\n<a href=\"#13\">New Added APIs and Options<\/a>\r\n<a href=\"#14\">Removed APIs and Options<\/a><\/pre>\n<p><a id=\"1\"><\/a><\/p>\n<h2>JEP 286: Local Variable Type Inference<\/h2>\n<p>Java has now <code>var<\/code> style declarations. It allows you to declare a local variable without specifying its type. The type of variable will be inferred from type of actual object created. It claims to be the only real feature for developers in JDK 10. e.g.<\/p>\n<pre class=\"brush: java; title: Application.java; notranslate\" title=\"Application.java\">\r\nvar str = &quot;Hello world&quot;;\r\n \r\n\/\/or\r\n \r\nString str = &quot;Hello world&quot;;\r\n<\/pre>\n<p>In above example, both statements are equivalent. In first statement, type of <code>str<\/code> is determined by type of assignment which of <code>String<\/code> type.<\/p>\n<blockquote><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java10\/var-local-variable-type-inference\/\">Java var \u2013 Local-Variable Type Inference<\/a><\/p><\/blockquote>\n<p><a id=\"2\"><\/a><\/p>\n<h2>JEP 322: Time-Based Release Versioning<\/h2>\n<p>Starting from Java 10, Oracle has adapted time based version-string scheme. The new format of the version number is:<\/p>\n<pre>$FEATURE.$INTERIM.$UPDATE.$PATCH<\/pre>\n<p>Unlike the old releases, the new time-based releases will not be delayed and features will be released every six months, with no constraints on what features can go out in the releases.<\/p>\n<p>There are Long Term Releases (LTS) as well. It is mainly for enterprise customers. LTS version of the products will offer premier and sustained support from Oracle and it will be targeted every 3 years. Also, updates for these releases will be available for at least three years.<\/p>\n<blockquote><p>Read More: <a href=\"https:\/\/howtodoinjava.com\/java10\/java-version\/\">Java Version \u2013 Time-Based Release Versioning<\/a><\/p><\/blockquote>\n<p><a id=\"3\"><\/a><\/p>\n<h2>JEP 304: Garbage-Collector Interface<\/h2>\n<p>In earlier JDK structure, the components that made up a Garbage Collector (GC) implementation were scattered throughout various parts of the code base. It\u2019s changed in Java 10. Now, it is a clean interface within the JVM source code to allow alternative collectors to be quickly and easily integrated. It will improve source-code isolation of different garbage collectors.<\/p>\n<p>This is purely refactoring. Everything that worked before needs to work afterwards, and performance should not regress. <\/p>\n<p><a id=\"4\"><\/a><\/p>\n<h2>JEP 307: Parallel Full GC for G1<\/h2>\n<p>Java 9 introduced G1 (garbage first) garbage collector. The G1 garbage collector is designed to avoid full collections, but when the concurrent collections can&#8217;t reclaim memory fast enough. With this change, a fall back full GC will occur. <\/p>\n<p>The current implementation of the full GC for G1 uses a single threaded mark-sweep-compact algorithm. This change will parallelize the mark-sweep-compact algorithm and use the same number of threads. It will be triggered when concurrent threads for collection can\u2019t revive the memory fast enough.<\/p>\n<p>The number of threads can be controlled by the <code>-XX:ParallelGCThreads<\/code> option.<\/p>\n<p><a id=\"5\"><\/a><\/p>\n<h2>JEP 316: Heap Allocation on Alternative Memory Devices<\/h2>\n<p>The goal of this change is to enable the HotSpot VM to allocate the Java object heap on an alternative memory device, such as an NV-DIMM, specified by the user.<\/p>\n<p>To allocate the heap in such memory we can add a new option, <code>-XX:AllocateHeapAt=&lt;path&gt;<\/code>. This option would take a path to the file system and use memory mapping to achieve the desired result of allocating the object heap on the memory device. The existing heap related flags such as <code>-Xmx<\/code>, <code>-Xms<\/code>, etc., and garbage-collection related flags would continue to work as before.<\/p>\n<p><a id=\"6\"><\/a><\/p>\n<h2>JEP 296: Consolidate the JDK Forest into a Single Repository<\/h2>\n<p>As part of this change numerous repositories of the JDK forest is combined into a single repository in order to simplify and streamline development.<\/p>\n<p>In JDK 9 there are eight repos: <code>root<\/code>, <code>corba<\/code>, <code>hotspot<\/code>, <code>jaxp<\/code>, <code>jaxws<\/code>, <code>jdk<\/code>, <code>langtools<\/code>, and <code>nashorn<\/code>. In the consolidated forests, code for Java modules is generally combined under a single top-level <code>src<\/code> directory. For example, today in the JDK forest there are module-based directories like<\/p>\n<pre>$ROOT\/jdk\/src\/java.base\r\n...\r\n$ROOT\/langtools\/src\/java.compiler\r\n...<\/pre>\n<p>In the consolidated forest, this code is instead organized as-<\/p>\n<pre>$ROOT\/src\/java.base\r\n$ROOT\/src\/java.compiler\r\n...<\/pre>\n<p><a id=\"7\"><\/a><\/p>\n<h2>JEP 310: Application Class-Data Sharing<\/h2>\n<p>The goal of this feature is to improve the startup footprint, extends the existing Class-Data Sharing (\u201cCDS\u201d) feature to allow application classes to be placed in the shared archive.<\/p>\n<p>Class-Data Sharing, introduced in JDK 5, allows a set of classes to be pre-processed into a shared archive file that can then be memory-mapped at runtime to reduce startup time. It can also reduce dynamic memory footprint when multiple JVMs share the same archive file.<\/p>\n<p>Currently CDS only allows the bootstrap class loader to load archived classes. Application CDS allows the built-in system class loader, the built-in platform class loader, and custom class loaders to load archived classes.<\/p>\n<p>Specify the <code>-XX:+UseAppCDS<\/code> command-line option to enable class data sharing for the system class loader, the platform class loader, and other user-defined class loaders.<\/p>\n<p><a id=\"8\"><\/a><\/p>\n<h2>JEP 314: Additional Unicode Language-Tag Extensions<\/h2>\n<p>It&#8217;s goal is to enhance <code>java.util.Locale<\/code> and related APIs to implement additional Unicode extensions of <a href=\"https:\/\/www.rfc-editor.org\/rfc\/bcp\/bcp47.txt\">BCP 47<\/a> language tags. Support for BCP 47 language tags was was initially added in Java SE 7, with support for the Unicode locale extension limited to calendars and numbers. This JEP will implement more of the extensions specified in the latest <a href=\"http:\/\/www.unicode.org\/reports\/tr35\/tr35.html#Locale_Extension_Key_and_Type_Data\">LDML specification<\/a>, in the relevant JDK classes.<\/p>\n<p>This JEP will add support for the following additional extensions:<\/p>\n<ul>\n<li>cu (currency type)<\/li>\n<li>fw (first day of week)<\/li>\n<li>rg (region override)<\/li>\n<li>tz (time zone)<\/li>\n<\/ul>\n<p>Related APIs which got modified are:<\/p>\n<pre>java.text.DateFormat::get*Instance\r\njava.text.DateFormatSymbols::getInstance\r\njava.text.DecimalFormatSymbols::getInstance\r\njava.text.NumberFormat::get*Instance\r\njava.time.format.DateTimeFormatter::localizedBy\r\njava.time.format.DateTimeFormatterBuilder::getLocalizedDateTimePattern\r\njava.time.format.DecimalStyle::of\r\njava.time.temporal.WeekFields::of\r\njava.util.Calendar::{getFirstDayOfWeek,getMinimalDaysInWeek}\r\njava.util.Currency::getInstance\r\njava.util.Locale::getDisplayName\r\njava.util.spi.LocaleNameProvider\r\n<\/pre>\n<p><a id=\"9\"><\/a><\/p>\n<h2>JEP 319: Root Certificates<\/h2>\n<p>The cacerts keystore, which is part of the JDK, is intended to contain a set of root certificates that can be used to establish trust in the certificate chains employed in various security protocols. The cacerts keystore in the JDK source code, however, is currently empty.<\/p>\n<p>The cacerts keystore will be populated with a set of root certificates issued by the CAs of Oracle&#8217;s Java SE Root CA Program. A lot of vendors have already signed to the required agreement and, for each, a list of the root certificates that will be included. Those that do not sign an agreement will not be included at this time. Those that take longer to process will be included in the next release.<\/p>\n<p>This will also mean that both Oracle &#038; Open JDK binaries will be functionally the same. Critical security components such as TLS will work by default in OpenJDK builds going forward.<\/p>\n<p><a id=\"10\"><\/a><\/p>\n<h2>JEP 317: Experimental Java-Based JIT Compiler<\/h2>\n<p>This feature enables the Java-based JIT compiler, <strong>Graal<\/strong>, to be used as an experimental JIT compiler on the Linux\/x64 platform. Graal will use the JVM compiler interface (JVMCI) introduced in JDK 9. Graal is already in the JDK, so enabling it as an experimental JIT will primarily be a testing and debugging effort.<\/p>\n<p>To enable Graal as the JIT compiler, use the following options on the java command line:<\/p>\n<pre>-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler<\/pre>\n<p>Graal is a complete rewrite of the JIT compiler in Java from scratch. Previous JIT complier was written in C++. <\/p>\n<p><a id=\"11\"><\/a><\/p>\n<h2>JEP 312: Thread-Local Handshakes<\/h2>\n<p>This JEP lays the groundwork for improved VM performance, by making it possible to execute a callback on application threads without performing a global VM safepoint. This would mean that the JVM could stop individual threads and not just all of them. <\/p>\n<p>Thread-local handshakes will be implemented initially on x64 and SPARC. Other platforms will fall back to normal safepoints. A new product option, <code>-XX:ThreadLocalHandshakes<\/code> (default value <code>true<\/code>), allows users to select normal safepoints on supported platforms.<\/p>\n<p><a id=\"12\"><\/a><\/p>\n<h2>JEP 313: Remove the Native-Header Generation Tool<\/h2>\n<p>It will remove the <code>javah<\/code> tool from the JDK, a separate tool to generate header files when compiling JNI code, as this can be done through <code>javac<\/code>.<\/p>\n<p>This is another Java 10 feature which focuses on housekeeping.<\/p>\n<p><a id=\"13\"><\/a><\/p>\n<h2>New Added APIs and Options<\/h2>\n<p>73 new API\u2019s has been added in Java 10. Let&#8217;s go through few of them:<\/p>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th data-mtr-content=\"API\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">API<\/div><\/th>\n<th data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Description<\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>Optional.orElseThrow()<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A new method <code>orElseThrow<\/code> has been added to the <code>Optional<\/code> class. It is synonymous with and is now the preferred alternative to the existing <code>get<\/code> method.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>List.copyOf<\/code>, <code>Set.copyOf<\/code>, and <code>Map.copyOf<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">These methods create new collection instances from existing instances.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>Collectors.toUnmodifiableList<\/code>, <code>Collectors.toUnmodifiableSet<\/code>, <code>Collectors.toUnmodifiableMap<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">These methods allow the elements of a <code>Stream<\/code> to be collected into an unmodifiable collection<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>--jdk.disableLastUsageTracking<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">To disable JRE last usage tracking for a running VM. <\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>--add-stylesheet<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Provides support for the use of multiple stylesheets in the generated documentation.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>--main-stylesheet<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">To help distinguish the main stylesheet from any additional stylesheets.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>@summary<\/code> Tag<\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Added to explicitly specify the text used as the summary of the API description. By default, the summary of an API description is inferred from the first sentence.<\/div><\/td>\n<\/tr>\n<\/table>\n<p><a id=\"14\"><\/a><\/p>\n<h2>Removed APIs and Options<\/h2>\n<table class=\"mtr-table mtr-tr-th\">\n<tr>\n<th data-mtr-content=\"API\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">API<\/div><\/th>\n<th data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Description<\/div><\/th>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>LookAndFeels<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>Runtime.getLocalizedInputStream<\/code>, <code>Runtime.getLocalizedOutputStream<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Part of an obsolete internationalization mechanism and have no known uses.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">RMI Server-Side Multiplex Protocol Support<\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">It was disabled in JDK 9 and, now, has been removed.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Common DOM APIs<\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The <code>com.sun.java.browser.plugin2.DOM<\/code>, and <code>sun.plugin.dom.DOMObject<\/code> APIs have been removed. Applications can use <code>netscape.javascript.JSObject<\/code> to manipulate the DOM.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">FlatProfiler<\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Deprecated in JDK 9, has been made obsolete by removing the implementation code. <\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>-Xoss<\/code>, <code>-Xsqnopause<\/code>, <code>-Xoptimize<\/code>, <code>-Xboundthreads<\/code>, and <code>-Xusealtsigs<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Options removed.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>policytool<\/code><\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">The <em>policytool<\/em> security tool has been removed from the JDK.<\/div><\/td>\n<\/tr>\n<tr>\n<td data-mtr-content=\"API\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Deprecated Classes in <code>com.sun.security.auth.**<\/code> <\/div><\/td>\n<td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Following classes are removed now. \n<ul>\n<li><code>com.sun.security.auth.PolicyFile<\/code><\/li>\n<li><code>com.sun.security.auth.SolarisNumericGroupPrincipal<\/code><\/li>\n<li><code>com.sun.security.auth.SolarisNumericUserPrincipal<\/code><\/li>\n<li><code>com.sun.security.auth.SolarisPrincipal<\/code><\/li>\n<li><code>com.sun.security.auth.X500Principal<\/code><\/li>\n<li><code>com.sun.security.auth.module.SolarisLoginModule<\/code><\/li>\n<li><code>com.sun.security.auth.module.SolarisSystem<\/code><\/li>\n<\/ul>\n<\/div><\/td>\n<\/tr>\n<\/table>\n<p>Overall, Java 10 has many features we may not use in everyday programming but it still has many features which work behind the scene to make it important milestone.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>After Java 9 release, Java 10 came very quickly. Unlike it\u2019s previous release, Java 10 does not have that many exciting features, still it has few important updates which will change the way you code, and other future Java versions.<\/p>\n","protected":false},"author":2,"featured_media":10411,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1133],"tags":[1435],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",150,105,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",300,210,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",120,84,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"After Java 9 release, Java 10 came very quickly. Unlike it\u2019s previous release, Java 10 does not have that many exciting features, still it has few important updates which will change the way you code, and other future Java versions.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/10421"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=10421"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/10421\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/10411"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=10421"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=10421"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=10421"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}