{"id":3951,"date":"2014-06-09T04:03:46","date_gmt":"2014-06-09T04:03:46","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=3951"},"modified":"2020-12-26T00:49:38","modified_gmt":"2020-12-25T19:19:38","slug":"java-8-optionals-complete-reference","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/","title":{"rendered":"Java 8 Optionals : Complete Reference"},"content":{"rendered":"<p>All of us must have encountered <code>NullPointerException<\/code> in our applications. This exception happen when you try to utilize a object reference which has not been initialized, initialized with null or simply does not point to any instance. <em><strong>NULL simply means &#8216;absence of a value&#8217;<\/strong><\/em>. Most probably, the Romans were only ones, who didn\u2019t run into this null problem who started counting at I, II, III.. (no zero). Perhaps, they couldn\u2019t model the absence of apples on their markets. [:-)]<\/p>\n<p>&#8220;I call it my billion-dollar mistake.&#8221; &#8211; <strong><a title=\"C._A._R._Hoare\" href=\"https:\/\/en.wikipedia.org\/wiki\/C._A._R._Hoare\" target=\"_blank\" rel=\"noopener noreferrer\">Sir C. A. R. Hoare<\/a><\/strong>, on his invention of the null reference<\/p>\n<p>In this article, I am going to discuss one of <strong><a title=\"java 8\" href=\"https:\/\/howtodoinjava.com\/java8\/\" target=\"_blank\" rel=\"noopener noreferrer\">java 8 features<\/a><\/strong> for this specific usecase i.e. <a title=\"Optional\" href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/Optional.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Optional<\/code><\/a>. This article has been divided into multiple sections for the sake of clarity and differentiation between multiple concepts.<\/p>\n<pre><strong>Discussion Points<\/strong>\r\n\r\n<a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#type_of_null\">1) What is the Type of Null?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#wrong_with_returning_null\">2) What is wrong with just returning null?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#java_8_optional_based_solution\">3) How Java 8 Optionals provide the solution?<\/a>\r\n    <a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#create_optional\">a) Creating Optional objects<\/a>\r\n    <a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#optional_present\">b) Do something if a value is present<\/a>\r\n    <a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#optional_absent\">c) Default\/Absent values and actions<\/a>\r\n    <a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#optional_reject\">d) Rejecting certain values Using the filter method<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#inside_optional\">4) What is inside Optional make it work?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#why_optional\">5) What is Optional trying to solve?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#why_not_optional\">6) What is Optional not trying to solve?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#how_optional_should_be_used\">7) How should Optional be used?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/#conclusion\">8) Conclusion<\/a>\r\n<\/pre>\n<p><a name=\"type_of_null\"><\/a><\/p>\n<h2>1) What is the Type of Null?<\/h2>\n<p>In Java, we use a reference type to gain access to an object, and when we don\u2019t have a specific object to make our reference point to, then we set such reference to null to imply the absence of a value. Right?<\/p>\n<p>The use of null is so common that we rarely put more thoughts on it. For example, field members of objects are automatically initialized to null and programmers typically initialize reference types to null when they don\u2019t have an initial value to give them and, in general, null is used everytime where we don\u2019t know or we don\u2019t have a value to give to a reference.<\/p>\n<div class=\"noticeboxesde bluenoticebox\">FYI, in Java <strong><em>null is actually a type<\/em><\/strong>, a special one. It has no name so we cannot declare variables of its type or cast any variables to it; in fact there is only a single value that can be associated with it (i.e. the literal null). Remember that unlike any other types in Java, a null reference can be safely assigned to any other reference types without any error(See <a title=\"jls 3.10.7\" href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/jls-3.html#jls-3.10.7\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>JLS 3.10.7<\/strong><\/a> and <a title=\"jls 4.1\" href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/jls-4.html#jls-4.1\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>4.1<\/strong><\/a>).<\/div>\n<p><a name=\"wrong_with_returning_null\"><\/a><\/p>\n<h2>2) What is wrong with just returning null?<\/h2>\n<p>Generally, the API designers put the descriptive java docs in APIs and mention there that API can return a null value, and in which case(s). Now, the problem is that the caller of the API might have missed reading the javadoc for any reason, and <strong>forget about handling the null case<\/strong>. This is going to be a bug in future for sure.<\/p>\n<p>And believe me, this happens frequently and is one of the main causes of null pointer exceptions, although not the only one. So, take a lesson here that always read the java dcos of an API when you are using it first time (&#8230; at least ) [:-)].<\/p>\n<blockquote><p>Now we know that null is a problem in most of the cases, what&#8217;s best way to handle them?<\/p><\/blockquote>\n<p>A good solution is to always <strong>initialize your object references with some value<\/strong>, and never with null. In this way, you will never encounter <code>NullPointerException<\/code>. Fair enough. But in practical we always don&#8217;t have a default value for a reference. So, how those cases should be handled?<\/p>\n<p>Above question is right in many senses. Well, <strong>java 8 <code>Optionals<\/code><\/strong> are the answer here.<br \/>\n<a name=\"java_8_optional_based_solution\"><\/a><\/p>\n<h2>3) How Java 8 Optionals provide the solution?<\/h2>\n<p>Optional is a way of replacing a nullable T reference with a non-null value. An Optional may either contain a non-null T reference (in which case we say the reference is &#8220;present&#8221;), or it may contain nothing (in which case we say the reference is &#8220;absent&#8221;).<\/p>\n<blockquote><p>Remember that it is <strong>never said that optional &#8220;contain null&#8221;<\/strong>.<\/p><\/blockquote>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nOptional&lt;Integer&gt; canBeEmpty1 = Optional.of(5);\r\ncanBeEmpty1.isPresent(); \t\t\t\t\t\/\/ returns true\r\ncanBeEmpty1.get(); \t\t\t\t\t\t\t\/\/ returns 5\r\n\r\nOptional&lt;Integer&gt; canBeEmpty2 = Optional.empty();\r\ncanBeEmpty2.isPresent(); \t\t\t\t\t\/\/ returns false\r\n<\/pre>\n<p>You can also <strong>view Optional as a single-value container that either contains a value or doesn&#8217;t<\/strong>.<\/p>\n<p>It is important to note that the intention of the Optional class is not to replace every single null reference. Instead, its purpose is to <strong>help design more-comprehensible APIs<\/strong> so that by just reading the signature of a method, you can tell whether you can expect an optional value. This forces you to fetch the value from Optional and work on it, and at the same time handle the case where optional will be empty. Well, this is exactly the solution of null references\/return values which ultimately result into <code>NullPointerException<\/code>.<\/p>\n<p>Below are some examples to learn more about how Optional should be created and used in your application code.<\/p>\n<p><a name=\"create_optional\"><\/a><\/p>\n<h3>a) Creating Optional objects<\/h3>\n<p>There are 3 major ways to create an Optional.<\/p>\n<p><strong>i)<\/strong> Use <strong>Optional.empty()<\/strong> to create empty optional.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nOptional&lt;Integer&gt; possible = Optional.empty(); \r\n<\/pre>\n<p><strong>ii)<\/strong> Use<strong> Optional.of()<\/strong> to create optional with default non-null value. If you pass null in of(), then a NullPointerException is thrown immediately.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">Optional&lt;Integer&gt; possible = Optional.of(5); <\/pre>\n<p><strong>iii)<\/strong> Use <strong>Optional.ofNullable()<\/strong> to create an Optional object that may hold a null value. If parameter is null, the resulting Optional object would be empty (remember that value is absent; don&#8217;t read it null).<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">Optional&lt;Integer&gt; possible = Optional.ofNullable(null); \r\n\/\/or\r\nOptional&lt;Integer&gt; possible = Optional.ofNullable(5); <\/pre>\n<p><a name=\"optional_present\"><\/a><\/p>\n<h3>b) Do something If Optional value is present<\/h3>\n<p>You got your <code>Optional<\/code> object is first step. Now let&#8217;s use it after checking whether it holds any value inside it.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nOptional&lt;Integer&gt; possible = Optional.of(5); \r\npossible.ifPresent(System.out::println);\r\n<\/pre>\n<p>You can re-write above code as below code as well. However, this is not the recommended use of <code>Optional<\/code> because it&#8217;s not much of an improvement over nested null checks. They do look completely similar.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nif(possible.isPresent()){\r\n\tSystem.out.println(possible.get());\r\n}\r\n<\/pre>\n<p>If the <code>Optional<\/code> object were empty, nothing would be printed.<\/p>\n<p><a name=\"optional_absent\"><\/a><\/p>\n<h3>c) Default\/absent values and actions<\/h3>\n<p>A typical pattern in programming is to return a default value if you determine that the result of an operation is null. In general, you can use the ternary operator; but with Optionals, you can write the code as below:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/Assume this value has returned from a method\r\nOptional&lt;Company&gt; companyOptional = Optional.empty();\r\n\r\n\/\/Now check optional; if value is present then return it, \r\n\/\/else create a new Company object and retur it\r\nCompany company = companyOptional.orElse(new Company());\r\n\r\n\/\/OR you can throw an exception as well\r\nCompany company = companyOptional.orElseThrow(IllegalStateException::new);\r\n<\/pre>\n<p><a name=\"optional_reject\"><\/a><\/p>\n<h3>d) Rejecting certain values using the filter method<\/h3>\n<p>Often you need to call a method on an object and check some property. e.g. in below example code check if company has a &#8216;Finance&#8217; department; if it has, then print it.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nOptional&lt;Company&gt; companyOptional = Optional.empty();\r\ncompanyOptional.filter(department -&gt; &quot;Finance&quot;.equals(department.getName())\r\n                    .ifPresent(() -&gt; System.out.println(&quot;Finance is present&quot;));\r\n<\/pre>\n<p>The <strong><a title=\"java 8 streams\" href=\"https:\/\/howtodoinjava.com\/java\/stream\/java-streams-by-examples\/\" target=\"_blank\" rel=\"noopener noreferrer\">filter method<\/a><\/strong> takes a <strong><a title=\"predicate\" href=\"https:\/\/howtodoinjava.com\/java8\/how-to-use-predicate-in-java-8\/\" target=\"_blank\" rel=\"noopener noreferrer\">predicate<\/a><\/strong> as an argument. If a value is present in the <code>Optional<\/code> object and it matches the predicate, the filter method returns that value; otherwise, it returns an empty <code>Optional<\/code> object. You might have seen a similar pattern already if you have used the filter method with the <code><a title=\"Stream\" href=\"http:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/stream\/Stream.html\" target=\"_blank\" rel=\"noopener noreferrer\">Stream<\/a><\/code> interface.<\/p>\n<p>Good, this code is looking closer to the problem statement and there are no verbose null checks getting in our way!<\/p>\n<p>Wow!! We&#8217;ve come a long way from writing painful nested null checks to writing declarative code that is composable, readable, and better protected from null pointer exceptions.<\/p>\n<p><a name=\"inside_optional\"><\/a><\/p>\n<h2>4) What is inside Optional make it work?<\/h2>\n<p>If you open the sourcecode of Optional.java, you will find that value that Optional holds is defined as:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/**\r\n * If non-null, the value; if null, indicates no value is present\r\n *\/\r\nprivate final T value;\r\n<\/pre>\n<p>And if you define an empty Optional then it is declared as below. <strong>static keyword ensures that generally only one empty instance should exist per VM<\/strong>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/**\r\n * Common instance for {@code empty()}.\r\n *\/\r\nprivate static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;();\r\n<\/pre>\n<p>The default <strong>no-args constructor is define private<\/strong>, so you can&#8217;t create an instance of Optional except 3 given ways above.<\/p>\n<p>When you create an Optional then below call happen at end and assign the passed value to &#8216;value&#8217; attribute.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\tthis.value = Objects.requireNonNull(value);\r\n<\/pre>\n<p>When you try to <strong>get a value from an Optional<\/strong>, value is fetched if present other wise <code>NoSuchElementException<\/code> is thrown:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic T get() {\r\n\tif (value == null) {\r\n\t\tthrow new NoSuchElementException(&quot;No value present&quot;);\r\n\t}\r\n\treturn value;\r\n}\r\n<\/pre>\n<p>Similarly, other functions defined in Optional class operate around the &#8216;value&#8217; attribute only. Browse the <strong><a href=\"http:\/\/hg.openjdk.java.net\/jdk8\/jdk8\/jdk\/file\/687fd7c7986d\/src\/share\/classes\/java\/util\/Optional.java\" title=\"Optional.java\">sourcecode of Optional.java<\/a><\/strong> for more insight.<\/p>\n<p><a name=\"why_optional\"><\/a><\/p>\n<h2>5) What is Optional trying to solve?<\/h2>\n<p><code>Optional<\/code> is an attempt to reduce the number of null pointer exceptions in Java systems, by adding the possibility to build more expressive APIs considering that sometimes return values are missing. If <code>Optional<\/code> was there since the beginning, today most libraries and applications would likely deal better with missing return values, reducing the number of null pointer exceptions and the overall number of bugs in general.<\/p>\n<p>By using <code>Optional<\/code>, user is forced to think about the exceptional case. Besides the increase in readability that comes from giving null a name, the <strong>biggest advantage of Optional is its idiot-proof-ness<\/strong>. It forces you to actively think about the absent case if you want your program to compile at all, since you have to actively unwrap the Optional and address that failure cases.<\/p>\n<p><a name=\"why_not_optional\"><\/a><\/p>\n<h2>6) What is Optional not trying to solve?<\/h2>\n<p>Optional is <strong>not meant to be a mechanism to avoid all types of null pointers<\/strong>. e.g. The mandatory input parameters of methods and constructors will still have to be tested.<\/p>\n<p>Like when using null, <strong>Optional<\/strong> does not help with conveying the meaning of an absent value. So the caller of the method will still have to check the javadoc of the API for understanding the meaning of the absent <strong>Optional<\/strong>, in order to deal with it properly.<\/p>\n<p>Please note that <code>Optional<\/code> is not meant to be used in these below contexts, as possibly it won&#8217;t buy us anything:<\/p>\n<ul>\n<li>in the domain model layer (it&#8217;s not serializable)<\/li>\n<li>in DTOs (it&#8217;s not serializable)<\/li>\n<li>in input parameters of methods<\/li>\n<li>in constructor parameters<\/li>\n<\/ul>\n<p><a name=\"how_optional_should_be_used\"><\/a><\/p>\n<h2>7) How should Optional be used?<\/h2>\n<p><strong>Optional<\/strong> should be used almost all the time<em><strong> as the return type of functions<\/strong><\/em> that might not return a value.<\/p>\n<p>This is a quote from OpenJDK mailing list:<\/p>\n<blockquote><p>The JSR-335 EG felt fairly strongly that Optional should not be on any more than needed to support the optional-return idiom only.<br \/>\nSomeone suggested maybe even renaming it to &#8220;<strong><em>OptionalReturn<\/em><\/strong>&#8220;.<\/p><\/blockquote>\n<p>This essentially means that <code>Optional<\/code> should be used as the return type of certain service, repository or utility methods only where they truly serve the purpose.<\/p>\n<p><a name=\"conclusion\"><\/a><\/p>\n<h2>8) Conclusion<\/h2>\n<p>In this article, we learned that how you can adopt the new <strong>Java SE 8 <code>java.util.Optional<\/code><\/strong>. The purpose of <strong>Optional<\/strong> is not to replace every single null reference in your code base but rather to help you design better APIs in which, just by reading the signature of a method, users can tell whether to expect an optional value and deal with it appropriately.<\/p>\n<p>That&#8217;s all for this awesome feature. Let me know of your thoughts in comments section.<\/p>\n<p><strong>Happy Learning !!<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>All of us must have encountered NullPointerException in our applications. This exception happen when you try to utilize a object reference which has not been initialized, initialized with null or simply does not point to any instance. NULL simply means &#8216;absence of a value&#8217;. Most probably, the Romans were only ones, who didn\u2019t run into &#8230; <a title=\"Java 8 Optionals : Complete Reference\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java8\/java-8-optionals-complete-reference\/\" aria-label=\"More on Java 8 Optionals : Complete Reference\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[18],"tags":[1409,1434,613],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":3,"uagb_excerpt":"All of us must have encountered NullPointerException in our applications. This exception happen when you try to utilize a object reference which has not been initialized, initialized with null or simply does not point to any instance. NULL simply means &#8216;absence of a value&#8217;. Most probably, the Romans were only ones, who didn\u2019t run into&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3951"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=3951"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3951\/revisions"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=3951"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=3951"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=3951"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}