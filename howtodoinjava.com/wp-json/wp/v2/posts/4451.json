{"id":4451,"date":"2015-01-21T14:10:24","date_gmt":"2015-01-21T08:40:24","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4451"},"modified":"2022-01-25T15:06:21","modified_gmt":"2022-01-25T09:36:21","slug":"sha-md5-file-checksum-hash","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/java-security\/sha-md5-file-checksum-hash\/","title":{"rendered":"Java File Checksum &#8211; MD5 and SHA-256 Hash Example"},"content":{"rendered":"<p>A checksum hash is an encrypted sequence of characters obtained after applying certain algorithms and manipulations on user-provided content. In this Java hashing tutorial, we will learn to <strong>generate the checksum hash for the files<\/strong>.<\/p>\n<h2>1. Why we may want to generate the hash for a file?<\/h2>\n<p>Any serious file provider provides a mechanism to have a checksum on their downloadable files. A checksum is a form of mechanism to ensure that the file we downloaded is properly downloaded. <\/p>\n<p>Checksum acts like a <strong>proof of the validity of a file<\/strong> so if a file gets corrupted this checksum will change and thus let us know that this file is not the same file or the file has been corrupted between the transfer for any reason.<\/p>\n<p>We can also create the checksum of the file to detect any possible change in the file by third party e.g. license files. We provide licenses to clients which they may upload to their server. We can cross verify the checksum of the file to verify that the license file has not been modified after creation.<\/p>\n<blockquote><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/java-security\/how-to-generate-secure-password-hash-md5-sha-pbkdf2-bcrypt-examples\/\">Java MD5, SHA, PBKDF2, BCrypt and SCrypt Examples<\/a><\/p><\/blockquote>\n<h2>2. How to generate checksum hash for a file<\/h2>\n<p>To <strong>create checksum for a file<\/strong>, we will need to read the content of file byte by byte in chunks, and then generate the hash for it using the given below function.<\/p>\n<p>This function takes two arguments:<\/p>\n<ol>\n<li>The message digest algorithm&#8217;s implementation<\/li>\n<li>A file for which checksum needs to be generated<\/li>\n<\/ol>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nprivate static String getFileChecksum(MessageDigest digest, File file) throws IOException\r\n{\r\n\t\/\/Get file input stream for reading the file content\r\n\tFileInputStream fis = new FileInputStream(file);\r\n\t\r\n\t\/\/Create byte array to read data in chunks\r\n\tbyte[] byteArray = new byte[1024];\r\n\tint bytesCount = 0; \r\n\t \r\n\t\/\/Read file data and update in message digest\r\n\twhile ((bytesCount = fis.read(byteArray)) != -1) {\r\n\t\tdigest.update(byteArray, 0, bytesCount);\r\n\t};\r\n\t\r\n\t\/\/close the stream; We don't need it now.\r\n\tfis.close();\r\n\t\r\n\t\/\/Get the hash's bytes\r\n\tbyte[] bytes = digest.digest();\r\n\t\r\n\t\/\/This bytes[] has bytes in decimal format;\r\n\t\/\/Convert it to hexadecimal format\r\n\tStringBuilder sb = new StringBuilder();\r\n\tfor(int i=0; i&lt; bytes.length ;i++)\r\n\t{\r\n\t\tsb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));\r\n\t}\r\n\t\r\n\t\/\/return complete hash\r\n   return sb.toString();\r\n}\r\n<\/pre>\n<h4>Example 1: Generate MD5 Hash for a File in Java<\/h4>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/Create checksum for this file\r\nFile file = new File(&quot;c:\/temp\/testOut.txt&quot;);\r\n\r\n\/\/Use MD5 algorithm\r\nMessageDigest md5Digest = MessageDigest.getInstance(&quot;MD5&quot;);\r\n\r\n\/\/Get the checksum\r\nString checksum = getFileChecksum(md5Digest, file);\r\n\r\n\/\/see checksum\r\nSystem.out.println(checksum);\r\n<\/pre>\n<h4>Example 2: Generate SHA-256 Hash for a File in Java<\/h4>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/Use SHA-1 algorithm\r\nMessageDigest shaDigest = MessageDigest.getInstance(&quot;SHA-256&quot;);\r\n\r\n\/\/SHA-1 checksum \r\nString shaChecksum = getFileChecksum(shaDigest, file);\r\n<\/pre>\n<p>Drop me a comment if something needs more explanation.<\/p>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A checksum hash is an encrypted sequence of characters obtained after applying certain algorithms and manipulations on user-provided content. In this Java hashing tutorial, we will learn to generate the checksum hash for the files. 1. Why we may want to generate the hash for a file? Any serious file provider provides a mechanism to &#8230; <a title=\"Java File Checksum &#8211; MD5 and SHA-256 Hash Example\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/java-security\/sha-md5-file-checksum-hash\/\" aria-label=\"More on Java File Checksum &#8211; MD5 and SHA-256 Hash Example\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":7778,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[42],"tags":[231,1415],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/10\/Bypass-SSL-Security.png",256,256,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/10\/Bypass-SSL-Security-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/10\/Bypass-SSL-Security.png",256,256,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/10\/Bypass-SSL-Security.png",256,256,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/10\/Bypass-SSL-Security.png",256,256,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/10\/Bypass-SSL-Security.png",256,256,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/10\/Bypass-SSL-Security.png",256,256,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2016\/10\/Bypass-SSL-Security.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":12,"uagb_excerpt":"A checksum hash is an encrypted sequence of characters obtained after applying certain algorithms and manipulations on user-provided content. In this Java hashing tutorial, we will learn to generate the checksum hash for the files. 1. Why we may want to generate the hash for a file? Any serious file provider provides a mechanism to&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4451"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4451"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4451\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/7778"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4451"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4451"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4451"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}