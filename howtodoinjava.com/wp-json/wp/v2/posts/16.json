{"id":16,"date":"2018-08-22T21:18:58","date_gmt":"2018-08-22T15:48:58","guid":{"rendered":"http:\/\/howiseejava.wordpress.com\/?p=16"},"modified":"2022-01-30T00:06:14","modified_gmt":"2022-01-29T18:36:14","slug":"java-hashcode-equals-methods","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/","title":{"rendered":"Java hashCode() and equals() Methods"},"content":{"rendered":"\n<p>Learn about Java <strong><code>hashCode()<\/code> and <code>equals()<\/code> methods<\/strong>, their <strong>default implementation, and how to correctly override them<\/strong>. Also, we will learn to implement these methods using 3rd party classes <code>HashCodeBuilder<\/code> and <code>EqualsBuilder<\/code>.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><code><strong><a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/lang\/Object.html#hashCode%28%29\" target=\"_blank\" rel=\"noopener noreferrer\">hashCode()<\/a><\/strong><\/code> and <code><strong><a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/lang\/Object.html#equals%28java.lang.Object%29\" target=\"_blank\" rel=\"noopener noreferrer\">equals()<\/a><\/strong><\/code> methods have been defined in <code>Object<\/code> class which is parent class for all java classes. For this reason, all java objects inherit a default implementation of these methods.<\/p><\/blockquote>\n\n\n\n<pre class=\"wp-block-preformatted\">Table of Contents:\n\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/#usage\">1. Uses of hashCode() and equals() Methods<\/a>\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/#override_default_behavior\">2. Override the default behavior<\/a>\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/#override_using_apache_commons\">3. EqualsBuilder and HashCodeBuilder<\/a>\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/#eclipse\">4. Generate hashCode() and equals() using Eclipse<\/a>\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/#notes\">5. Important things to remember<\/a>\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-hashcode-equals-methods\/#orm\">6. Special Attention When Using in ORM<\/a><a name=\"usage\"><\/a><\/pre>\n\n\n\n<h2 id=\"1-uses-of-hashcode-and-equals-methods\">1. Uses of hashCode() and equals() Methods<\/h2>\n\n\n\n<ol><li><code>equals(Object otherObject)<\/code> &#8211;  verifies the equality of two objects. Its default implementation simply checks the object references of two objects to verify their equality.<br><em>By default, two objects are equal if and only if they are refer to the same memory location.<\/em> Most Java classes override this method to provide their own comparison logic.<\/li><li><code><code>hashcode()<\/code><\/code> &#8211; returns a unique integer value for the object in runtime. <br>By default, integer value is derived from memory address of the object in heap (but it&#8217;s not mandatory).<br>The object&#8217;s hash code is used for determining the index location, when this object needs to be stored in some <a title=\"Hashtable\" href=\"https:\/\/en.wikipedia.org\/wiki\/Hash_table\">HashTable<\/a> like data structure.<\/li><\/ol>\n\n\n\n<h3 id=\"1-1-contract-between-hashcode-and-equals\">1.1. Contract between hashCode() and equals()<\/h3>\n\n\n\n<p>Overriding the the <code>hashCode()<\/code> is generally necessary whenever <code>equals()<\/code> is overridden to maintain the general contract for the <code>hashCode()<\/code> method, which states that <strong>equal objects must have equal hash codes<\/strong>.<\/p>\n\n\n\n<ul><li>Whenever it is invoked on the same object more than once during an execution of a Java application, the <strong><code>hashCode<\/code>() must consistently return the same integer<\/strong>, provided no information used in <code>equals<\/code> comparisons on the object is modified.<br>This integer need not remain consistent between the two executions of the same application or program.<\/li><li><strong>If two objects are equal<\/strong> according to the <code>equals()<\/code> method, then calling the <code>hashCode()<\/code> on each of the <strong>two objects must produce the same integer<\/strong> result.<\/li><li>It is <strong><em>not<\/em> required that if two objects are unequal<\/strong> according to the <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/lang\/Object.html#equals-java.lang.Object-\"><code>equals()<\/code><\/a>, then calling the <code>hashCode()<\/code> on each of the <strong>both objects must produce distinct integer<\/strong> results.<br>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.<a name=\"override_default_behavior\"><\/a><\/li><\/ul>\n\n\n\n<h2 id=\"2-overriding-the-default-behavior\">2. Overriding the Default Behavior<\/h2>\n\n\n\n<p>Everything works fine until we do not override any of both methods in our classes. But, sometimes, the application needs to change the default behavior of some objects. <\/p>\n\n\n\n<p>Let us understand <strong>why we need to override equals and hashcode<\/strong> methods.<\/p>\n\n\n\n<h4 id=\"2-1-the-default-behavior-of-employee-class\">2.1. The default behavior of Employee class<\/h4>\n\n\n\n<p>Let&#8217;s take an example where your application has <code>Employee<\/code> object. Let us create a minimal possible structure of <code>Employee<\/code> class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Employee\n{\n\tprivate Integer id;\n\tprivate String firstname;\n\tprivate String lastName;\n\tprivate String department;\n\n\t\/\/Setters and Getters\n}<\/code><\/pre>\n\n\n\n<p>Above <code>Employee<\/code> class has some fundamental attributes and their accessor methods. Now consider a simple situation where you need to <strong><a href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-comparable-interface\/\">compare two Employee objects<\/a><\/strong>. Both employee objects have the same <code>id<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class EqualsTest {\n\tpublic static void main(String[] args) {\n\t\tEmployee e1 = new Employee();\n\t\tEmployee e2 = new Employee();\n\n\t\te1.setId(100);\n\t\te2.setId(100);\n\n\t\tSystem.out.println(e1.equals(e2));\t\/\/false\n\t}\n}<\/code><\/pre>\n\n\n\n<p>No prize for guessing. The above method will print &#8220;<em>false<\/em>.&#8221; <\/p>\n\n\n\n<p><em>But is it correct after knowing that both objects represent the same employee? In a real-time application, this should return <code>true<\/code>.<\/em><\/p>\n\n\n\n<h4 id=\"2-2-should-we-override-only-equals-method\">2.2. Should we override only equals() method?<\/h4>\n\n\n\n<p>To achieve correct application behavior, we need to override <code>equals()<\/code> method as below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public boolean equals(Object o) {\n\tif(o == null)\n\t{\n\t\treturn false;\n\t}\n\tif (o == this)\n\t{\n\t\treturn true;\n\t}\n\tif (getClass() != o.getClass())\n\t{\n\t\treturn false;\n\t}\n\n\tEmployee e = (Employee) o;\n\treturn (this.getId() == e.getId());\n}<\/code><\/pre>\n\n\n\n<p>Add this method to the <code>Employee<\/code> class, and <code>EqualsTest<\/code> will start returning <code>\"true\"<\/code>.<\/p>\n\n\n\n<p>So are we done? Not yet. Let&#8217;s test the above-modified <code>Employee<\/code> class again in a different way.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.HashSet;\nimport java.util.Set;\n\npublic class EqualsTest\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tEmployee e1 = new Employee();\n\t\tEmployee e2 = new Employee();\n\n\t\te1.setId(100);\n\t\te2.setId(100);\n\n\t\t\/\/Prints 'true'\n\t\tSystem.out.println(e1.equals(e2));\n\n\t\tSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();\n\t\temployees.add(e1);\n\t\temployees.add(e2);\n\n\t\tSystem.out.println(employees);\t\/\/Prints two objects\n\t}\n}<\/code><\/pre>\n\n\n\n<p>The above example prints two objects in the second print statement. <\/p>\n\n\n\n<p>If both employee objects have been equal, in a <code>Set<\/code> which stores unique objects, there must be only one instance inside <code>HashSet<\/code> because both objects refer to the same employee. What is it we are missing??<\/p>\n\n\n\n<h4 id=\"2-3-overriding-hashcode-is-necessary\">2.3. Overriding hashCode() is necessary<\/h4>\n\n\n\n<p>We are missing the second important method <code>hashCode()<\/code>. As java docs say, if we override <code>equals()<\/code> then we <strong><em>must<\/em><\/strong> override <code>hashCode()<\/code>. So let&#8217;s add another method in our <code>Employee<\/code> class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Override\npublic int hashCode()\n{\n\tfinal int PRIME = 31;\n\tint result = 1;\n\tresult = PRIME * result + getId();\n\treturn result;\n}<\/code><\/pre>\n\n\n\n<p>Once the above method is added in Employee class, the second statement starts printing only a single object in the second statement and <strong>thus validating the true equality of <code>e1<\/code> and <code>e2<\/code><\/strong>.<a name=\"override_using_apache_commons\"><\/a><\/p>\n\n\n\n<h2 id=\"3-equalsbuilder-and-hashcodebuilder\">3. EqualsBuilder and HashCodeBuilder<\/h2>\n\n\n\n<p><a href=\"http:\/\/commons.apache.org\/proper\/commons-lang\/\" target=\"_blank\" rel=\"noopener noreferrer\">Apache commons<\/a> provide two excellent utility classes <a href=\"https:\/\/commons.apache.org\/proper\/commons-lang\/apidocs\/org\/apache\/commons\/lang3\/builder\/HashCodeBuilder.html\" target=\"_blank\" rel=\"noopener noreferrer\">HashCodeBuilder<\/a> and <a href=\"https:\/\/commons.apache.org\/proper\/commons-lang\/apidocs\/org\/apache\/commons\/lang3\/builder\/EqualsBuilder.html\" target=\"_blank\" rel=\"noopener noreferrer\">EqualsBuilder<\/a> for generating hash code and equals methods.<\/p>\n\n\n\n<p>We can use these classes in the following manner.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\npublic class Employee\n{\n\tprivate Integer id;\n\tprivate String firstname;\n\tprivate String lastName;\n\tprivate String department;\n\n\t\/\/Setters and Getters\n\n\t@Override\n\tpublic int hashCode()\n\t{\n\t\tfinal int PRIME = 31;\n\t\treturn new HashCodeBuilder(getId()%2==0?getId()+1:getId(), PRIME).toHashCode();\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\tif (o == null)\n\t   return false;\n\n\tif (o == this)\n\t   return true;\n\n\tif (o.getClass() != getClass())\n\t   return false;\n\n\tEmployee e = (Employee) o;\n\n\treturn new EqualsBuilder().\n\t\t\t  append(getId(), e.getId()).\n\t\t\t  isEquals();\n\t}\n}<\/code><\/pre>\n\n\n\n<h2 id=\"4-generating-hashcode-and-equals-in-eclipse-ide\">4. Generating hashCode() and equals() in Eclipse IDE<\/h2>\n\n\n\n<p>Most editors provide common source code templates. For example, <strong>Eclipse IDE<\/strong> has an option to generate an excellent implementation of <code>hashCode()<\/code> and <code>equals()<\/code>.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Right click on Java file -&gt; Source -&gt; Generate hashCode() and equals() &#8230;<\/p><\/blockquote>\n\n\n\n<div class=\"wp-block-image size-full wp-image-13246\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"763\" height=\"439\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/hashcode-and-equals-in-eclipse.png\" alt=\"Generate HashCode and Equals In Eclipse\" class=\"wp-image-13246\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/hashcode-and-equals-in-eclipse.png 763w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/08\/hashcode-and-equals-in-eclipse-300x173.png 300w\" sizes=\"(max-width: 763px) 100vw, 763px\" \/><figcaption>Generate hashCode() and equals() In Eclipse<\/figcaption><\/figure><\/div>\n\n\n\n<p><a name=\"notes\"><\/a><\/p>\n\n\n\n<h2 id=\"5-best-practices\">5. Best Practices<\/h2>\n\n\n\n<ol><li>Always use the same fields to generate <code>hashCode()<\/code> and <code>equals()<\/code>. As in our case, we have used employee <code>id<\/code>.<\/li><li>The <code>equals()<\/code> must be <em>consistent<\/em> (if the objects are not modified, then it must keep returning the same value).<\/li><li>Whenever <strong>a.equals(b)<\/strong>, then <em>a.hashCode()<\/em> must be same as <em>b.hashCode()<\/em>.<\/li><li>If we override one method, then we should override the other method as well.<a name=\"orm\"><\/a><\/li><\/ol>\n\n\n\n<h2 id=\"6-special-attention-when-using-in-orm\">6. Special Attention When Using in <em>ORM<\/em><\/h2>\n\n\n\n<p>If you&#8217;re dealing with an ORM, make sure always to use getters<strong> and never use the field references in <code>hashCode()<\/code> and <code>equals()<\/code><\/strong>. Because in ORM, occasionally fields are lazy loaded and not available until we call their getter methods.<\/p>\n\n\n\n<p>For example, In our <code>Employee<\/code> class if we use <code><em>e1.id == e2.id<\/em><\/code>. It is very much possible that <code>id<\/code> field is lazy-loaded. So, in this case, id field inside the methods might be zero or <code>null<\/code>, and thus resulting in incorrect behavior.<\/p>\n\n\n\n<p>But if uses <code><em>e1.getId() == e2.getId()<\/em><\/code>, we can be sure even if the field is lazy-loaded, calling the field getter will populate the field first.<\/p>\n\n\n\n<p>If you feel I am missing something or wrong somewhere, please leave a comment. I will update this post again to help others.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java hashCode() and equals() methods. Learn contract between hashCode and equals methods. How to correctly override both methods and best practices.<\/p>\n","protected":false},"author":2,"featured_media":10411,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[1480,1426],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",150,105,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",300,210,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",735,514,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/Java-10.png",120,84,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":81,"uagb_excerpt":"Java hashCode() and equals() methods. Learn contract between hashCode and equals methods. How to correctly override both methods and best practices.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/16"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=16"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/16\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/10411"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=16"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=16"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=16"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}