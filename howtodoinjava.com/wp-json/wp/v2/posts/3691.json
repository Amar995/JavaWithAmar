{"id":3691,"date":"2014-03-25T19:22:58","date_gmt":"2014-03-25T13:52:58","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=3691"},"modified":"2022-01-09T22:31:50","modified_gmt":"2022-01-09T17:01:50","slug":"lambda-expressions","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/","title":{"rendered":"Lambda Expressions in Java"},"content":{"rendered":"\n<p>Lambda expressions are known to many of us who have worked on advanced languages like Scala. The term \u201c<em>lambda<\/em>\u201d has its origin in Lambda calculus that uses the Greek&nbsp;letter&nbsp;lambda (\u03bb) to denote a <em>function abstraction<\/em>.<\/p>\n\n\n\n<p>Lambda expressions were introduced to Java as part of <a href=\"https:\/\/howtodoinjava.com\/java-8-tutorial\/\" target=\"_blank\" rel=\"noreferrer noopener\">Java 8<\/a> release.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-4fb319d5 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-what-are-lambda-expressions\">1. What are Lambda Expressions?<\/a><li class=\"uagb-toc__list\"><a href=\"#2-lambda-expression-example\">2. Lambda Expression Example<\/a><li class=\"uagb-toc__list\"><a href=\"#3-features-of-lambda-expressions\">3. Features of Lambda Expressions<\/a><li class=\"uagb-toc__list\"><a href=\"#4-more-examples\">4. More Examples<\/a><li class=\"uagb-toc__list\"><a href=\"#5-advantages-of-lambda-expressions\">5. Advantages of Lambda Expressions<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. What are Lambda Expressions?<\/h2>\n\n\n\n<p>In general programming language, a Lambda expression (or function) is an <strong>anonymous function<\/strong>, i.e., a <strong>function without any name or identifier, and with a list of formal parameters and a body<\/strong>. An arrow (<code>-&gt;<\/code>) is used to separate the list of parameters and the body.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default info\"><p>&nbsp;In Java, a lambda expression is an expression that represents an <strong>instance of a <a href=\"https:\/\/howtodoinjava.com\/java\/stream\/functional-interface-tutorial\/\">functional interface<\/a><\/strong>.<\/p><\/blockquote>\n\n\n\n<p>Similar to other types in Java, lambda expressions are also typed, and their type is a functional interface type. To infer the type, the compiler looks at the left side of the assignment in a lambda expression.<\/p>\n\n\n\n<p>Note that the lambda expression itself does not contain the information about which functional interface it is implementing. This information is deduced from the context in which expression is used.<\/p>\n\n\n\n<h2>2. Lambda Expression Example<\/h2>\n\n\n\n<p>A typical lambda expression syntax will be like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">(parameters) -&gt; expression<\/code><\/pre>\n\n\n\n<p>For example, the below-given lambda expression takes two parameters and returns their addition. Based on the type of <code>x<\/code> and <code>y<\/code>, the expression will be used differently. <\/p>\n\n\n\n<ul><li>If the parameters match to <code>Integer<\/code> the expression will add the two numbers. <\/li><li>If the parameters of type <code>String<\/code> the expression will concat the two strings.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">(x, y) -&gt; x + y<\/code><\/pre>\n\n\n\n<p>For example, we have the following functional interface <em>Operator<\/em>. It has one method <em>process()<\/em> that takes two parameters and returns a value.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@FunctionalInterface\ninterface Operator&lt;T&gt; {\n  T process(T a, T b);\n}<\/code><\/pre>\n\n\n\n<p>We can create lambda expressions for this functional interface in the following manner. Notice we are able to create the method implementations and immediately use them. <strong>We do not need to create a concrete class<\/strong> <em>OperatorImpl<\/em> that implements <em>Operator<\/em> interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Operator&lt;Integer&gt; addOperation = (a, b) -&gt;  a + b;\nSystem.out.println(addOperation.process(3, 3));     \/\/Prints 6\n\nOperator&lt;String&gt; appendOperation = (a, b) -&gt;  a + b;\nSystem.out.println(appendOperation.process(\"3\", \"3\"));  \/\/Prints 33\n\nOperator&lt;Integer&gt; multiplyOperation = (a, b) -&gt;  a * b;\nSystem.out.println(multiplyOperation.process(3, 3));    \/\/Prints 9<\/code><\/pre>\n\n\n\n<p>Two good examples of functional interface types are <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/function\/Consumer.html\" target=\"_blank\" rel=\"noreferrer noopener\">Consumer<\/a> and <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/function\/BiConsumer.html\" target=\"_blank\" rel=\"noreferrer noopener\">BiConsumer<\/a> interfaces that are heavily used in Stream API for creating lambda expressions.<\/p>\n\n\n\n<h2>3. Features of Lambda Expressions<\/h2>\n\n\n\n<ul><li>A lambda expression can have<strong> zero, one or more parameters<\/strong>.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">(x, y) -&gt; x + y\n(x, y, z) -&gt; x + y + z<\/code><\/pre>\n\n\n\n<ul><li>The body of the lambda expressions can contain <strong>zero, one or more statements<\/strong>. If the body of lambda expression has a single statement curly brackets are not mandatory and the return type of the anonymous function is the same as that of the body expression. When there is more than one statement in the body then these must be enclosed in curly brackets. <\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">(parameters) -&gt; { statements; }<\/code><\/pre>\n\n\n\n<ul><li>The type of the parameters can be explicitly declared or it can be inferred from the context. In previous example, the type of <em>addOperation<\/em> and <em>appendOperation<\/em> is derived from context.<\/li><\/ul>\n\n\n\n<ul><li>Multiple parameters are enclosed in mandatory parentheses and separated by commas. Empty parentheses are used to represent an empty set of parameters. <\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">() -&gt; expression<\/code><\/pre>\n\n\n\n<ul><li>When there is a single parameter, if its type is inferred, it is not mandatory to use parentheses.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">a -&gt; return a * a;<\/code><\/pre>\n\n\n\n<ul><li>A lambda expression cannot have a&nbsp;<em>throws<\/em>&nbsp;clause. It is inferred from the context of its use and its body.<\/li><li>Lambda expressions cannot be <em>generic<\/em> i.e. they cannot declare type parameters.<\/li><\/ul>\n\n\n\n<h2>4. More Examples<\/h2>\n\n\n\n<p>We are listing out some code samples which you can read and analyze how a lambda expression can be used in the day-to-day programming.<\/p>\n\n\n\n<h4>Example 1: Using lambda expression to iterate over a List and perform some action on list items<\/h4>\n\n\n\n<p>In the given example, we are iterating over the list and printing all the list elements in the standard output. We can perform any desired operation in place of printing them.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">List&lt;String&gt; pointList = new ArrayList();\n \npointList.add(\"1\");\npointList.add(\"2\");\n \npointList.forEach( p -&gt;  { System.out.println(p); } );<\/code><\/pre>\n\n\n\n<h4>Example 2: Using lambda expression to create and start a Thread in Java<\/h4>\n\n\n\n<p>In given example, we are passing the instance of <code>Runnable<\/code> interface into the <code>Thread<\/code> constructor.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">new Thread(\n    () -&gt; System.out.println(\"My Runnable\");\n).start();<\/code><\/pre>\n\n\n\n<h4>Example 3: Using lambda expression for adding an event listener to a GUI component<\/h4>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">JButton button =  new JButton(\"Submit\");\nbutton.addActionListener((e) -&gt; {\n    System.out.println(\"Click event triggered !!\");\n});<\/code><\/pre>\n\n\n\n<p>Above are very basic examples of lambda expressions in java 8. I will be coming up with more useful examples and code samples from time to time.<\/p>\n\n\n\n<h2>5. Advantages of Lambda Expressions<\/h2>\n\n\n\n<p>Lambda expressions enable many benefits of <em>functional programming<\/em> to Java. Like most OOP languages, Java is built around classes and objects and treats only the classes as their first-class citizens. The other important programming entities, such as functions, take the back seat.<\/p>\n\n\n\n<p>But in functional programming, we can define functions, give them reference variables, and pass them as method arguments and much more. JavaScript is a good example of functional programming where we can pass callback methods to <a href=\"https:\/\/howtodoinjava.com\/ajax\/complete-ajax-tutorial\/\">Ajax<\/a> calls and so on. <\/p>\n\n\n\n<p>Note that we were able to do everything prior to Java 8 using anonymous classes that we can do with lambda expressions, but they use a very concise syntax to achieve the same result. Let us see the comparison of the same method implementation using both techniques.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Using lambda expression\nOperator&lt;Integer&gt; addOperation = (a, b) -&gt; a + b;\n\n\/\/Using anonymous class\nOperator&lt;Integer&gt; addOperation = new Operator&lt;Integer&gt;() {\n  @Override\n  public Integer process(Integer a, Integer b) {\n    return a + b;\n  }\n};<\/code><\/pre>\n\n\n\n<p>Lambda expression is a very useful feature and has been lacking in Java from the beginning. Now with Java 8, we can also use functional programming concepts with the help of this.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Lambda expressions are known to many of us who have worked on advanced languages like Scala. The term \u201clambda\u201d has its origin in Lambda calculus that uses the Greek&nbsp;letter&nbsp;lambda (\u03bb) to denote a function abstraction. Lambda expressions were introduced to Java as part of Java 8 release. 1. What are Lambda Expressions? In general programming &#8230; <a title=\"Lambda Expressions in Java\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\" aria-label=\"More on Lambda Expressions in Java\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":3692,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[18],"tags":[579,1409,576],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/03\/lambda.png",344,209,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/03\/lambda-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/03\/lambda-300x182.png",300,182,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/03\/lambda.png",344,209,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/03\/lambda.png",344,209,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/03\/lambda.png",344,209,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/03\/lambda.png",344,209,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/03\/lambda.png",120,73,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":18,"uagb_excerpt":"Lambda expressions are known to many of us who have worked on advanced languages like Scala. The term \u201clambda\u201d has its origin in Lambda calculus that uses the Greek&nbsp;letter&nbsp;lambda (\u03bb) to denote a function abstraction. Lambda expressions were introduced to Java as part of Java 8 release. 1. What are Lambda Expressions? In general programming&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3691"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=3691"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3691\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/3692"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=3691"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=3691"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=3691"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}