{"id":9052,"date":"2017-07-18T09:56:31","date_gmt":"2017-07-18T04:26:31","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=9052"},"modified":"2022-01-28T00:26:08","modified_gmt":"2022-01-27T18:56:08","slug":"swagger-spring-mvc-rest-example","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/swagger2\/swagger-spring-mvc-rest-example\/","title":{"rendered":"Generate REST API Docs with Swagger"},"content":{"rendered":"<p>Now a days <a href=\"https:\/\/restfulapi.net\/\">REST<\/a> and <a href=\"\/\/howtodoinjava.com\/microservices\/microservices-definition-principles-benefits\/\">Microservices<\/a> have got a lot of momentum. At the same time, actual REST specification does not suggest any standard way to document the REST APIs that we are going to expose [like WSDL for SOAP]. As a result, everybody is documenting their APIs in their own way, resulting a gap in common structure which all can easily follow, understand and use. We need to have a common pattern and tool.<\/p>\n<p><a href=\"https:\/\/swagger.io\/\" target=\"_blank\" rel=\"noopener noreferrer\">Swagger<\/a> (backed by companies like Google, IBM, Microsoft) does this same job of filling the gap of common documentation style. In this tutorial, we will learn to <strong>use Swagger to generate REST API docs<\/strong> using <strong>swagger 2 annotations<\/strong>.<\/p>\n<pre>Table of Contents\r\n\r\n<a href=\"#swagger\">What is Swagger<\/a>\r\n<a href=\"#tech-stack\">Project Structure and Technology Stack<\/a>\r\n<a href=\"#create-rest-apis\">Create REST APIs<\/a>\r\n<a href=\"#swagger2-config\">Swagger2 Configuration<\/a>\r\n<a href=\"#swagger2-annotations\">Swagger2 Annotations<\/a>\r\n<a href=\"#demo\">Demo<\/a><\/pre>\n<p><a id=\"swagger\"><\/a><\/p>\n<h2>What is Swagger<\/h2>\n<p>Swagger (now the &#8220;Open API Initiative&#8221;) is a specification and framework for describing REST APIs using a common language that everyone can understand. There are other available frameworks that have gained some popularity, such as RAML, Summation etc. but Swagger is most popular at this point of time considering its features and acceptance among the developer community.<\/p>\n<p>It offers both human readable and machine readable format of documentation. It provides both JSON and UI support. JSON  can be used as machine readable format and <code>Swagger-UI<\/code> is for visual display which is easy for humans to understand by just browsing the api documentation.<\/p>\n<p><a id=\"tech-stack\"><\/a><\/p>\n<h2>Project Structure and Technology Stack<\/h2>\n<p>The folder structure of project is :<\/p>\n<figure id=\"attachment_9070\" aria-describedby=\"caption-attachment-9070\" style=\"width: 504px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/Swagger2-Project-Structure.png\" alt=\"Swagger2 Project Structure\" width=\"514\" height=\"508\" class=\"size-full wp-image-9070\" \/><figcaption id=\"caption-attachment-9070\" class=\"wp-caption-text\">Swagger2 Project Structure<\/figcaption><\/figure>\n<p>We will use the below technologies for this demo.<\/p>\n<ol>\n<li>Eclipse as IDE<\/li>\n<li><a href=\"\/\/howtodoinjava.com\/maven\/\">Maven<\/a> as build tool<\/li>\n<li>Spring Boot as application framework<\/li>\n<li>Spring Rest as REST API framework<\/li>\n<li>Swagger2 as REST documentation framework<\/li>\n<li><a href=\"\/\/howtodoinjava.com\/java-8-tutorial\/\">Java 1.8<\/a><\/li>\n<\/ol>\n<p><a id=\"create-rest-apis\"><\/a><\/p>\n<h2>Create REST APIs<\/h2>\n<p>We will first create some REST APIs which will be used for demonstration of Swagger documentation capability. We will use the Spring boot style of exposing rest API for faster development time.<\/p>\n<ol>\n<li>Create a Spring boot project from <a href=\"https:\/\/start.spring.io\/\" target=\"_blank\" rel=\"noopener noreferrer\">Spring Boot initializer<\/a> portal with <code>Web<\/code>, <code>Rest Repositories<\/code>, <code>Actuator<\/code> dependencies. Give other maven GAV coordinates and download the project. This screen will look like:\n<figure id=\"attachment_9055\" aria-describedby=\"caption-attachment-9055\" style=\"width: 1342px\" class=\"wp-caption aligncenter\"><a href=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/Project_Generation.jpg\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/Project_Generation.jpg\" alt=\"\" width=\"1352\" height=\"698\" class=\"size-full wp-image-9055\" \/><\/a><figcaption id=\"caption-attachment-9055\" class=\"wp-caption-text\">Spring Boot REST Project Generation<\/figcaption><\/figure>\n<p>Unzip and import the project into Eclipse as existing maven project. In this step, all necessary dependencies will be downloaded from maven repository. Perform a fresh <code>mvn clean install<\/code> at this step so that all spring-boot related artifacts got downloaded properly.<\/li>\n<li>Open <code>application.properties<\/code> and add below property. This will start the application in  <code>\/swagger2-demo<\/code> context path.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">server.contextPath=\/swagger2-demo<\/pre>\n<\/li>\n<li>Add one REST controller <code>Swagger2DemoRestController<\/code> which will provide basic REST based functionalities on <code>Student<\/code> entity.\n<p><strong>Swagger2DemoRestController.java<\/strong><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npackage com.example.springbootswagger2.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport com.example.springbootswagger2.model.Student;\r\n\r\n@RestController\r\npublic class Swagger2DemoRestController {\r\n\r\n\tList&lt;Student&gt; students = new ArrayList&lt;Student&gt;();\r\n\t{\r\n\t\tstudents.add(new Student(&quot;Sajal&quot;, &quot;IV&quot;, &quot;India&quot;));\r\n\t\tstudents.add(new Student(&quot;Lokesh&quot;, &quot;V&quot;, &quot;India&quot;));\r\n\t\tstudents.add(new Student(&quot;Kajal&quot;, &quot;III&quot;, &quot;USA&quot;));\r\n\t\tstudents.add(new Student(&quot;Sukesh&quot;, &quot;VI&quot;, &quot;USA&quot;));\r\n\t}\r\n\r\n\t@RequestMapping(value = &quot;\/getStudents&quot;)\r\n\tpublic List&lt;Student&gt; getStudents() {\r\n\t\treturn students;\r\n\t}\r\n\r\n\t@RequestMapping(value = &quot;\/getStudent\/{name}&quot;)\r\n\tpublic Student getStudent(@PathVariable(value = &quot;name&quot;) String name) {\r\n\t\treturn students.stream().filter(x -&gt; x.getName().equalsIgnoreCase(name)).collect(Collectors.toList()).get(0);\r\n\t}\r\n\r\n\t@RequestMapping(value = &quot;\/getStudentByCountry\/{country}&quot;)\r\n\tpublic List&lt;Student&gt; getStudentByCountry(@PathVariable(value = &quot;country&quot;) String country) {\r\n\t\tSystem.out.println(&quot;Searching Student in country : &quot; + country);\r\n\t\tList&lt;Student&gt; studentsByCountry = students.stream().filter(x -&gt; x.getCountry().equalsIgnoreCase(country))\r\n\t\t\t\t.collect(Collectors.toList());\r\n\t\tSystem.out.println(studentsByCountry);\r\n\t\treturn studentsByCountry;\r\n\t}\r\n\r\n\t@RequestMapping(value = &quot;\/getStudentByClass\/{cls}&quot;)\r\n\tpublic List&lt;Student&gt; getStudentByClass(@PathVariable(value = &quot;cls&quot;) String cls) {\r\n\t\treturn students.stream().filter(x -&gt; x.getCls().equalsIgnoreCase(cls)).collect(Collectors.toList());\r\n\t}\r\n}\r\n<\/pre>\n<p><strong>Student.java<\/strong><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\"> \r\npackage com.example.springbootswagger2.model;\r\n\r\npublic class Student {\r\n\t\r\n\tprivate String name;\r\n\tprivate String cls;\r\n\tprivate String country;\r\n\r\n\tpublic Student(String name, String cls, String country) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t\tthis.cls = cls;\r\n\t\tthis.country = country;\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic String getCls() {\r\n\t\treturn cls;\r\n\t}\r\n\r\n\tpublic String getCountry() {\r\n\t\treturn country;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn &quot;Student [name=&quot; + name + &quot;, cls=&quot; + cls + &quot;, country=&quot; + country + &quot;]&quot;;\r\n\t}\r\n}\r\n<\/pre>\n<\/li>\n<li>Start the application as Spring boot application. Test couple of REST Endpoints to check if they are working fine:\n<ul>\n<li>http:\/\/localhost:8080\/swagger2-demo\/getStudents<\/li>\n<li>http:\/\/localhost:8080\/swagger2-demo\/getStudent\/sajal<\/li>\n<li>http:\/\/localhost:8080\/swagger2-demo\/getStudentByCountry\/india<\/li>\n<li>http:\/\/localhost:8080\/swagger2-demo\/getStudentByClass\/v<\/li>\n<\/ul>\n<\/li>\n<\/ol>\n<p><a id=\"swagger2-config\"><\/a><\/p>\n<h2>Swagger2 Configuration<\/h2>\n<p>Our REST APIs are ready. Now add swagger 2 support to the project.ff<\/p>\n<h4>Add Swagger2 Maven Dependencies<\/h4>\n<p>Open pom.xml file of the <code>spring-boot-swagger2<\/code> project and add below two swagger related dependencies i.e. <code>springfox-swagger2<\/code> and <code>springfox-swagger-ui<\/code>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n     &lt;dependency&gt;\r\n\t\t\t&lt;groupId&gt;io.springfox&lt;\/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;springfox-swagger2&lt;\/artifactId&gt;\r\n\t\t\t&lt;version&gt;2.6.1&lt;\/version&gt;\r\n\t\t&lt;\/dependency&gt;\r\n\r\n\t\t&lt;dependency&gt;\r\n\t\t\t&lt;groupId&gt;io.springfox&lt;\/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;springfox-swagger-ui&lt;\/artifactId&gt;\r\n\t\t\t&lt;version&gt;2.6.1&lt;\/version&gt;\r\n\t\t&lt;\/dependency&gt;\r\n<\/pre>\n<div class=\"noticeboxesde bluenoticebox\">Actually <code>swagger<\/code> API  has couple of varieties and maintained in different artifacts. Today we will use the <code>springfox<\/code> because this version adapts well with any spring based configurations. We can try other configurations also easily and that should give same functionality &#8211; with no\/little change in configuration.<\/div>\n<h4>Add Swagger2 Configuration<\/h4>\n<p>Add the below configuration in the code base. To help you understand the configuration, I have added inline comments.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npackage com.example.springbootswagger2.configuration;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\r\nimport com.google.common.base.Predicates;\r\nimport springfox.documentation.builders.RequestHandlerSelectors;\r\nimport springfox.documentation.spi.DocumentationType;\r\nimport springfox.documentation.spring.web.plugins.Docket;\r\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\r\n\r\n@Configuration\r\n@EnableSwagger2\r\npublic class Swagger2UiConfiguration extends WebMvcConfigurerAdapter \r\n{\r\n\t@Bean\r\n\tpublic Docket api() {\r\n\t\t\/\/ @formatter:off\r\n\t\t\/\/Register the controllers to swagger\r\n\t\t\/\/Also it is configuring the Swagger Docket\r\n\t\treturn new Docket(DocumentationType.SWAGGER_2).select()\r\n\t\t\t\t\/\/ .apis(RequestHandlerSelectors.any())\r\n\t\t\t\t.apis(Predicates.not(RequestHandlerSelectors.basePackage(&quot;org.springframework.boot&quot;)))\r\n\t\t\t\t\/\/ .paths(PathSelectors.any())\r\n\t\t\t\t\/\/ .paths(PathSelectors.ant(&quot;\/swagger2-demo&quot;))\r\n\t\t\t\t.build();\r\n\t\t\/\/ @formatter:on\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) \r\n\t{\r\n\t\t\/\/enabling swagger-ui part for visual documentation\r\n\t\tregistry.addResourceHandler(&quot;swagger-ui.html&quot;).addResourceLocations(&quot;classpath:\/META-INF\/resources\/&quot;);\r\n\t\tregistry.addResourceHandler(&quot;\/webjars\/**&quot;).addResourceLocations(&quot;classpath:\/META-INF\/resources\/webjars\/&quot;);\r\n\t}\r\n}\r\n<\/pre>\n<h4>Verify Swagger2 JSON Format Docs<\/h4>\n<p>Do maven build and Start the server. Open the link <a href=\"http:\/\/localhost:8080\/swagger2-demo\/v2\/api-docs\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/localhost:8080\/swagger2-demo\/v2\/api-docs<\/a> and it should give the entire documentation in <code>JSON<\/code> format. This is not that much easy to read and understand, actually Swagger has provided this to be used in other systems like API management tools now a days popular, which provides the functionality like API gateways, API caching, API documentation etc.<\/p>\n<figure id=\"attachment_9062\" aria-describedby=\"caption-attachment-9062\" style=\"width: 749px\" class=\"wp-caption aligncenter\"><a href=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/JSON_documenatation.jpg\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/JSON_documenatation.jpg\" alt=\"\" width=\"759\" height=\"650\" class=\"size-full wp-image-9062\" \/><\/a><figcaption id=\"caption-attachment-9062\" class=\"wp-caption-text\">JSON documentation<\/figcaption><\/figure>\n<h4>Verify Swagger2 UI Docs<\/h4>\n<p>Open <a href=\"http:\/\/localhost:8080\/swagger2-demo\/swagger-ui.html\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/localhost:8080\/swagger2-demo\/swagger-ui.html<\/a> to see the Swagger UI documentation in the browser.<\/li>\n<figure id=\"attachment_9067\" aria-describedby=\"caption-attachment-9067\" style=\"width: 1156px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/Swagger2-UI-Docs-without-Annotations.png\" alt=\"Swagger2 UI Docs without Annotations\" width=\"1166\" height=\"704\" class=\"size-full wp-image-9067\" \/><figcaption id=\"caption-attachment-9067\" class=\"wp-caption-text\">Swagger2 UI Docs without Annotations<\/figcaption><\/figure>\n<p><a id=\"swagger2-annotations\"><\/a><\/p>\n<h2>Swagger2 Annotations<\/h2>\n<p>The default generated API docs are good but they lack detailed API level information. Swagger has provided few annotations to add this detailed information to the APIs. e.g.<\/p>\n<ol>\n<li><code>@Api<\/code> &#8211; We can add this Annotation to the controller to add basic information regarding the controller.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">@Api(value = &quot;Swagger2DemoRestController&quot;, description = &quot;REST APIs related to Student Entity!!!!&quot;)\r\n@RestController\r\npublic class Swagger2DemoRestController {\r\n\t...\r\n}<\/pre>\n<\/li>\n<li><code>@ApiOperation and @ApiResponses<\/code> &#8211; We can add these annotations to any rest method in the controller to add basic information related to that method. e.g.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n@ApiOperation(value = &quot;Get list of Students in the System &quot;, response = Iterable.class, tags = &quot;getStudents&quot;)\r\n@ApiResponses(value = { \r\n\t\t\t@ApiResponse(code = 200, message = &quot;Success|OK&quot;),\r\n\t\t\t@ApiResponse(code = 401, message = &quot;not authorized!&quot;), \r\n\t\t\t@ApiResponse(code = 403, message = &quot;forbidden!!!&quot;),\r\n\t\t\t@ApiResponse(code = 404, message = &quot;not found!!!&quot;) })\r\n\r\n@RequestMapping(value = &quot;\/getStudents&quot;)\r\npublic List&lt;Student&gt; getStudents() {\r\n    return students;\r\n}\r\n<\/pre>\n<p>Here we can add <code>tags<\/code> to methods to add some grouping in the <code>swagger-ui<\/code>.<\/li>\n<li><code>@ApiModelProperty<\/code> &#8211; This annotation is used in the Model property to add some description to the Swagger output for that model attribute. e.g.\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">@ApiModelProperty(notes = &quot;Name of the Student&quot;,name=&quot;name&quot;,required=true,value=&quot;test name&quot;)\r\nprivate String name;<\/pre>\n<\/li>\n<\/ol>\n<p>Controller and Model class code after adding swagger2 annotations.<\/p>\n<p><strong>Swagger2DemoRestController.java<\/strong><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npackage com.example.springbootswagger2.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport com.example.springbootswagger2.model.Student;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport io.swagger.annotations.ApiResponse;\r\nimport io.swagger.annotations.ApiResponses;\r\n\r\n@Api(value = &quot;Swagger2DemoRestController&quot;, description = &quot;REST Apis related to Student Entity!!!!&quot;)\r\n@RestController\r\npublic class Swagger2DemoRestController {\r\n\r\n\tList&lt;Student&gt; students = new ArrayList&lt;Student&gt;();\r\n\t{\r\n\t\tstudents.add(new Student(&quot;Sajal&quot;, &quot;IV&quot;, &quot;India&quot;));\r\n\t\tstudents.add(new Student(&quot;Lokesh&quot;, &quot;V&quot;, &quot;India&quot;));\r\n\t\tstudents.add(new Student(&quot;Kajal&quot;, &quot;III&quot;, &quot;USA&quot;));\r\n\t\tstudents.add(new Student(&quot;Sukesh&quot;, &quot;VI&quot;, &quot;USA&quot;));\r\n\t}\r\n\r\n\t@ApiOperation(value = &quot;Get list of Students in the System &quot;, response = Iterable.class, tags = &quot;getStudents&quot;)\r\n\t@ApiResponses(value = { \r\n\t\t\t@ApiResponse(code = 200, message = &quot;Suceess|OK&quot;),\r\n\t\t\t@ApiResponse(code = 401, message = &quot;not authorized!&quot;), \r\n\t\t\t@ApiResponse(code = 403, message = &quot;forbidden!!!&quot;),\r\n\t\t\t@ApiResponse(code = 404, message = &quot;not found!!!&quot;) })\r\n\r\n\t@RequestMapping(value = &quot;\/getStudents&quot;)\r\n\tpublic List&lt;Student&gt; getStudents() {\r\n\t\treturn students;\r\n\t}\r\n\r\n\t@ApiOperation(value = &quot;Get specific Student in the System &quot;, response = Student.class, tags = &quot;getStudent&quot;)\r\n\t@RequestMapping(value = &quot;\/getStudent\/{name}&quot;)\r\n\tpublic Student getStudent(@PathVariable(value = &quot;name&quot;) String name) {\r\n\t\treturn students.stream().filter(x -&gt; x.getName().equalsIgnoreCase(name)).collect(Collectors.toList()).get(0);\r\n\t}\r\n\r\n\t@ApiOperation(value = &quot;Get specific Student By Country in the System &quot;, response = Student.class, tags = &quot;getStudentByCountry&quot;)\r\n\t@RequestMapping(value = &quot;\/getStudentByCountry\/{country}&quot;)\r\n\tpublic List&lt;Student&gt; getStudentByCountry(@PathVariable(value = &quot;country&quot;) String country) {\r\n\t\tSystem.out.println(&quot;Searching Student in country : &quot; + country);\r\n\t\tList&lt;Student&gt; studentsByCountry = students.stream().filter(x -&gt; x.getCountry().equalsIgnoreCase(country))\r\n\t\t\t\t.collect(Collectors.toList());\r\n\t\tSystem.out.println(studentsByCountry);\r\n\t\treturn studentsByCountry;\r\n\t}\r\n\r\n\t\/\/ @ApiOperation(value = &quot;Get specific Student By Class in the System &quot;,response = Student.class,tags=&quot;getStudentByClass&quot;)\r\n\t@RequestMapping(value = &quot;\/getStudentByClass\/{cls}&quot;)\r\n\tpublic List&lt;Student&gt; getStudentByClass(@PathVariable(value = &quot;cls&quot;) String cls) {\r\n\t\treturn students.stream().filter(x -&gt; x.getCls().equalsIgnoreCase(cls)).collect(Collectors.toList());\r\n\t}\r\n}\r\n<\/pre>\n<p><strong>Student.java<\/strong><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npackage com.example.springbootswagger2.model;\r\n\r\nimport io.swagger.annotations.ApiModelProperty;\r\n\r\npublic class Student \r\n{\r\n\t@ApiModelProperty(notes = &quot;Name of the Student&quot;,name=&quot;name&quot;,required=true,value=&quot;test name&quot;)\r\n\tprivate String name;\r\n\r\n\t@ApiModelProperty(notes = &quot;Class of the Student&quot;,name=&quot;cls&quot;,required=true,value=&quot;test class&quot;)\r\n\tprivate String cls;\r\n\r\n\t@ApiModelProperty(notes = &quot;Country of the Student&quot;,name=&quot;country&quot;,required=true,value=&quot;test country&quot;)\r\n\tprivate String country;\r\n\r\n\tpublic Student(String name, String cls, String country) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t\tthis.cls = cls;\r\n\t\tthis.country = country;\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic String getCls() {\r\n\t\treturn cls;\r\n\t}\r\n\r\n\tpublic String getCountry() {\r\n\t\treturn country;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn &quot;Student [name=&quot; + name + &quot;, cls=&quot; + cls + &quot;, country=&quot; + country + &quot;]&quot;;\r\n\t}\r\n}\r\n<\/pre>\n<p><a id=\"demo\"><\/a><\/p>\n<h2>Demo<\/h2>\n<p>Now when our REST APIs are properly annotated, let&#8217;s see the final output. Open <a href=\"http:\/\/localhost:8080\/swagger2-demo\/swagger-ui.html\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/localhost:8080\/swagger2-demo\/swagger-ui.html<\/a> to see the Swagger ui documentation in the browser.<\/p>\n<figure id=\"attachment_9064\" aria-describedby=\"caption-attachment-9064\" style=\"width: 989px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg\" alt=\"Final Swagger2 REST API Output\" width=\"999\" height=\"685\" class=\"size-full wp-image-9064\" \/><figcaption id=\"caption-attachment-9064\" class=\"wp-caption-text\">Final Swagger2 REST API Output<\/figcaption><\/figure>\n<p>That&#8217;s all about to <strong>create REST API documentation using swagger2<\/strong> using a spring boot application. Drop me your questions in comments section.<\/p>\n<div class=\"noticeboxesde downgreennoticebox\"><a href=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/spring-boot-swagger2.zip\">Download Source code<\/a><\/div>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Now a days REST and Microservices have got a lot of momentum. At the same time, actual REST specification does not suggest any standard way to document the REST APIs that we are going to expose [like WSDL for SOAP]. As a result, everybody is documenting their APIs in their own way, resulting a gap &#8230; <a title=\"Generate REST API Docs with Swagger\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/swagger2\/swagger-spring-mvc-rest-example\/\" aria-label=\"More on Generate REST API Docs with Swagger\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":9064,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1051],"tags":[1489],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg",999,685,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg",150,103,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg",300,206,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg",768,527,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg",999,685,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg",999,685,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg",999,685,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/07\/SwaggerUIFinal.jpg",120,82,false]},"uagb_author_info":{"display_name":"Sajal Chakraborty","author_link":"https:\/\/howtodoinjava.com\/author\/sajalchakraborty\/"},"uagb_comment_info":14,"uagb_excerpt":"Now a days REST and Microservices have got a lot of momentum. At the same time, actual REST specification does not suggest any standard way to document the REST APIs that we are going to expose [like WSDL for SOAP]. As a result, everybody is documenting their APIs in their own way, resulting a gap&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/9052"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=9052"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/9052\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/9064"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=9052"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=9052"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=9052"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}