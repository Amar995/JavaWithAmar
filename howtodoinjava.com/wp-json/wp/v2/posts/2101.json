{"id":2101,"date":"2013-05-21T11:09:41","date_gmt":"2013-05-21T05:39:41","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=2101"},"modified":"2022-01-28T02:22:41","modified_gmt":"2022-01-27T20:52:41","slug":"jax-rs-resteasy-file-upload-httpclient-example","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/resteasy\/jax-rs-resteasy-file-upload-httpclient-example\/","title":{"rendered":"Uploading a File with RESTEasy and HttpClient"},"content":{"rendered":"<p>In previous posts, we learned about <a title=\"RESTEasy + File download example\" href=\"https:\/\/howtodoinjava.com\/resteasy\/resteasy-file-download-example\/\"><strong>file downloading<\/strong><\/a> and building <a title=\"JAX-RS RESTful client using apache httpclient\" href=\"https:\/\/howtodoinjava.com\/java\/library\/jaxrs-client-httpclient-get-post\/\"><strong>RESTful clients<\/strong><\/a>. Now, let move further. In this post, I am giving sample code of file upload using jax-rs resteasy. For uploading the file, <a title=\"http client\" href=\"http:\/\/hc.apache.org\/httpclient-3.x\/\"><strong>httpclient<\/strong><\/a> library will be used instead of HTML form.<\/p>\n<p>I am using <a title=\"MultipartFormDataInput\" href=\"https:\/\/docs.jboss.org\/resteasy\/docs\/1.2.GA\/javadocs\/org\/jboss\/resteasy\/plugins\/providers\/multipart\/MultipartFormDataInput.html\"><strong>MultipartFormDataInput<\/strong><\/a> class which is part of <strong>resteasy-multipart <\/strong>plugin.<\/p>\n<p><strong>1) Update project&#8217;s maven dependencies<\/strong><\/p>\n<p>Add\/Update below maven dependencies to add support for multipart file upload in you project.<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;!-- core library --&gt;\n\t&lt;dependency&gt;\n\t\t&lt;groupId&gt;org.jboss.resteasy&lt;\/groupId&gt;\n\t\t &lt;artifactId&gt;resteasy-jaxrs&lt;\/artifactId&gt;\n\t\t&lt;version&gt;2.3.1.GA&lt;\/version&gt;\n\t&lt;\/dependency&gt;\n\t&lt;dependency&gt;\n\t\t&lt;groupId&gt;net.sf.scannotation&lt;\/groupId&gt;\n\t\t&lt;artifactId&gt;scannotation&lt;\/artifactId&gt;\n\t\t&lt;version&gt;1.0.2&lt;\/version&gt;\n\t&lt;\/dependency&gt;\n\t&lt;!-- JAXB provider --&gt;\n   &lt;dependency&gt;\n\t\t&lt;groupId&gt;org.jboss.resteasy&lt;\/groupId&gt;\n\t\t&lt;artifactId&gt;resteasy-jaxb-provider&lt;\/artifactId&gt;\n\t\t&lt;version&gt;2.3.1.GA&lt;\/version&gt;\n\t&lt;\/dependency&gt;\t\n\t&lt;!-- Multipart support --&gt;\n\t&lt;dependency&gt;\n\t\t&lt;groupId&gt;org.jboss.resteasy&lt;\/groupId&gt;\n\t\t&lt;artifactId&gt;resteasy-multipart-provider&lt;\/artifactId&gt;\n\t\t&lt;version&gt;2.3.1.GA&lt;\/version&gt;\n\t&lt;\/dependency&gt;\n\t&lt;!-- For better I\/O control --&gt;\n\t&lt;dependency&gt;\n\t\t&lt;groupId&gt;commons-io&lt;\/groupId&gt;\n\t\t&lt;artifactId&gt;commons-io&lt;\/artifactId&gt;\n\t\t&lt;version&gt;2.0.1&lt;\/version&gt;\n\t&lt;\/dependency&gt;\n<\/pre>\n<p>Also add jar files given in below picture. They are needed to build client code for file upload example.<\/p>\n<p><figure id=\"attachment_2102\" aria-describedby=\"caption-attachment-2102\" style=\"width: 607px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" class=\"size-full wp-image-2102\" alt=\"HTTP client jar files\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/http-client-jars.png\" width=\"617\" height=\"174\" \/><figcaption id=\"caption-attachment-2102\" class=\"wp-caption-text\">HTTP client jar files<\/figcaption><\/figure><br \/>\n&nbsp;<\/p>\n<p><strong>2) Prepare the http client which will upload the file on client side<\/strong><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\npackage com.howtodoinjava.client.upload;\n \nimport java.io.File;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.mime.MultipartEntity;\nimport org.apache.http.entity.mime.content.FileBody;\nimport org.apache.http.entity.mime.content.StringBody;\nimport org.apache.http.impl.client.DefaultHttpClient;\n \npublic class DemoFileUploader \n{\n\tpublic static void main(String args[]) throws Exception\n    {\n    \tDemoFileUploader fileUpload = new DemoFileUploader () ;\n    \tFile file = new File(\"C:\/Lokesh\/Setup\/workspace\/RESTfulDemoApplication\/target\/classes\/Tulips.jpg\") ;\n    \t\/\/Upload the file\n        fileUpload.executeMultiPartRequest(\"http:\/\/localhost:8080\/RESTfulDemoApplication\/user-management\/image-upload\", \n        \t\tfile, file.getName(), \"File Uploaded :: Tulips.jpg\") ;\n    }  \n\t\n    public void executeMultiPartRequest(String urlString, File file, String fileName, String fileDescription) throws Exception \n    {\n    \tHttpClient client = new DefaultHttpClient() ;\n        HttpPost postRequest = new HttpPost (urlString) ;\n        try\n        {\n        \t\/\/Set various attributes \n            MultipartEntity multiPartEntity = new MultipartEntity () ;\n            multiPartEntity.addPart(\"fileDescription\", new StringBody(fileDescription != null ? fileDescription : \"\")) ;\n            multiPartEntity.addPart(\"fileName\", new StringBody(fileName != null ? fileName : file.getName())) ;\n \n            FileBody fileBody = new FileBody(file, \"application\/octect-stream\") ;\n            \/\/Prepare payload\n            multiPartEntity.addPart(\"attachment\", fileBody) ;\n \n            \/\/Set to request body\n            postRequest.setEntity(multiPartEntity) ;\n            \n            \/\/Send request\n            HttpResponse response = client.execute(postRequest) ;\n            \n            \/\/Verify response if any\n            if (response != null)\n            {\n                System.out.println(response.getStatusLine().getStatusCode());\n            }\n        }\n        catch (Exception ex)\n        {\n            ex.printStackTrace() ;\n        }\n    }\n}\n<\/pre>\n<p><strong>3) Write RESTful API in application to accept multipart request<\/strong><\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\npackage com.howtodoinjava.client.upload;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.MultivaluedMap;\nimport javax.ws.rs.core.Response;\n\nimport org.apache.commons.io.IOUtils;\nimport org.jboss.resteasy.plugins.providers.multipart.InputPart;\nimport org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataInput;\n\n@Path(&quot;\/user-management&quot;)\npublic class DemoFileSaver_MultipartFormDataInput \n{\n\tprivate final String UPLOADED_FILE_PATH = &quot;c:\\temp\\&quot;;\n\n\t@POST\n\t@Path(&quot;\/image-upload&quot;)\n\t@Consumes(&quot;multipart\/form-data&quot;)\n\tpublic Response uploadFile(MultipartFormDataInput input) throws IOException \n\t{\n\t\t\/\/Get API input data\n\t\tMap&lt;String, List&lt;InputPart&gt;&gt; uploadForm = input.getFormDataMap();\n\t\t\n\t\t\/\/Get file name\n\t\tString fileName = uploadForm.get(&quot;fileName&quot;).get(0).getBodyAsString();\n\t\t\n\t\t\/\/Get file data to save\n\t\tList&lt;InputPart&gt; inputParts = uploadForm.get(&quot;attachment&quot;);\n\n\t\tfor (InputPart inputPart : inputParts)\n\t\t{\n\t\t\ttry \n\t\t\t{\n\t\t\t\t\/\/Use this header for extra processing if required\n\t\t\t\t@SuppressWarnings(&quot;unused&quot;)\n\t\t\t\tMultivaluedMap&lt;String, String&gt; header = inputPart.getHeaders();\n\t\t\t\t\n\t\t\t\t\/\/ convert the uploaded file to inputstream\n\t\t\t\tInputStream inputStream = inputPart.getBody(InputStream.class, null);\n\t\t\t\t\n\t\t\t\tbyte[] bytes = IOUtils.toByteArray(inputStream);\n\t\t\t\t\/\/ constructs upload file path\n\t\t\t\tfileName = UPLOADED_FILE_PATH + fileName;\n\t\t\t\twriteFile(bytes, fileName);\n\t\t\t\tSystem.out.println(&quot;Success !!!!!&quot;);\n\t\t\t} \n\t\t\tcatch (Exception e) \n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn Response.status(200)\n\t\t\t\t.entity(&quot;Uploaded file name : &quot;+ fileName).build();\n\t}\n\n\t\/\/Utility method\n\tprivate void writeFile(byte[] content, String filename) throws IOException \n\t{\n\t\tFile file = new File(filename);\n\t\tif (!file.exists()) {\n\t\t\tfile.createNewFile();\n\t\t}\n\t\tFileOutputStream fop = new FileOutputStream(file);\n\t\tfop.write(content);\n\t\tfop.flush();\n\t\tfop.close();\n\t}\n}\n\n<\/pre>\n<pre><strong><a href=\"https:\/\/docs.google.com\/file\/d\/0B7yo2HclmjI4amhXRE5VMjBRSHM\/edit?usp=sharing\" title=\"multipart rest file upload\">Sourcecode download<\/a><\/strong><\/pre>\n<p><strong>Happy Learning !!<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In previous posts, we learned about file downloading and building RESTful clients. Now, let move further. In this post, I am giving sample code of file upload using jax-rs resteasy. For uploading the file, httpclient library will be used instead of HTML form. I am using MultipartFormDataInput class which is part of resteasy-multipart plugin. 1) &#8230; <a title=\"Uploading a File with RESTEasy and HttpClient\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/resteasy\/jax-rs-resteasy-file-upload-httpclient-example\/\" aria-label=\"More on Uploading a File with RESTEasy and HttpClient\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":2102,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[39],"tags":[211,248,367],"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false,"yarpp-thumbnail":false},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":3,"uagb_excerpt":"In previous posts, we learned about file downloading and building RESTful clients. Now, let move further. In this post, I am giving sample code of file upload using jax-rs resteasy. For uploading the file, httpclient library will be used instead of HTML form. I am using MultipartFormDataInput class which is part of resteasy-multipart plugin. 1)&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/2101"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=2101"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/2101\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=2101"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=2101"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=2101"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}