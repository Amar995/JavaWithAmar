{"id":4600,"date":"2015-03-02T14:38:55","date_gmt":"2015-03-02T09:08:55","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4600"},"modified":"2022-01-13T20:50:32","modified_gmt":"2022-01-13T15:20:32","slug":"spring-mvc-interview-questions-with-answers","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/interview-questions\/spring-mvc-interview-questions-with-answers\/","title":{"rendered":"Spring WebMVC Interview Questions"},"content":{"rendered":"\n<p>Given <strong>Spring MVC interview questions<\/strong> and answers have been written to help you prepare for the job interviews and quickly revise the concepts in general. I will strongly suggest you go deeper into each concept if you have extra time. The more you know, the more you will be confident.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-34be9da8 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-what-is-spring-webmvc\">1. What is Spring WebMVC?<\/a><li class=\"uagb-toc__list\"><a href=\"#2-what-is-dispatcherservlet-and-contextloaderlistener\">2. What is DispatcherServlet and ContextLoaderListener?<\/a><li class=\"uagb-toc__list\"><a href=\"#3-what-is-front-controller-in-spring-mvc\">3. What is Front Controller in Spring MVC?<\/a><li class=\"uagb-toc__list\"><a href=\"#4-how-to-use-java-based-configuration\">4. How to use Java Based Configuration?<\/a><li class=\"uagb-toc__list\"><a href=\"#5-how-to-create-rest-apis-returning-json\">5. How to Create Rest APIs returning JSON?<\/a><li class=\"uagb-toc__list\"><a href=\"#6-can-we-have-multiple-spring-configuration-files\">6. Can We have Multiple Spring Configuration Files?<\/a><li class=\"uagb-toc__list\"><a href=\"#7-difference-between-contextannotation-config-vs-contextcomponent-scan\">7. Difference between  vs ?<\/a><li class=\"uagb-toc__list\"><a href=\"#8-difference-between-component-controller-repository-and-service-annotations\">8. Difference between @Component, @Controller, @Repository and @Service Annotations?<\/a><li class=\"uagb-toc__list\"><a href=\"#9-explain-viewresolvers\">9. Explain ViewResolvers?<\/a><li class=\"uagb-toc__list\"><a href=\"#10-what-is-a-multipartresolver-and-when-it-is-used\">10. What is a MultipartResolver and When It is Used?<\/a><li class=\"uagb-toc__list\"><a href=\"#11-how-to-upload-a-file-using-spring-webmvc\">11. How to Upload a File using Spring WebMVC?<\/a><li class=\"uagb-toc__list\"><a href=\"#12-explain-spring-mvc-request-validation-support\">12. Explain Spring MVC Request Validation Support?<\/a><li class=\"uagb-toc__list\"><a href=\"#13-how-to-validate-the-submitted-form-data\">13. How to Validate the Submitted Form Data?<\/a><li class=\"uagb-toc__list\"><a href=\"#14-what-is-spring-mvc-interceptor\">14. What is Spring MVC Interceptor?<\/a><li class=\"uagb-toc__list\"><a href=\"#15-how-to-handle-exceptions\">15. How to Handle Exceptions?<\/a><li class=\"uagb-toc__list\"><a href=\"#16-how-to-achieve-localization-and-internationalization\">16. How to Achieve Localization and  Internationalization?<\/a><li class=\"uagb-toc__list\"><a href=\"#17-how-to-get-servletcontext-and-servletconfig-object-in-a-spring-bean\">17. How to get ServletContext and ServletConfig Object in a Spring Bean?<\/a><li class=\"uagb-toc__list\"><a href=\"#18-how-to-configure-jndi-datasource\">18. How to Configure JNDI DataSource?<\/a><li class=\"uagb-toc__list\"><a href=\"#19-compare-spring-mvc-framework-to-3-tier-architecture\">19. Compare Spring MVC Framework to 3-Tier Architecture?<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. What is Spring WebMVC?<\/h2>\n\n\n\n<p>The Spring WebMVC module provides <a title=\"mvc\" href=\"https:\/\/en.wikipedia.org\/wiki\/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener noreferrer\">MVC architecture<\/a> (model-view-controller) capability and readymade components that can be used to develop flexible and <em>loosely coupled<\/em> web applications. The MVC pattern results in separating the different aspects of the application (UI and backend APIs) while providing a loose coupling between models, views and controllers.<\/p>\n\n\n\n<p>Spring framework provides lots of advantages over other MVC frameworks e.g.<\/p>\n\n\n\n<ol><li><strong>Clear separation of roles<\/strong> &#8211; controller, validator, command object, form object, model object, DispatcherServlet, handler mapping, view resolver, etc. Each role can be fulfilled by a specialized object.<\/li><li>Powerful and straightforward <strong>configuration options<\/strong> of both framework and application classes as JavaBeans.<\/li><li><strong>Reusable business code<\/strong> &#8211; no need for duplication. We can use existing business objects as command or form objects instead of mirroring them in order to extend a particular framework base class.<\/li><li>Customizable binding and bean validation support<\/li><li>Customizable <strong>handler mapping<\/strong> and view resolution<\/li><li>Customizable locale and theme resolution<a name=\"dispatcherservlet_context_loader_listener\"><\/a><\/li><\/ol>\n\n\n\n<h2>2. What is DispatcherServlet and ContextLoaderListener?<\/h2>\n\n\n\n<p>Spring\u2019s WebMVC framework is, like many other web MVC frameworks, request-driven, designed around a <strong>front-controller Servlet that receives all the HTTP requests<\/strong> and responses. Spring\u2019s <em><strong>DispatcherServlet<\/strong><\/em> however, does more than just that. It is completely integrated with the Spring <strong>IoC container<\/strong> so it allows us to use every feature that Spring has.<\/p>\n\n\n\n<p>After receiving an HTTP request, <em>DispatcherServlet<\/em> consults the <strong><em>HandlerMapping<\/em><\/strong> (configuration files) to call the appropriate <em>Controller<\/em>. The Controller takes the request and calls the appropriate handler method and sets model data and then returns the view name to the <em>DispatcherServlet<\/em>.<\/p>\n\n\n\n<p>The <em>DispatcherServlet<\/em> will take help from <strong>ViewResolver<\/strong> to pick up the defined view for the request. Once the view is finalized, the <em>DispatcherServlet<\/em> passes the model data to the view which is finally rendered on the browser.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;servlet>\r\n    &lt;servlet-name>spring&lt;\/servlet-name>\r\n        &lt;servlet-class>\r\n            org.springframework.web.servlet.DispatcherServlet\r\n        &lt;\/servlet-class>\r\n    &lt;load-on-startup>1&lt;\/load-on-startup>\r\n&lt;\/servlet>\r\n\r\n&lt;servlet-mapping>\r\n    &lt;servlet-name>spring&lt;\/servlet-name>\r\n    &lt;url-pattern>\/&lt;\/url-pattern>\r\n&lt;\/servlet-mapping><\/code><\/pre>\n\n\n\n<p>By default, <em>DispatcherServlet<\/em> loads its configuration file using <code>&lt;servlet_name>-servlet.xml<\/code>. E.g. with above <code>web.xml<\/code> file, <em>DispatcherServlet<\/em> will try to find <code>spring-servlet.xml<\/code> file in classpath.<\/p>\n\n\n\n<p><strong>ContextLoaderListener<\/strong> reads the spring configuration file (with value given against &#8220;<strong>contextConfigLocation<\/strong>&#8221; in web.xml), parse it and loads the beans defined in that config file. e.g.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;init-param>\r\n    &lt;param-name>contextConfigLocation&lt;\/param-name>\r\n    &lt;param-value>\/WEB-INF\/applicationContext.xml&lt;\/param-value>\r\n&lt;\/init-param><\/code><\/pre>\n\n\n\n<h2><a name=\"front_controller\"><\/a>3. What is Front Controller in Spring MVC?<\/h2>\n\n\n\n<p>A front controller is defined as &#8220;a controller which handles all requests for a Web Application.&#8221; <strong>DispatcherServlet (actually a servlet) is the front controller in Spring MVC that intercepts every request and then dispatches\/forwards requests to an appropriate controller<\/strong>.<\/p>\n\n\n\n<p>When a web request is sent to a Spring MVC application, the dispatcher servlet first receives the request. Then it organizes the different components configured in Spring\u2019s web application context (e.g. actual request handler controller and view resolvers) or annotations present in the controller itself, all needed to handle the request.<a name=\"spring_mvc_java_configuration\"><\/a><\/p>\n\n\n\n<h2>4. How to use Java Based Configuration?<\/h2>\n\n\n\n<p>To configure a <a href=\"https:\/\/howtodoinjava.com\/spring5\/webmvc\/spring5-mvc-hibernate5-example\/\">Java-based MVC application<\/a>, firstly we need to add the required dependencies.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;!-- Spring MVC support -->\r\n \r\n&lt;dependency>\r\n    &lt;groupId>org.springframework&lt;\/groupId>\r\n    &lt;artifactId>spring-webmvc&lt;\/artifactId>\r\n    &lt;version>${spring-version}&lt;\/version>\r\n&lt;\/dependency>\r\n \r\n&lt;dependency>\r\n    &lt;groupId>org.springframework&lt;\/groupId>\r\n    &lt;artifactId>spring-web&lt;\/artifactId>\r\n    &lt;version>${spring-version}&lt;\/version>\r\n&lt;\/dependency>\r\n \r\n&lt;!-- Tag libs support for view layer -->\r\n \r\n&lt;dependency>\r\n    &lt;groupId>javax.servlet&lt;\/groupId>\r\n    &lt;artifactId>jstl&lt;\/artifactId>\r\n    &lt;version>${jstl-version}&lt;\/version>\r\n    &lt;scope>runtime&lt;\/scope>\r\n&lt;\/dependency>\r\n \r\n&lt;dependency>\r\n    &lt;groupId>taglibs&lt;\/groupId>\r\n    &lt;artifactId>standard&lt;\/artifactId>\r\n    &lt;version>${taglibs-version}&lt;\/version>\r\n    &lt;scope>runtime&lt;\/scope>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<p>Now we need to add <em>DispatcherServlet<\/em> support. Spring provides\u00a0<code><a href=\"https:\/\/docs.spring.io\/spring\/docs\/current\/javadoc-api\/org\/springframework\/web\/SpringServletContainerInitializer.html\" target=\"_blank\" rel=\"noreferrer noopener\">SpringServletContainerInitializer<\/a><\/code>\u00a0which knows how to handle\u00a0<code>WebApplicationInitializer<\/code>\u00a0instances.\u00a0 <code>AbstractAnnotationConfigDispatcherServletInitializer<\/code>\u00a0class implements\u00a0<code>WebMvcConfigurer<\/code>\u00a0which internally implements\u00a0<code>WebApplicationInitializer<\/code>. <\/p>\n\n\n\n<p>It registers a\u00a0ContextLoaderlistener\u00a0(optionally) and a\u00a0DispatcherServlet\u00a0and allows you to easily add configuration classes to load for both classes, to apply filters to the\u00a0<strong>DispatcherServlet<\/strong> and to provide the servlet mapping.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class AppInitializer extends\r\n        AbstractAnnotationConfigDispatcherServletInitializer {\r\n \r\n   @Override\r\n   protected Class&lt;?>[] getRootConfigClasses() {\r\n      return new Class[] { HibernateConfig.class };\r\n   }\r\n \r\n   @Override\r\n   protected Class&lt;?>[] getServletConfigClasses() {\r\n      return new Class[] { WebMvcConfig.class };\r\n   }\r\n \r\n   @Override\r\n   protected String[] getServletMappings() {\r\n      return new String[] { \"\/\" };\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>Now we need to configure various MVC components such as view resolvers, validators etc. Notice the use of  <strong>@EnableWebMvc <\/strong>that imports the Spring MVC configuration from\u00a0<a href=\"https:\/\/docs.spring.io\/spring-framework\/docs\/current\/javadoc-api\/org\/springframework\/web\/servlet\/config\/annotation\/WebMvcConfigurationSupport.html\"><code>WebMvcConfigurationSupport<\/code><\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Configuration\r\n@EnableWebMvc\r\n@ComponentScan(basePackages = { \"com.howtodoinjava.demo.spring\"})\r\npublic class WebMvcConfig implements WebMvcConfigurer {\r\n \r\n   @Bean\r\n   public InternalResourceViewResolver resolver() {\r\n      InternalResourceViewResolver resolver = new InternalResourceViewResolver();\r\n      resolver.setViewClass(JstlView.class);\r\n      resolver.setPrefix(\"\/WEB-INF\/views\/\");\r\n      resolver.setSuffix(\".jsp\");\r\n      return resolver;\r\n   }\r\n \r\n   @Bean\r\n   public MessageSource messageSource() {\r\n      ResourceBundleMessageSource source = new ResourceBundleMessageSource();\r\n      source.setBasename(\"messages\");\r\n      return source;\r\n   }\r\n \r\n   @Override\r\n   public Validator getValidator() {\r\n      LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();\r\n      validator.setValidationMessageSource(messageSource());\r\n      return validator;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h2>5. How to Create Rest APIs returning JSON?<\/h2>\n\n\n\n<p>For adding <strong>JSON<\/strong> support to our spring application, you will need to add <strong>Jackson<\/strong> dependency in first step.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency>\r\n    &lt;groupId>com.fasterxml.jackson.core&lt;\/groupId>\r\n    &lt;artifactId>jackson-databind&lt;\/artifactId>\r\n    &lt;version>${jackson-version}&lt;\/version>\r\n&lt;\/dependency><\/code><\/pre>\n\n\n\n<p>Now we are ready to return JSON response from the MVC controller. All you have to use <code>@ResponseBody<\/code> annotation on the method return type.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Controller\npublic class EmployeeRESTController\n{\n\t@RequestMapping(value = \"\/employees\")\n\tpublic @ResponseBody EmployeeListVO getAllEmployees()\n\t{\n\t\tEmployeeListVO employees = new EmployeeListVO();\n\t\t\/\/Add employees\n\t\treturn employees;\n\t}\n}<\/code><\/pre>\n\n\n\n<p>Alternatively, we can use <code>@RestController<\/code> annotation in place of <code>@Controller<\/code> annotation. This will remove the need to using <code>@ResponseBody<\/code>.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>@RestController = @Controller + @ResponseBody<\/strong><\/p><\/blockquote>\n\n\n\n<p>So we can rewrite the above controller.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">@RestController\npublic class EmployeeRESTController\n{\n\t@GetMapping(\"\/employees\")\n\tpublic EmployeeListVO getAllEmployees()\n\t{\n\t\tEmployeeListVO employees = new EmployeeListVO();\n\t\t\/\/Add employees\n\t\treturn employees;\n\t}\n}<\/pre>\n\n\n\n<h2><a name=\"multiple_configuration_files\"><\/a>6. Can We have Multiple Spring Configuration Files?<\/h2>\n\n\n\n<p>YES. we can have multiple spring context files. There are two ways to make spring read and configure all such files.<\/p>\n\n\n\n<p>Specify all files in <code>web.xml<\/code> file using <strong>contextConfigLocation<\/strong> init parameter. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;init-param>\r\n    &lt;param-name>contextConfigLocation&lt;\/param-name>\r\n    &lt;param-value>\r\n        WEB-INF\/spring-dao-hibernate.xml,\r\n        WEB-INF\/spring-services.xml,\r\n        WEB-INF\/spring-security.xml\r\n    &lt;\/param-value>\r\n&lt;\/init-param><\/code><\/pre>\n\n\n\n<p>OR, we can <strong>import into the existing configuration file<\/strong> that we have already configured. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;beans>\r\n    &lt;import resource=\"spring-dao-hibernate.xml\"\/>\r\n    &lt;import resource=\"spring-services.xml\"\/>\r\n    &lt;import resource=\"spring-security.xml\"\/>\r\n\r\n    ... \/\/Other configuration stuff\r\n\r\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>7. Difference between &lt;context:annotation-config> vs &lt;context:component-scan>?<\/h2>\n\n\n\n<ol><li>First big difference between both tags is that <code>&lt;context:annotation-config><\/code> is <strong>used to activate applied annotations in already registered beans in application context<\/strong>. <br>Note that it simply does not matter whether bean was registered by which mechanism e.g. using <code>&lt;context:component-scan><\/code> or it was defined in application-context.xml file itself.<\/li><li>Second difference is driven from first difference itself. It <strong>registers the beans defined in config file into context + it also scans the annotations inside beans and activate them<\/strong>. So <code>&lt;context:component-scan><\/code> does what <code>&lt;context:annotation-config><\/code> does, but additionally it scan the packages and register the beans in application context.<\/li><\/ol>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong><code>&lt;context:annotation-config><\/code> = Scanning and activating annotations in already registered beans<\/strong><\/p><p><strong><code>&lt;context:component-scan><\/code> = Bean Registration + Scanning and activating annotations<\/strong><\/p><cite><a href=\"https:\/\/howtodoinjava.com\/spring-mvc\/spring-mvc-difference-between-contextannotation-config-vs-contextcomponent-scan\/\" target=\"_blank\" rel=\"noreferrer noopener\">Read More<\/a><\/cite><\/blockquote>\n\n\n\n<h2><a name=\"component_controller_repository_service\"><\/a>8. Difference between @Component, @Controller, @Repository and @Service Annotations?<\/h2>\n\n\n\n<ol><li>The <strong>@Component<\/strong> annotation marks a java class as a bean so the component-scanning mechanism of spring can pick it up and pull it into the application context.  <\/li><li>The <strong>@Repository<\/strong> annotation is a specialization of the <code>@Component<\/code> annotation with similar use and functionality. In addition to importing the DAOs into the DI container, it also makes the unchecked exceptions (thrown from DAO methods) eligible for translation into Spring <code>DataAccessException<\/code>.<\/li><li>The <strong>@Service<\/strong> annotation is also a specialization of the component annotation. It doesn\u2019t currently provide any additional behavior over the @Component annotation, but it\u2019s a good idea to use @Service over <code>@Component<\/code> in service-layer classes because it specifies intent better.<\/li><li><strong>@Controller<\/strong> annotation marks a class as a Spring Web MVC controller. It too is a <code>@Component<\/code> specialization, so beans marked with it are automatically imported into the DI container. When you add the <code>@Controller<\/code> annotation to a class, you can use another annotation i.e. <code>@RequestMapping<\/code>; to map URLs to instance methods of a class.<\/li><\/ol>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/spring-core\/stereotype-annotations\/\">@Component, @Repository, @Service and @Controller Annotations?<\/a><\/p><\/blockquote>\n\n\n\n<h2><a name=\"viewresolver\"><\/a>9. Explain ViewResolvers?<\/h2>\n\n\n\n<p><code>ViewResolver<\/code> is an interface to be implemented by objects that can resolve views by name. There are plenty of ways using which you can resolve view names. <\/p>\n\n\n\n<p>These ways are supported by various in-built implementations of this interface. The most commonly used implementation is <strong>InternalResourceViewResolver<\/strong> class. It defines <code>prefix<\/code> and <code>suffix<\/code> properties to resolve the view component.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n    &lt;property name=\"prefix\" value=\"\/WEB-INF\/views\/\" \/>\r\n    &lt;property name=\"suffix\" value=\".jsp\" \/>\r\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p>So with the above view resolver configuration, if the controller method return &#8220;<em>login<\/em>&#8221; string, then the &#8220;<code>\/WEB-INF\/views\/login.jsp<\/code>&#8221; file will be searched and rendered.<a name=\"multipart_resolver\"><\/a><\/p>\n\n\n\n<h2>10. What is a MultipartResolver and When It is Used?<\/h2>\n\n\n\n<p>Spring comes with <strong>MultipartResolver<\/strong> to handle <strong>file upload<\/strong> in web applications. There are two concrete implementations included in Spring:<\/p>\n\n\n\n<ol><li><strong>CommonsMultipartResolver<\/strong> for Jakarta Commons FileUpload<\/li><li><strong>StandardServletMultipartResolver<\/strong> for Servlet 3.0 Part API<\/li><\/ol>\n\n\n\n<p>To define an implementation, create a bean with the id &#8220;<strong><em>multipartResolver<\/em><\/strong>&#8221; in a DispatcherServlet&#8217;s application context. Such a resolver gets applied to all requests handled by that <em>DispatcherServlet<\/em>.<\/p>\n\n\n\n<p>If a <code>DispatcherServlet<\/code> detects a multipart request, it will resolve it via the configured <code>MultipartResolver<\/code> and pass on a wrapped HttpServletRequest. Controllers can then cast their given request to the <code>MultipartHttpServletRequest<\/code> interface, which permits access to any <code>MultipartFiles<\/code>.<a name=\"mvc_upload_example\"><\/a><\/p>\n\n\n\n<h2>11. How to Upload a File using Spring WebMVC?<\/h2>\n\n\n\n<p>Let&#8217;s say we are going to use <strong>CommonsMultipartResolver<\/strong> which uses the Apache commons upload library to handle the file upload in a form. So you will need to add the <em>commons-fileupload<\/em><strong> <\/strong>and <em>commons-io<\/em><strong> <\/strong>dependencies.<\/p>\n\n\n\n<p>Create a bean of type <em>CommonsMultipartResolver<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\r\n    &lt;!-- one of the properties available; the maximum file size in bytes -->\r\n    &lt;property name=\"maxUploadSize\" value=\"100000\"\/>\r\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p>Now create the model class <strong>FileUploadForm<\/strong> which will hold the multipart data submitted from HTML form.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.springframework.web.multipart.MultipartFile;\n\npublic class FileUploadForm\n{\n\tprivate MultipartFile file;\n\n\tpublic MultipartFile getFile() {\n\t\treturn file;\n\t}\n\n\tpublic void setFile(MultipartFile file) {\n\t\tthis.file = file;\n\t}\n}<\/code><\/pre>\n\n\n\n<p>Now create <code>FileUploadController<\/code> class that will actually handle the upload logic.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\nimport com.howtodoinjava.form.FileUploadForm;\n\n@Controller\npublic class FileUploadController\n{\n\t@RequestMapping(value = \"\/upload\", method = RequestMethod.POST)\n\tpublic String save(@ModelAttribute(\"uploadForm\") FileUploadForm uploadForm,\tModel map) {\n\n\t\tMultipartFile multipartFile = uploadForm.getFile();\n\n\t\tString fileName = \"default.txt\";\n\n\t\tif (multipartFile != null) {\n\t\t\tfileName = multipartFile.getOriginalFilename();\n\t\t}\n\n\t\t\/\/read and store the file as you like\n\n\t\tmap.addAttribute(\"files\", fileName);\n\t\treturn \"file_upload_success\";\n\t}\n}<\/code><\/pre>\n\n\n\n<h2><a name=\"validation_support\"><\/a>12. Explain Spring MVC Request Validation Support?<\/h2>\n\n\n\n<p>Spring supports validations primarily in two ways.<\/p>\n\n\n\n<ol><li>Using <strong>JSR-303 Annotations<\/strong> and any reference implementation e.g. <strong>Hibernate Validator<\/strong><\/li><li>Using custom implementation of <strong>org.springframework.validation.Validator<\/strong> interface<\/li><\/ol>\n\n\n\n<p>In the next question, you see an example of how to use validation support in Spring MVC application.<\/p>\n\n\n\n<h2><a name=\"validate_form_data\"><\/a>13. How to Validate the Submitted Form Data?<\/h2>\n\n\n\n<p>Spring MVC supports validation by means of a validator object that implements the <code>Validator<\/code> interface. You need to create a class and implement <code>Validator<\/code> interface. In this custom validator class, you use utility methods such as <code>rejectIfEmptyOrWhitespace(<\/code>) and <code>rejectIfEmpty()<\/code> in the <code>ValidationUtils<\/code> class to validate the required form fields.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@Component\npublic class EmployeeValidator implements Validator\n{\n    public boolean supports(Class clazz) {\n        return EmployeeVO.class.isAssignableFrom(clazz);\n    }\n\n    public void validate(Object target, Errors errors)\n    {\n        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"firstName\", \"error.firstName\", \"First name is required.\");\n        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"lastName\", \"error.lastName\", \"Last name is required.\");\n        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"email\", \"error.email\", \"Email is required.\");\n    }\n}<\/code><\/pre>\n\n\n\n<p>If any of the form fields are empty, these methods will create a field error and bind it to the field. The second argument of these methods is the property name, while the third and fourth are the error code and default error message.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Read More : Spring MVC <a title=\"Spring MVC Custom Validator Example\" href=\"https:\/\/howtodoinjava.com\/spring-mvc\/spring-mvc-custom-validator-example\/\">Custom Validator<\/a> and <a title=\"Spring Bean Validation Example with JSR-303 Annotations\" href=\"https:\/\/howtodoinjava.com\/spring-mvc\/spring-bean-validation-example-with-jsr-303-annotations\/\">JSR-303 Annotations<\/a> Examples<\/strong><\/p><p><a name=\"interceptor_support\"><\/a><\/p><\/blockquote>\n\n\n\n<h2>14. What is Spring MVC Interceptor?<\/h2>\n\n\n\n<p>As you know about <strong>servlet filters<\/strong> that they can <em>pre-handle<\/em> and <em>post-handle<\/em> every web request they serve &#8212; before and after it\u2019s handled by that servlet. <\/p>\n\n\n\n<p>In a similar way, you can use <strong>HandlerInterceptor<\/strong> interface in your spring MVC application to <strong>pre-handle and post-handle web requests that are handled by Spring MVC controller<\/strong>s. These handlers are mostly used to manipulate the model attributes returned\/submitted they are passed to the views\/controllers.<\/p>\n\n\n\n<p>A handler interceptor can be registered for particular URL mappings, so it only intercepts requests mapped to certain URLs. Each handler interceptor must implement the <code>HandlerInterceptor<\/code> interface, which contains three callback methods for you to implement: <code>preHandle()<\/code>, <code>postHandle()<\/code> and <code>afterCompletion()<\/code>.<\/p>\n\n\n\n<p>Problem with <code>HandlerInterceptor<\/code> interface is that your new class will have to implement all three methods irrespective of whether it is needed or not. To avoid overriding, you can use <strong>HandlerInterceptorAdapter<\/strong> class. This class implements <code>HandlerInterceptor<\/code> and provides default blank implementations.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Read More : <a title=\"Spring Intercepting Requests using HandlerInterceptor with Example\" href=\"https:\/\/howtodoinjava.com\/spring-mvc\/spring-intercepting-requests-using-handlerinterceptor-with-example\/\">Spring MVC Interceptor Example<\/a><\/strong><\/p><\/blockquote>\n\n\n\n<h2><a name=\"handle_exceptions\"><\/a>15. How to Handle Exceptions?<\/h2>\n\n\n\n<p>In a Spring MVC application, you can register one or more <strong>exception<\/strong> resolver beans in the web application context to resolve uncaught exceptions. These beans have to implement the <strong>HandlerExceptionResolver<\/strong> interface for <code>DispatcherServlet<\/code> to auto-detect them. <\/p>\n\n\n\n<p>Spring MVC comes with a simple exception resolver for you to map each category of exceptions to a view i.e. <strong>SimpleMappingExceptionResolver<\/strong> to map each category of exceptions to a view in a configurable way.<\/p>\n\n\n\n<p>Let\u2019s say we have an exception class i.e. <code>AuthException<\/code>. And we want that everytime this exception is thrown from anywhere into application, we want to show a pre-determined view page <code>\/WEB-INF\/views\/error\/authExceptionView.jsp<\/code>.<\/p>\n\n\n\n<p>So the configuration would be.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;bean class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\">\r\n    &lt;property name=\"exceptionMappings\">\r\n        &lt;props>\r\n            &lt;prop key=\"com.howtodoinjava.demo.exception.AuthException\">\r\n                error\/authExceptionView\r\n            &lt;\/prop>\r\n        &lt;\/props>\r\n    &lt;\/property>\r\n    &lt;property name=\"defaultErrorView\" value=\"error\/genericView\"\/>\r\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p>The &#8220;<strong><em>defaultErrorView<\/em><\/strong>&#8221; property can be configured to show a generic message for all other exceptions which are not configured inside &#8220;<strong><em>exceptionMappings<\/em><\/strong>&#8221; list.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Read More : <a title=\"Spring MVC SimpleMappingExceptionResolver Example\" href=\"https:\/\/howtodoinjava.com\/spring-mvc\/spring-mvc-simplemappingexceptionresolver-example\/\">Spring MVC SimpleMappingExceptionResolver Example<\/a><\/strong><\/p><\/blockquote>\n\n\n\n<h2><a name=\"localization_support\"><\/a>16. How to Achieve Localization and  Internationalization?<\/h2>\n\n\n\n<p>Spring framework is shipped with <strong>LocaleResolver<\/strong> to support the <strong>internationalization<\/strong> and thus <strong>localization<\/strong> as well. To make the Spring MVC application supports internationalization, you will need to register two beans.<\/p>\n\n\n\n<p><code>SessionLocaleResolver<\/code>: It resolves locales by inspecting a predefined attribute in a user\u2019s session. If the session attribute doesn\u2019t exist, this locale resolver determines the default locale from the accept-language HTTP header. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;bean id=\"localeResolver\" class=\"org.springframework.web.servlet.i18n.SessionLocaleResolver\">\r\n    &lt;property name=\"defaultLocale\" value=\"en\" \/>\r\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p><code>LocaleChangeInterceptor<\/code> : This interceptor detects if a special parameter is present in the current HTTP request. The parameter name can be customized with the <strong>paramName<\/strong> property of this interceptor. If such a parameter is present in the current request, this interceptor changes the user\u2019s locale according to the parameter value. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;bean id=\"localeChangeInterceptor\" class=\"org.springframework.web.servlet.i18n.LocaleChangeInterceptor\">\r\n    &lt;property name=\"paramName\" value=\"lang\" \/>\r\n&lt;\/bean>\r\n \r\n&lt;!-- Enable the interceptor -->\r\n&lt;bean class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\">\r\n    &lt;property name=\"interceptors\">\r\n        &lt;list>\r\n            &lt;ref bean=\"localeChangeInterceptor\" \/>\r\n        &lt;\/list>\r\n    &lt;\/property>\r\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p>Next step is to have each locale-specific properties file have texts in that locale-specific language e.g. <code>messages.properties<\/code> and <code>messages_zh_CN.properties<\/code> etc.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Read More : <a title=\"Spring MVC Internationalization (i18n) and Localization (i10n) Example\" href=\"https:\/\/howtodoinjava.com\/spring-mvc\/spring-mvc-internationalization-i18n-and-localization-i10n-example\/\">Spring MVC Localization (i10n) Example<\/a><\/strong><\/p><p><a name=\"servletcontext_servletconfig\"><\/a><\/p><\/blockquote>\n\n\n\n<h2>17. How to get ServletContext and ServletConfig Object in a Spring Bean?<\/h2>\n\n\n\n<p>Simply implement <code>ServletContextAware<\/code> and <code>ServletConfigAware<\/code> interfaces and override the respective methods.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">@Controller\n@RequestMapping(value = \"\/magic\")\npublic class SimpleController implements ServletContextAware, ServletConfigAware {\n\n    private ServletContext context;\n    private ServletConfig config;\n\n    @Override\n    public void setServletConfig(final ServletConfig servletConfig) {\n        this.config = servletConfig;\n\n    }\n\n    @Override\n    public void setServletContext(final ServletContext servletContext) {\n        this.context = servletContext;\n    }\n\n\t\/\/other code\n}<\/pre>\n\n\n\n<h2><a name=\"jndi_config\"><\/a>18. How to Configure JNDI DataSource?<\/h2>\n\n\n\n<p>For using the servlet container configured <strong>JNDI<\/strong> DataSource, we need to configure it in the spring bean configuration file and then inject it to spring beans as dependencies. Then we can use it with <code>JdbcTemplate<\/code> to perform database operations.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;bean id=\"dataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\r\n    &lt;property name=\"jndiName\" value=\"java:comp\/env\/jdbc\/MySQLDB\"\/>\r\n&lt;\/bean><\/code><\/pre>\n\n\n\n<h2><a name=\"mvc_framework_vs_architecture\"><\/a>19. Compare Spring MVC Framework to 3-Tier Architecture?<\/h2>\n\n\n\n<p>3-tier is an architecture style and MVC is a design pattern.<\/p>\n\n\n\n<div class=\"wp-block-image is-style-default\"><figure class=\"aligncenter\"><a href=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png\"><img loading=\"lazy\" width=\"465\" height=\"342\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png\" alt=\"3 tier architecture with mvc part of it\" class=\"wp-image-4537\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png 465w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it-300x221.png 300w\" sizes=\"(max-width: 465px) 100vw, 465px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>In larger applications, MVC is the presentation tier only of a 3-tier architecture. The models, views, and controllers are only concerned with the presentation and make use of a middle-tier to populate the models with data from the data tier.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Spring MVC Interview Questions and answers. These have been written to help beginners as well as experienced developers to prepare for their next interview.<\/p>\n","protected":false},"author":2,"featured_media":4537,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[15],"tags":[272],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png",465,342,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it-300x221.png",300,221,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png",465,342,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png",465,342,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png",465,342,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png",465,342,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/02\/3-tier-architechture-with-mvc-part-of-it.png",120,88,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":47,"uagb_excerpt":"Spring MVC Interview Questions and answers. These have been written to help beginners as well as experienced developers to prepare for their next interview.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4600"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4600"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4600\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4537"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4600"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4600"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4600"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}