{"id":10430,"date":"2018-05-29T23:59:25","date_gmt":"2018-05-29T18:29:25","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=10430"},"modified":"2022-04-12T17:36:10","modified_gmt":"2022-04-12T12:06:10","slug":"java-write-to-file","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/io\/java-write-to-file\/","title":{"rendered":"Writing to a File in Java"},"content":{"rendered":"\n<p>When working on an enterprise application, sometimes it is needed to <strong>write the text or binary data into files<\/strong> in Java e.g. writing user-generated reports into the filesystem. <\/p>\n\n\n\n<p>Though there are multiple ways of writing the files in Java, let&#8217;s quickly go through a few of them for quick reference when it is needed.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-61aefd66 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-using-fileswritestring-and-fileswrite\">1. Using Files.writeString() and Files.write()<\/a><li class=\"uagb-toc__list\"><a href=\"#2-fast-writing-filechannel-and-bytebuffer\">2. Fast Writing FileChannel and ByteBuffer<\/a><li class=\"uagb-toc__list\"><a href=\"#3-using-bufferedwriter\">3. Using BufferedWriter<\/a><li class=\"uagb-toc__list\"><a href=\"#4-using-filewriter-or-printwriter\">4. Using FileWriter or PrintWriter<\/a><li class=\"uagb-toc__list\"><a href=\"#5-using-fileoutputstream\">5. Using FileOutputStream<\/a><li class=\"uagb-toc__list\"><a href=\"#6-using-dataoutputstream\">6. Using DataOutputStream<\/a><li class=\"uagb-toc__list\"><a href=\"#7-summary\">7. Summary<\/a><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"1-using-files-writestring-and-files-write\">1. Using <em>Files.writeString()<\/em> and <em>Files.write()<\/em><\/h2>\n\n\n\n<p>With the method <a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/11\/docs\/api\/java.base\/java\/nio\/file\/Files.html#writeString(java.nio.file.Path,java.lang.CharSequence,java.nio.file.OpenOption...)\" target=\"_blank\" rel=\"noopener noreferrer\">writeString()<\/a> introduced in <a href=\"https:\/\/howtodoinjava.com\/java11\/features-enhancements\/\">Java 11<\/a>, we can <strong>write a String into a file<\/strong> using a single-line statement.<\/p>\n\n\n\n<ul><li>As the name suggests, <em>writeString()<\/em> method is used to write the character data into files. <\/li><li>All characters are written as they are, including the line separators. No extra characters are added.<\/li><li>By default, <em>UTF-8<\/em> character encoding is used.<\/li><li>It throws <em>IOException<\/em> if an I\/O error occurs writing to or creating the file, or the text cannot be encoded using the specified charset.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path filePath = Path.of(\"demo.txt\");\nString content  = \"hello world !!\";\n\nFiles.writeString(filePath, content);<\/code><\/pre>\n\n\n\n<p><em>Files<\/em> class another method <em>write()<\/em> since Java 7 and it works similar to <em>writeString()<\/em>. The <em>write()<\/em> method can be used to <strong>write the raw data in bytes<\/strong> or to <strong>write the strings in lines<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path filePath = Path.of(\"demo.txt\");\r\nString content  = \"hello world !!\";\r\n\r\n\/\/Write bytes\nFiles.write(filePath, content.getBytes());\n\n\/\/Write lines\nList&lt;String> lines = Arrays.asList(\"a\", \"b\", \"c\");\r\nFiles.write(filePath, lines, StandardCharsets.UTF_8);<\/code><\/pre>\n\n\n\n<h2 id=\"2-fast-writing-filechannel-and-bytebuffer\">2. Fast Writing <em>FileChannel<\/em> and ByteBuffer<\/h2>\n\n\n\n<p><code><a href=\"https:\/\/howtodoinjava.com\/java\/nio\/nio-read-file\/\">FileChannel<\/a><\/code> can be used for reading, writing, mapping, and manipulating a file. <strong>If we are writing the large files, <code>FileChannel<\/code> can be faster than standard IO.<\/strong><\/p>\n\n\n\n<p>File channels are safe for use by multiple concurrent threads.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path fileName = Path.of(\"demo.txt\");\r\nString content  = \"hello world !!\";\r\n\r\ntry (\r\n  RandomAccessFile stream = new RandomAccessFile(filePath.toFile(),\"rw\");\r\n  FileChannel channel = stream.getChannel();) {\r\n\r\n  byte[] strBytes = content.getBytes();\r\n  ByteBuffer buffer = ByteBuffer.allocate(strBytes.length);\r\n\r\n  buffer.put(strBytes);\r\n  buffer.flip();\r\n  channel.write(buffer);\r\n}<\/code><\/pre>\n\n\n\n<h2 id=\"3-using-bufferedwriter\">3. Using BufferedWriter<\/h2>\n\n\n\n<p><code><a href=\"https:\/\/docs.oracle.com\/javase\/10\/docs\/api\/java\/io\/BufferedWriter.html\">BufferedWriter<\/a><\/code> the <strong>simplest way to write the content to a file<\/strong>. It writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings.<\/p>\n\n\n\n<p>Unless prompt output is required, it is advisable to wrap a <code>BufferedWriter<\/code> around any <code>Writer<\/code> whose <code>write()<\/code> operations may be costly, such as <code>FileWriter<\/code> and <code>OutputStreamWriter<\/code>.<\/p>\n\n\n\n<p>As it buffers before writing, so it results in <strong>fewer IO operations<\/strong>, so it improves the performance.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path filePath = Path.of(\"demo.txt\");\r\nString content  = \"hello world !!\";\r\n\r\ntry (BufferedWriter writer = new BufferedWriter(\r\n  new FileWriter(filePath.toFile()))) {\r\n  \r\n  writer.write(content);\r\n}<\/code><\/pre>\n\n\n\n<h2 id=\"4-using-filewriter-or-printwriter\">4. Using FileWriter or PrintWriter<\/h2>\n\n\n\n<p><code><a href=\"https:\/\/docs.oracle.com\/javase\/10\/docs\/api\/java\/io\/FileWriter.html\">FileWriter<\/a><\/code> the most clean way to write files. The syntax is self-explanatory and easy to read and understand. <em>FileWriter<\/em> writes directly into the file (less performance) and should be used <strong>only when the number of writes is less<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path filePath = Path.of(\"demo.txt\");\r\nString content  = \"hello world !!\";\r\n\r\ntry(FileWriter fileWriter = new FileWriter(filePath.toFile())){\r\n  fileWriter.write(content);\r\n}<\/code><\/pre>\n\n\n\n<p>Use <code><a href=\"https:\/\/docs.oracle.com\/javase\/10\/docs\/api\/java\/io\/PrintWriter.html\">PrintWriter<\/a><\/code> to <strong>write formatted text to a file<\/strong>. This class implements all of the print methods found in <code>PrintStream<\/code>, so you can use all formats which you use with <code>System.out.println()<\/code> statements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path filePath = Path.of(\"demo.txt\");\r\nString content  = \"hello world !!\";\r\n\r\ntry(FileWriter fileWriter = new FileWriter(filePath.toFile());\r\n  PrintWriter printWriter = new PrintWriter(fileWriter);){\r\n  printWriter.print(content);\r\n  printWriter.printf(\"Blog name is %s\", \"howtodoinjava.com\");\r\n}<\/code><\/pre>\n\n\n\n<h2 id=\"5-using-fileoutputstream\">5. Using FileOutputStream<\/h2>\n\n\n\n<p>Use <code><a href=\"https:\/\/docs.oracle.com\/javase\/10\/docs\/api\/java\/io\/FileOutputStream.html\">FileOutputStream<\/a><\/code> to <strong>write binary data to a file<\/strong>. <code>FileOutputStream<\/code> is meant for writing streams of raw bytes such as image data. For writing streams of characters, consider using <code>FileWriter<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path filePath = Path.of(\"demo.txt\");\r\nString content  = \"hello world !!\";\r\n\r\ntry(FileOutputStream outputStream \r\n  = new FileOutputStream(filePath.toFile())){\r\n  \r\n  byte[] strToBytes = content.getBytes();\r\n  outputStream.write(strToBytes);\r\n}<\/code><\/pre>\n\n\n\n<h2 id=\"6-using-dataoutputstream\">6. Using DataOutputStream<\/h2>\n\n\n\n<p><code><a href=\"https:\/\/docs.oracle.com\/javase\/10\/docs\/api\/java\/io\/DataOutputStream.html\">DataOutputStream<\/a><\/code> lets an application <strong>write primitive Java data types to an output stream in a portable way<\/strong>. An application can then use a data input stream to read the data back in.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Path filePath = Path.of(\"demo.txt\");\r\nString content  = \"hello world !!\";\r\n\r\ntry (\r\n  FileOutputStream outputStream \r\n    = new FileOutputStream(filePath.toFile());\r\n  DataOutputStream dataOutStream \r\n    = new DataOutputStream(new BufferedOutputStream(outputStream));) {\r\n    \r\n  dataOutStream.writeUTF(content);\r\n  dataOutStream.writeInt(10);\r\n  dataOutStream.writeLong(100L);\r\n} <\/code><\/pre>\n\n\n\n<h2 id=\"7-summary\">7. Summary<\/h2>\n\n\n\n<ol><li>If we try to write to a file that doesn\u2019t exist, the file will be created first and no exception will be thrown (except using <code>Path<\/code> method).<\/li><li><strong>Always close the output stream after writing the file content<\/strong> to release all resources. It will also help in not corrupting the file.<\/li><li>Use <code>PrintWriter<\/code> is used to write formatted text.<\/li><li>Use <code>FileOutputStream<\/code> to write binary data.<\/li><li>Use <code>DataOutputStream<\/code> to write primitive data types.<\/li><li>Use <code>FileChannel<\/code> to write larger files. It is the <strong>preferred way of writing files<\/strong><em> in Java 8<\/em> as well.<\/li><\/ol>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Core-Java\/tree\/master\/src\/main\/java\/com\/howtodoinjava\/io\" target=\"_blank\" rel=\"noreferrer noopener\">Source Code on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Learn to write text and binary data into files using Java Writer classes, FileChannel, ByteBuffer, Files.write() and writeString() methods.<\/p>\n","protected":false},"author":2,"featured_media":20207,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[19],"tags":[1418,1541],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-300x170.jpg",300,170,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA.jpg",750,425,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/JAVA-120x120.jpg",120,120,true]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":1,"uagb_excerpt":"Learn to write text and binary data into files using Java Writer classes, FileChannel, ByteBuffer, Files.write() and writeString() methods.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/10430"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=10430"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/10430\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/20207"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=10430"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=10430"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=10430"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}