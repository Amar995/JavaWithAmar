{"id":4745,"date":"2015-06-08T07:01:18","date_gmt":"2015-06-08T07:01:18","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4745"},"modified":"2022-01-30T00:08:21","modified_gmt":"2022-01-29T18:38:21","slug":"data-types-in-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/data-types-in-java\/","title":{"rendered":"Java Data Types"},"content":{"rendered":"\n<p>Learn about various <strong>data types in Java<\/strong>. Learn the differences between <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/primitive-data-types-in-java\/\">primitive datatypes<\/a> and non-primitive datatypes (or reference datatypes). We will also learn about the data types sizes and best practices to use datatypes in Java.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1 uagb-toc__collapse uagb-block-a6173257 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-variable-declarations\">1. Variable Declarations<\/a><li class=\"uagb-toc__list\"><a href=\"#2-data-types\">2. Data Types<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-primitive-data-types\">2.1. Primitive Data Types<\/a><li class=\"uagb-toc__list\"><a href=\"#22-non-primitive-data-types\">2.2. Non-primitive Data Types<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-wrapper-classes\">3. Wrapper Classes<\/a><li class=\"uagb-toc__list\"><a href=\"#4-auto-boxing\">4. Auto-boxing<\/a><li class=\"uagb-toc__list\"><a href=\"#5-difference-between-primitive-and-non-primitive-data-types\">5. Difference between primitive and non-primitive data types<\/a><li class=\"uagb-toc__list\"><a href=\"#6-best-practices\">6. Best practices<\/a><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"1-variable-declarations\">1. Variable Declarations<\/h2>\n\n\n\n<p>In Java, typically datatypes are associated with <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-variables\/\">variables<\/a>. A variable declaration has three parts:<\/p>\n\n\n\n<ol><li>A <strong>variable name<\/strong> (also called identifier) to refer to the memory location<\/li><li>The <strong>variable type<\/strong> stored at the memory location (it is called <em>datatype<\/em>)<\/li><li>A <strong>memory location<\/strong> to hold the value of the variable<\/li><\/ol>\n\n\n\n<p>The second property is called <strong>data type<\/strong>.<\/p>\n\n\n\n<div class=\"wp-block-image size-full wp-image-11146 is-style-default\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"543\" height=\"221\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg\" alt=\"Java Data Type\" class=\"wp-image-11146\"\/><figcaption>Java Data Type<\/figcaption><\/figure><\/div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The data type of the variable determines the <strong>range of the values<\/strong> that the memory location can hold. Therefore, the amount of <strong>memory allocated for a variable depends on its data type<\/strong>. <\/p><\/blockquote>\n\n\n\n<p>For example, 32 bits of memory is allocated for a variable of the <code>'int'<\/code> data type.<\/p>\n\n\n\n<p>Java is a statically-typed language. This means <strong>all variables MUST be declared before they can be used<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">boolean flag = true;\n\nint counter = 20;<\/code><\/pre>\n\n\n\n<h2 id=\"2-data-types\">2. Data Types<\/h2>\n\n\n\n<p>Java supports <strong>two kinds of data types<\/strong>: <\/p>\n\n\n\n<ol><li>Primitive data type<\/li><li><em>Non-primitive<\/em> or reference data type.<\/li><\/ol>\n\n\n\n<h3 id=\"2-1-primitive-data-types\">2.1. Primitive Data Types<\/h3>\n\n\n\n<ul><li>A primitive data type <em>directly<\/em> holds a value in memory. For instance, a number or a character. <\/li><li>Primitive data types are not objects, as well as no references to the objects.<\/li><li>The values stored in primitives are called <em>literals<\/em>. <\/li><\/ul>\n\n\n\n<p>A <strong>literal<\/strong> is the source code representation of a fixed value; literals are represented directly in your code without requiring computation.<\/p>\n\n\n\n<p>Java has <strong>eight primitive data types<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"mtr-table mtr-tr-th\"><tbody><tr><th data-mtr-content=\"Data Type\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Data Type<\/div><\/th><th data-mtr-content=\"Description\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Description<\/div><\/th><th data-mtr-content=\"Default Value\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Default Value<\/div><\/th><th data-mtr-content=\"Memory Size\" class=\"mtr-th-tag\"><div class=\"mtr-cell-content\">Memory Size<\/div><\/th><\/tr><tr><td data-mtr-content=\"Data Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>boolean<\/code><\/div><\/td><td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">A binary value of either <code>true<\/code> or <code>false<\/code><\/div><\/td><td data-mtr-content=\"Default Value\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>false<\/code><\/div><\/td><td data-mtr-content=\"Memory Size\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">1 bit<\/div><\/td><\/tr><tr><td data-mtr-content=\"Data Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>char<\/code><\/div><\/td><td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Any Unicode character<\/div><\/td><td data-mtr-content=\"Default Value\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><tt>\\u0000 (0)<\/tt><\/div><\/td><td data-mtr-content=\"Memory Size\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">16-bit Unicode character<\/div><\/td><\/tr><tr><td data-mtr-content=\"Data Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>byte<\/code><\/div><\/td><td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Values from -128 to 127<\/div><\/td><td data-mtr-content=\"Default Value\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">0<\/div><\/td><td data-mtr-content=\"Memory Size\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">8-bit signed value<\/div><\/td><\/tr><tr><td data-mtr-content=\"Data Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>short<\/code><\/div><\/td><td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Values from -32768 to 32767<\/div><\/td><td data-mtr-content=\"Default Value\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">0<\/div><\/td><td data-mtr-content=\"Memory Size\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">16-bit signed value<\/div><\/td><\/tr><tr><td data-mtr-content=\"Data Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>int<\/code><\/div><\/td><td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Values from -2<sup>31<\/sup> to 2<sup>31<\/sup>-1<\/div><\/td><td data-mtr-content=\"Default Value\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">0<\/div><\/td><td data-mtr-content=\"Memory Size\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">32-bit signed value<\/div><\/td><\/tr><tr><td data-mtr-content=\"Data Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>long<\/code><\/div><\/td><td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">Values from -2<sup>63<\/sup> to 2<sup>63<\/sup>-1<\/div><\/td><td data-mtr-content=\"Default Value\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">0<\/div><\/td><td data-mtr-content=\"Memory Size\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">64-bit  signed value<\/div><\/td><\/tr><tr><td data-mtr-content=\"Data Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>float<\/code><\/div><\/td><td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><a href=\"https:\/\/en.wikipedia.org\/wiki\/IEEE_754\">IEEE 754 floating point<\/a><\/div><\/td><td data-mtr-content=\"Default Value\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">0.0<\/div><\/td><td data-mtr-content=\"Memory Size\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">32-bit floating-point value<\/div><\/td><\/tr><tr><td data-mtr-content=\"Data Type\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\"><code>double<\/code><\/div><\/td><td data-mtr-content=\"Description\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">IEEE 754 floating point<\/div><\/td><td data-mtr-content=\"Default Value\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">0.0<\/div><\/td><td data-mtr-content=\"Memory Size\" class=\"mtr-td-tag\"><div class=\"mtr-cell-content\">64-bit floating-point value<\/div><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>In Java SE 7 and later, any number of <strong>underscore<\/strong> characters (<code>'_'<\/code>) can appear anywhere between digits in a numerical literal. e.g. <code>10_000_000<\/code> is a valid number in Java. <a href=\"https:\/\/howtodoinjava.com\/java7\/java-7-changes-features-and-enhancements\/\">Read More<\/a><\/p><\/blockquote>\n\n\n\n<h4 id=\"type-conversion-between-primitives\">Type Conversion between Primitives<\/h4>\n\n\n\n<p>Except <code>boolean<\/code>, we can assign a primitive value to another primitive type. Though, sometimes it may result in <strong>data loss<\/strong> when a primitive of large memory capacity is assigned to a primitive with smaller memory capacity.<\/p>\n\n\n\n<p>It&#8217;s just like you are transferring the water from a large vessel and putting it in a smaller vessel, so the loss of water is natural.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">int counter = 20_000_000;\n\n\/\/Assign int to short (data loss)\nshort shortCounter = (short) counter;\n\n\/\/assign int to long (no data loss)\nlong longCounter = counter;\n\nSystem.out.println(counter);            \/\/20000000\nSystem.out.println(shortCounter);       \/\/11520\nSystem.out.println(longCounter);        \/\/20000000<\/code><\/pre>\n\n\n\n<p>Notice that when Java detects that type conversion may result in data loss (bigger data type to smaller one), then gives a <strong>type-mismatch error<\/strong> and explicitly asks for <strong>type casting<\/strong> (e.g. &#8216;int&#8217; to &#8216;short&#8217; assignment). It helps in detecting and resolving accidental data loss assignments.<\/p>\n\n\n\n<h3 id=\"2-2-non-primitive-data-types\">2.2. Non-primitive Data Types<\/h3>\n\n\n\n<p>A non-primitive or reference data type holds the reference to an object in memory. Using the reference stored in the variable, you can access the fields and methods of the referenced object.<\/p>\n\n\n\n<p>For example, <code>java.lang.String<\/code> is a class defined in the Java library and you can use it to manipulate text (sequence of characters). You declare a reference variable of type <code>String<\/code> as:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">String str = \"Hello World !!\";<\/code><\/pre>\n\n\n\n<p>What happens when this code is executed? <\/p>\n\n\n\n<ul><li>First, a memory block is allocated, and the name of the variable <code>str<\/code> is associated with that memory location. This process is the same as declaring a primitive data type variable.<\/li><li>The second part of code creates a new <code>String<\/code> object in memory with text <code>\"Hello World !!\"<\/code> and stores the reference (or memory address) of the <code>String<\/code> object into the variable <code>'str'<\/code>.<\/li><\/ul>\n\n\n\n<h4 id=\"multiple-variables-can-refer-to-same-object\">Multiple variables can refer to same object<\/h4>\n\n\n\n<p>You can also assign the reference of an object stored in one reference variable to another reference variable. In such cases, both reference variables will refer to the same object in memory.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/ Declares String reference variable str1 and str2\nString str1;\nString str2;\n\n\/\/ Assigns the reference of a String object \"Hello\" to str1\nstr1 = new String( \"Hello World !!\" );\n\n\/\/ Assigns the reference stored in str1 to str2\nstr2 = str1;\n\nSystem.out.println( str1 );         \/\/Hello World !!\nSystem.out.println( str2 );         \/\/Hello World !!<\/code><\/pre>\n\n\n\n<p>There is a reference constant (also known as reference literal) <strong>null<\/strong>, which can be assigned to any reference variable. If <code>null<\/code> is assigned to a reference variable, which means that the reference variable is not referring to any object in memory.<\/p>\n\n\n\n<h2 id=\"3-wrapper-classes\">3. Wrapper Classes<\/h2>\n\n\n\n<p>A <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-wrapper-classes\/\">wrapper class<\/a> is a class whose object <strong>wraps or contains primitive data types<\/strong>. In other words, we can wrap a primitive value into a wrapper class object.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Please note that Java has <strong>one wrapper class mapped to each primitive data type<\/strong>. <\/p><\/blockquote>\n\n\n\n<p>For example, <code>java.lang.Integer<\/code> class is the object version of int data type. Similarly, we have total of 8 wrapper classes for all 8 primitive data types.<\/p>\n\n\n\n<p>The wrapper class names are the same as primitive data types names, only starting with a capital letter.<\/p>\n\n\n\n<p>These wrapper classes are <code>Boolean<\/code>, <code>Byte<\/code>, <code>Short<\/code>, <code>Character<\/code>, <code>Integer<\/code>, <code>Long<\/code>, <code>Float<\/code> and <code>Double<\/code>.<\/p>\n\n\n\n<h2 id=\"4-auto-boxing\">4. Auto-boxing<\/h2>\n\n\n\n<p>In Java, you can assign a primitive type value to a wrapper class, directly. <\/p>\n\n\n\n<p>For example, you can assign a <strong>int<\/strong> value to <strong>Interger<\/strong> class reference.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Integer counter = 20;\n\nstatic Float PI = 3.14f;<\/code><\/pre>\n\n\n\n<p>It&#8217;s worth mentioning that all wrapper class instances are <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/how-to-make-a-java-class-immutable\/\">immutable<\/a>. They also maintain an <a href=\"https:\/\/howtodoinjava.com\/java-examples\/internal-cache-wrapper-classes\/\">internal cache for performance reason<\/a>.<\/p>\n\n\n\n<h2 id=\"5-difference-between-primitive-and-non-primitive-data-types\">5. Difference between primitive and non-primitive data types<\/h2>\n\n\n\n<ol><li>Primitives store values directly, which are called literals. Reference types store references to actual objects in memory area.<\/li><li>There are 8 fixed primitive data types. In Java, each class is a data type including wrapper classes.<\/li><\/ol>\n\n\n\n<h2 id=\"6-best-practices\">6. Best practices<\/h2>\n\n\n\n<ol><li>Use <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-naming-conventions\/\">Java variable naming conventions<\/a> and follow best practices.<\/li><li>Use primitives for variables which are local in scope. e.g. inside methods, counter for loops and intermediate results.<\/li><li>When data is transferred among method or classes, it&#8217;s better to use objects because only their references will be copied, no memory overhead will be added.<\/li><li>When dealing with <a href=\"https:\/\/howtodoinjava.com\/java-collections\/\">collections<\/a> (which need objects), you shall be using Objects.<\/li><li>While sending data over network, use objects and make them <code><a href=\"https:\/\/howtodoinjava.com\/java\/serialization\/java-serialization\/\">Serializable<\/a><\/code>. Wrapper classes are automatically <code>Serializable<\/code>.<\/li><li>Always know the size of data type you will need. Use appropriate data sizes. Using <code>int<\/code> to store <code>boolean<\/code> values (0 and 1) is waste of memory.<\/li><li>Use underscores (above Java 7) in numbers. It make them <strong>more readable<\/strong>.<\/li><\/ol>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn about various data types in Java. Learn the differences between primitive datatypes and non-primitive datatypes (or reference datatypes). We will also learn about the data types sizes and best practices to use datatypes in Java. 1. Variable Declarations In Java, typically datatypes are associated with variables. A variable declaration has three parts: A variable &#8230; <a title=\"Java Data Types\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/data-types-in-java\/\" aria-label=\"More on Java Data Types\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11146,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[754],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg",543,221,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg",150,61,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg",300,122,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg",543,221,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg",543,221,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg",543,221,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg",543,221,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/Java-Data-Type.jpg",120,49,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn about various data types in Java. Learn the differences between primitive datatypes and non-primitive datatypes (or reference datatypes). We will also learn about the data types sizes and best practices to use datatypes in Java. 1. Variable Declarations In Java, typically datatypes are associated with variables. A variable declaration has three parts: A variable&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4745"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4745"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4745\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11146"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4745"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4745"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4745"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}