{"id":11998,"date":"2018-10-30T13:00:37","date_gmt":"2018-10-30T07:30:37","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=11998"},"modified":"2022-01-04T22:55:43","modified_gmt":"2022-01-04T17:25:43","slug":"java-comparator","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/collections\/java-comparator\/","title":{"rendered":"Java Comparator Interface"},"content":{"rendered":"\n<p>Java <strong>Comparator<\/strong> interface is used to sort an <a href=\"https:\/\/howtodoinjava.com\/series\/java-arrays\/\">array<\/a> or <a href=\"https:\/\/howtodoinjava.com\/java-arraylist\/\">List<\/a> of objects based on <strong>custom sort order<\/strong>. The custom ordering of items is imposed by implementing Comparator&#8217;s <em>compare()<\/em> method in the objects.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-c368a301 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"uag-toc__collapsible-wrap\">\t\t\t<svg xmlns=\"https:\/\/www.w3.org\/2000\/svg\" viewBox= \"0 0 320 512\"><path d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"><\/path><\/svg>\n\t\t\t<\/span>\n\t\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-when-to-use-comparator-interface\">1. When to Use Comparator Interface<\/a><li class=\"uagb-toc__list\"><a href=\"#2-overriding-compare-method\">2. Overriding compare() Method<\/a><li class=\"uagb-toc__list\"><a href=\"#3-using-comparator-with\">3. Using Comparator With<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#31-collectionssort-and-arrayssort\">3.1. Collections.sort() and Arrays.sort()<\/a><li class=\"uagb-toc__list\"><a href=\"#32-collectionscomparing\">3.2. Collections.comparing()<\/a><li class=\"uagb-toc__list\"><a href=\"#33-collectionsthencomparing\">3.3. Collections.thenComparing()<\/a><li class=\"uagb-toc__list\"><a href=\"#34-collectionsreverseorder\">3.4. Collections.reverseOrder()<\/a><li class=\"uagb-toc__list\"><a href=\"#35-other-collection-classes\">3.5. Other Collection Classes<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#4-java-comparator-examples\">4. Java Comparator Examples<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-sorting-list-of-custom-objects\">4.1. Sorting List of Custom Objects<\/a><li class=\"uagb-toc__list\"><a href=\"#42-sort-list-in-reverse-order\">4.2. Sort List in Reverse Order<\/a><li class=\"uagb-toc__list\"><a href=\"#43-group-by-sorting\">4.3. Group By Sorting<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#5-conclusion\">5. Conclusion<\/a><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. When to Use Comparator Interface<\/h2>\n\n\n\n<p>Java <code>Comparator<\/code> interface imposes a <strong>total ordering<\/strong> on the objects which may not have a desired natural ordering.<\/p>\n\n\n\n<p>For example, for a <em>List<\/em> of <em>Employee<\/em> objects, the natural order may be ordered by employee&#8217;s id. But in real-life applications, we may want to sort the list of employees by their first name, date of birth or simply any other such criteria. In such conditions, we need to use <code>Comparator<\/code> interface.<\/p>\n\n\n\n<p>We can use the <em>Comparator<\/em> interface in the following situations.<\/p>\n\n\n\n<ul><li>Sorting the array or list of objects, but <strong>NOT in natural order<\/strong>.<\/li><li>Sorting the array or list of objects where we <strong>can not modify the source code<\/strong> to implement <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-comparable-interface\/\" target=\"_blank\" rel=\"noreferrer noopener\">Comparable<\/a> interface.<\/li><li>Using <strong>group by sort<\/strong> on list or array of objects on multiple different fields.<\/li><\/ul>\n\n\n\n<h2>2. Overriding compare() Method<\/h2>\n\n\n\n<p>To enable total ordering on objects, we need to create a class that implements the <em>Comparator<\/em> interface. Then we need to override its <code>compare(T o1, T o2)<\/code> method.<\/p>\n\n\n\n<p>The <em>compare()<\/em> compares its two arguments for <em>order<\/em>. It returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.<\/p>\n\n\n\n<p>The implementor must also ensure that the relation is <strong>transitive<\/strong>: <code>((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0))<\/code> implies <code>compare(x, z)&gt;0<\/code>.<\/p>\n\n\n\n<p>For a given <em>Employee<\/em> class, the order by employee name can be imposed by creating a <em>Comparator<\/em> like below.<\/p>\n\n\n\n<pre title=\"NameSorter.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.Comparator;\n\npublic class NameSorter implements Comparator&lt;Employee>\n{\n    @Override\n    public int compare(Employee e1, Employee e2) {\n        return e1.getName().compareToIgnoreCase( e2.getName() );\n    }\n}<\/code><\/pre>\n\n\n\n<pre title=\"Employee.java\" class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.time.LocalDate;\n\npublic class Employee {\n\n    private Long id;\n    private String name;\n    private LocalDate dob;\n}<\/code><\/pre>\n\n\n\n<h2>3. Using Comparator With<\/h2>\n\n\n\n<h3>3.1. Collections.sort() and Arrays.sort()<\/h3>\n\n\n\n<ol><li>Use <strong>Collections.sort(list, Comparator)<\/strong> method sort a <strong>list<\/strong> of objects in order imposed by provided comparator instance.<\/li><li>Use <strong>Arrays.sort(array, Comparator)<\/strong> method sort an <strong>array<\/strong> of objects in order imposed by provided comparator instance.<\/li><\/ol>\n\n\n\n<h3>3.2. Collections.comparing()<\/h3>\n\n\n\n<p>This utility method accepts a function that extracts a sort key for the class. This is essentially a field on which the class objects will be sorted.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Order by name\r\nComparator.comparing(Employee::getName);\r\n \r\n\/\/Order by name in reverse order\r\nComparator.comparing(Employee::getName).reversed();\r\n \r\n\/\/Order by id field\r\nComparator.comparing(Employee::getId);\r\n \r\n\/\/Order by employee age\r\nComparator.comparing(Employee::getDate);<\/code><\/pre>\n\n\n\n<h3>3.3. Collections.thenComparing()<\/h3>\n\n\n\n<p>This utility method is used for <strong>group by sort<\/strong>. Using this method, we can chain multiple comparators to sort the list or array of objects on multiple fields.<\/p>\n\n\n\n<p>It is very similar to <strong>SQL GROUP BY clause<\/strong> to order rows on different fields.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Order by name and then by age\r\nComparator.comparing(Employee::getName)\r\n            .thenComparing(Employee::getDob);\r\n \r\n\/\/Order by name -> date of birth -> id \r\nComparator.comparing(Employee::getName)\r\n            .thenComparing(Employee::getDob)\r\n            .thenComparing(Employee::getId);<\/code><\/pre>\n\n\n\n<p>Using the above syntax, we can create virtually any sorting logic.<\/p>\n\n\n\n<h3>3.4. Collections.reverseOrder()<\/h3>\n\n\n\n<p>This utility method returns a comparator that imposes the reverse of the <em>natural ordering<\/em> or <em>total ordering<\/em> on a collection of objects that implement the Comparable interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Reverse of natural order as specified in \r\n\/\/Comparable interface's compareTo() method \r\n \r\nComparator.reversed();\r\n \r\n\/\/Reverse of order by name\r\n \r\nComparator.comparing(Employee::getName).reversed();<\/code><\/pre>\n\n\n\n<h3>3.5. Other Collection Classes<\/h3>\n\n\n\n<p>Comparators can also be used to control the order of certain data structures (such as\u00a0<a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/util\/SortedSet.html\" target=\"_blank\" rel=\"noreferrer noopener\">sorted sets<\/a>\u00a0or\u00a0<a href=\"https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/util\/SortedMap.html\" target=\"_blank\" rel=\"noreferrer noopener\">sorted maps<\/a>) to provide an ordering that is not\u00a0natural ordering.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">SortedSet&lt;Employee> sortedUniqueEmployees = new TreeSet&lt;Employee>(new NameSorter());<\/code><\/pre>\n\n\n\n<h2>4. Java Comparator Examples<\/h2>\n\n\n\n<h3>4.1. Sorting List of Custom Objects<\/h3>\n\n\n\n<p>Java example to <strong>sort a list of employees by name<\/strong> using Comparator.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee> list = new ArrayList&lt;>();\n         \n\/\/Sort in reverse natural order\nCollections.sort(list, new NameSorter());<\/code><\/pre>\n\n\n\n<h3>4.2. Sort List in Reverse Order<\/h3>\n\n\n\n<p>Java example to <strong>sort a list of employees by name<\/strong> using Comparator in <strong>reverse order<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee> list = new ArrayList&lt;>();\n         \nCollections.sort(list, Comparator.comparing( Employee::getName ).reversed());<\/code><\/pre>\n\n\n\n<h3>4.3. Group By Sorting<\/h3>\n\n\n\n<p>Java example to sort a list of employees on multiple fields i.e. <strong>field by field<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">ArrayList&lt;Employee> list = new ArrayList&lt;>();\n \nComparator&lt;Employee> groupByComparator = Comparator.comparing(Employee::getName)\n                                        .thenComparing(Employee::getDob)\n                                        .thenComparing(Employee::getId);\n \nCollections.sort(list, groupByComparator);<\/code><\/pre>\n\n\n\n<h2>5. Conclusion<\/h2>\n\n\n\n<p>In this tutorial, we learned about <em>Comparator<\/em> interface of <a href=\"https:\/\/howtodoinjava.com\/java-collections\/\">Java collection framework<\/a>. It helps in imposing a total order on objects without any change to the source code of that class.<\/p>\n\n\n\n<p>We learned to sort list and array of custom objects. We also learned to <em>reverse sort<\/em> and <em>implement group by sort in Java<\/em>.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java Comparator interface used to sort a array or list of objects based on custom order. Custom ordering of elements is imposed by implementing Comparator.compare() method in the objects.<\/p>\n","protected":false},"author":2,"featured_media":18641,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[785],"tags":[1453],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo-300x300.png",300,300,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",500,500,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2021\/11\/java-logo.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Java Comparator interface used to sort a array or list of objects based on custom order. Custom ordering of elements is imposed by implementing Comparator.compare() method in the objects.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/11998"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=11998"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/11998\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/18641"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=11998"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=11998"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=11998"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}