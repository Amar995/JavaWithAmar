{"id":13310,"date":"2020-05-24T00:19:19","date_gmt":"2020-05-23T18:49:19","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=13310"},"modified":"2020-05-24T00:19:19","modified_gmt":"2020-05-23T18:49:19","slug":"tutorial-introduction","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/kafka\/tutorial-introduction\/","title":{"rendered":"Apache Kafka &#8211; Introduction"},"content":{"rendered":"<p>Learn to download and setup Apache Kafka and inbuilt zookeeper from scratch. This tutorial is for absolute beginners to offer them some tips while learning Kafka in longer run.<\/p>\n<h2>1. What is Apache Kafka?<\/h2>\n<p>Apache Kafka is a <strong>distributed streaming platform<\/strong> based on <strong>publish\/subscribe<\/strong> messaging system. Another term which is used for Kafka is &#8220;distributed commit log&#8221;.<\/p>\n<p>Just like we store the transactional data in database, so that we can retrieve it later to make some business decisions, Kafka also stores data in form of messages. Data within Kafka is stored <strong>durably<\/strong>, in order, and can be read <em>deterministically<\/em>.<\/p>\n<p>The main feature of Kafka is its <strong>scaling capability<\/strong> as well as <strong>protection against failures<\/strong> using data replication.<\/p>\n<p><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka.png\" alt=\"Overview_of_Apache_Kafka\" width=\"800\" height=\"597\" class=\"aligncenter size-full wp-image-13311\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka.png 800w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka-300x224.png 300w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka-768x573.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/p>\n<h4>1.1. Message<\/h4>\n<p>The <strong>unit of data<\/strong> within Kafka is called a message. Think of this as a row in database table.<\/p>\n<p>The massage has two parts &#8211; <strong>key and body<\/strong>. Both are simply an array of bytes and Kafka does not do anything magical to read and make sense of these bytes. It can be XML, JSON, String or anything. Many Kafka developers favor the use of <strong>Apache Avro<\/strong>, which is a serialization framework originally developed for Hadoop. Kafka does not care and store everything.<\/p>\n<p>Keys are used to write messages into partitions in a more controlled manner. Kafka simply finds the hash of the key and uses it to find the partition number where message has to be written (logic is not this much simple, off-course).<\/p>\n<p>This assures that messages with the same key are always written to the same partition. <\/p>\n<h4>1.2. Batch<\/h4>\n<p>A batch is just a <strong>collection of messages<\/strong>, all of which are being produced to the <em>same topic and partition<\/em>. <\/p>\n<p>Messages move within network in form of batches. This is done for efficiency is network utilization.<\/p>\n<p>Batches are also typically compressed, providing more efficient data transfer and storage at the cost of some processing power.<\/p>\n<h4>1.3. Topics<\/h4>\n<p>A Kafka topic is very similar to database table or a folder in a filesystem. Topics are additionally broken down into a number of partitions. <\/p>\n<p>For example, consider we have topic with name &#8220;<code>activity-log<\/code>&#8221; which has 3 partitions with names: <\/p>\n<ul>\n<li><code>activity-log-0<\/code><\/li>\n<li><code>activity-log-1<\/code><\/li>\n<li><code>activity-log-2<\/code><\/li>\n<\/ul>\n<p>When a source system send messages to <code>activity-log<\/code> topic, these messages (1-n) can be stored in either of the partition based on load and various other factors.<\/p>\n<p>Here a <code>message-1<\/code> will be stored in one partition only. similarly <code>message-2<\/code> will be stored in same or another partition. No message will be stored in multiple partitions of given topic.<\/p>\n<p>Please note that if there is a sequence between all messages, then Kafka only ensures the sequence of messages stored in a single partition. There is no guarantee of sequence for all messages stored in multiple partitions.<\/p>\n<p>A <strong>stream<\/strong> is considered to be a single topic storing certain class of data, regardless of the number of its partitions. When working with other systems, Kafka present this <code>topic<\/code> (e.g. <code>activity-log<\/code>) as either producer or consumer for stream of those messages.<\/p>\n<h4>1.4. Bokers and Cluster<\/h4>\n<p>A single Kafka server is called a broker. The broker receives messages from producer clients, assigns and maintain their offsets, and stores the messages in storage system.<\/p>\n<p>It also services consumers, responding to fetch requests for partitions and responding with the messages that have been committed to disk.<\/p>\n<p>If hardware support is good then a single broker can easily handle thousands of partitions and millions of messages per second.<\/p>\n<p>Kafka brokers are designed to operate as part of a cluster. Within a cluster of brokers, one broker will also function as the <strong>cluster controller<\/strong> which is responsible for administrative operations, including assigning partitions to brokers and monitoring for broker failures.<\/p>\n<h2>2. Advantages<\/h2>\n<ul>\n<li>Kafka is able to provide <strong>high throughput<\/strong> while handling <strong>multiple producers<\/strong> emitting data sets to a single topic or multiple topics. This makes Kafka for processing bulk events\/messages from front-end systems recording page-views, mouse tracking or user behavior.<\/li>\n<li>Kafka <strong>multiple consumers<\/strong> to read any single stream of messages without interfering with each other. Each message can be read N number of times because <strong>messages are durable<\/strong>.<\/li>\n<li>Durable messages also means that consumer can work on <strong>historical data<\/strong>. Though, Kafka support <strong>real time processing<\/strong> as well.\n<p>It also means that if for some time some consumers are offline, they do not lose any data and gets it when they connect back.<\/li>\n<li>Kafka is highly scalable and bokers(nodes) can be added or removed in runtime. The cluster need not to be stopped.<\/li>\n<li>Kafka provides excellent performance and is able to handle million of records per second within supporting hardware or infrastructure.<\/li>\n<\/ul>\n<h2>3. Conclusion<\/h2>\n<p>This post was all about giving a very high level overview of how Kafka look like. There are very high number of items which you will read about when going into finer details.<\/p>\n<p>In next post, we will learn download and start a Kafka broker and will run some beginners command to start with.<\/p>\n<p>Happy Learning !!<\/p>\n<p>References : <a href=\"https:\/\/kafka.apache.org\/intro\" target=\"_blank\" rel=\"noopener noreferrer\">Kafka Website<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn to download and setup Apache Kafka and inbuilt zookeeper from scratch. This tutorial is for absolute beginners to offer them some tips while learning Kafka in longer run. 1. What is Apache Kafka? Apache Kafka is a distributed streaming platform based on publish\/subscribe messaging system. Another term which is used for Kafka is &#8220;distributed &#8230; <a title=\"Apache Kafka &#8211; Introduction\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/kafka\/tutorial-introduction\/\" aria-label=\"More on Apache Kafka &#8211; Introduction\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":13311,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1301],"tags":[1459],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka.png",800,597,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka-300x224.png",300,224,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka-768x573.png",768,573,true],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka.png",800,597,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka.png",800,597,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka.png",800,597,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2020\/05\/Overview_of_Apache_Kafka.png",120,90,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn to download and setup Apache Kafka and inbuilt zookeeper from scratch. This tutorial is for absolute beginners to offer them some tips while learning Kafka in longer run. 1. What is Apache Kafka? Apache Kafka is a distributed streaming platform based on publish\/subscribe messaging system. Another term which is used for Kafka is &#8220;distributed&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/13310"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=13310"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/13310\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/13311"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=13310"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=13310"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=13310"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}