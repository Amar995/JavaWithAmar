{"id":12215,"date":"2018-11-27T17:11:52","date_gmt":"2018-11-27T11:41:52","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=12215"},"modified":"2022-06-27T13:21:09","modified_gmt":"2022-06-27T07:51:09","slug":"junit-mockito-example","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/mockito\/junit-mockito-example\/","title":{"rendered":"Getting Started With Mockito and JUnit"},"content":{"rendered":"\n<p>In this <a href=\"https:\/\/howtodoinjava.com\/mockito\/junit-mockito-example\/\">mockito tutorial<\/a>, learn the fundamentals of the mockito framework, and how to write JUnit tests along with mockito with an example.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-3edf362d \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-mockito-introduction\">1. Mockito Introduction<\/a><li class=\"uagb-toc__list\"><a href=\"#2-mockito-setup\">2. Mockito Setup<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#21-maven\">2.1. Maven<\/a><li class=\"uagb-toc__list\"><a href=\"#22-bootstrapping-with-junit\">2.2. Bootstrapping with JUnit<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#3-mockito-annotations\">3. Mockito Annotations<\/a><li class=\"uagb-toc__list\"><a href=\"#4-mockito-demo\">4. Mockito Demo<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#41-system-under-test\">4.1. System Under Test<\/a><li class=\"uagb-toc__list\"><a href=\"#42-test-demo\">4.2. Test Demo<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#5-conclusion\">5. Conclusion<\/a><\/li><\/ul><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2>1. Mockito Introduction<\/h2>\n\n\n\n<p>Mockito is an open-source framework that allows us to easily create <a href=\"https:\/\/www.martinfowler.com\/bliki\/TestDouble.html\">test doubles<\/a> (mocks). A &#8216;<em>test double<\/em>&#8216; is a generic term for any case where we replace a production object for testing purposes.<\/p>\n\n\n\n<p>In mockito, we generally work with the following kinds of test doubles.<\/p>\n\n\n\n<ul><li><strong>Stubs<\/strong> &#8211; are objects that have predefined return values to the method executions made during the test.<\/li><li><strong>Spies<\/strong> &#8211; are objects that are similar to stubs, but they additionally record the stats of how they were executed.<\/li><li><strong>Mocks<\/strong> &#8211; are objects that have return values to method executions made during the test and has recorded expectations of these executions. Mocks can throw an exception if they receive a call they don&#8217;t expect and are checked during verification to ensure they got all the calls they were expecting.<\/li><\/ul>\n\n\n\n<p><strong>We can mock both interfaces and classes<\/strong> in the test class. Mockito also <strong>helps to produce minimum boilerplate code<\/strong> if we use the using mockito annotations.<\/p>\n\n\n\n<p>Once created, <strong>a mock will remember all interactions<\/strong>. Then we can selectively verify whatever interactions we are interested in.<\/p>\n\n\n\n<h2>2. Mockito Setup<\/h2>\n\n\n\n<h3>2.1. Maven<\/h3>\n\n\n\n<p>To add mockito into the project, we can add the <a href=\"https:\/\/mvnrepository.com\/artifact\/org.mockito\/mockito-core\" target=\"_blank\" rel=\"noreferrer noopener\">latest mockito version<\/a> by any means i.e. Maven, Gradle or jar file.<\/p>\n\n\n\n<pre title=\"pom.xml\" class=\"wp-block-code\"><code lang=\"xml\" class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.mockito&lt;\/groupId&gt;\n    &lt;artifactId&gt;mockito-core&lt;\/artifactId&gt;\n    &lt;version&gt;4.6.1&lt;\/version&gt;\n    &lt;scope&gt;test&lt;\/scope&gt;\n&lt;\/dependency&gt;<\/code><\/pre>\n\n\n\n<pre title=\"build.gradle\" class=\"wp-block-code\"><code lang=\"properties\" class=\"language-properties\">testCompile group: 'org.mockito', name: 'mockito-core', version: '4.6.1'<\/code><\/pre>\n\n\n\n<h3>2.2. Bootstrapping with JUnit <\/h3>\n\n\n\n<p>To process Mockito annotations with <a href=\"https:\/\/howtodoinjava.com\/junit-5-tutorial\/\">JUnit 5<\/a>, we need to use <em>MockitoExtention<\/em> as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@ExtendWith(MockitoExtension.class)\npublic class ApplicationTest {\n   \/\/code\n}<\/code><\/pre>\n\n\n\n<p>For legacy <a href=\"https:\/\/howtodoinjava.com\/junit-4\/\">JUnit 4<\/a>, we can use either <em>MockitoJUnitRunner<\/em> or <em>MockitoRule<\/em> classes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@RunWith(MockitoJUnitRunner.class)\npublic class ApplicationTest {\n\t\/\/code\n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class ApplicationTest {\n\t@Rule public MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);\n\n\t\/\/code\n}<\/code><\/pre>\n\n\n\n<p>The <a href=\"https:\/\/www.javadoc.io\/doc\/org.mockito\/mockito-core\/latest\/org\/mockito\/quality\/Strictness.html\" target=\"_blank\" rel=\"noreferrer noopener\">strict stubbing<\/a> ensures clean tests, reduces test code duplication, and improves debuggability. The test fails early when the code under test invokes a stubbed method with different arguments, or unused stubs are present.<\/p>\n\n\n\n<p>Alternatively, we can programmatically bootstrap mockito using <em>openMocks()<\/em> method somewhere in the base class or a test runner. This method initializes fields annotated with Mockito annotations @<code>Mock<\/code>, @<code>Spy<\/code>, @<code>Captor<\/code>, @<code>InjectMocks<\/code>.<\/p>\n\n\n\n<p>The previously used <em>initMocks()<\/em> method is now deprecated.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class ApplicationTest {\n\tMockitoAnnotations.openMocks(this);\n}\n<\/code><\/pre>\n\n\n\n<h2>3. Mockito Annotations<\/h2>\n\n\n\n<p>Before hitting the keyboard to write unit tests, let&#8217;s quickly go through the useful mockito annotations.<\/p>\n\n\n\n<ul><li><strong>@Mock<\/strong> is used for mock creation. It makes the test class more readable.<\/li><li><strong>@Spy<\/strong> is used to create a spy instance. We can use it instead <code>spy(Object)<\/code> method.<\/li><li><strong>@InjectMocks<\/strong> is used to instantiate the tested object automatically and inject all the <em>@Mock<\/em> or <em>@Spy<\/em> annotated field dependencies into it (if applicable). It is worth knowing the <a href=\"https:\/\/howtodoinjava.com\/mockito\/mockito-mock-injectmocks\/\">difference between @Mock and @InitMocks annotations<\/a>.<\/li><li><strong>@Captor<\/strong> is used to create an argument captor.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class ApplicationTest {\n  @Mock\n  Depedency mock;\n\n  @InjectMocks\n  Service codeUnderTest;\n}<\/code><\/pre>\n\n\n\n<h2>4. Mockito Demo<\/h2>\n\n\n\n<h3>4.1. System Under Test<\/h3>\n\n\n\n<p>To demo the Mockito syntax, we have created a typical usecase where a <em>RecordService<\/em> invokes <em>RecordDao<\/em> to save a <em>Record<\/em>. <\/p>\n\n\n\n<p>The <em>RecordService<\/em> uses a <em>SequenceGenerator<\/em> class to get the next record id.<\/p>\n\n\n\n<h3>4.2. Test Demo<\/h3>\n\n\n\n<ul><li>To test <em>RecordService.saveRecord()<\/em> method, we need to inject <em>RecordDao<\/em> and <em>SequenceGenerator<\/em> as dependencies in it. For this, we are using <em>@Mock<\/em> and <em>@InjectMocks<\/em> annotations. <\/li><li>The <em>@ExtendWith(MockitoExtension.class)<\/em> starts the bootstrapping process and injects the mocks into the service instance. <\/li><li>We use the <strong><em>when(&#8230;).then(&#8230;)<\/em><\/strong> methods to record the expectations from mock objects, and we verify these expectations, after the application code execution finishes, using the <strong><em>verify()<\/em><\/strong> method calls. <\/li><li>Finally, we can use additional <a href=\"https:\/\/howtodoinjava.com\/junit5\/junit-5-assertions-examples\/\">JUnit assertions<\/a> for additional validations, if any.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@ExtendWith(MockitoExtension.class)\npublic class MockitoHelloTest {\n\n  @Mock\n  RecordDao mockDao;\n\n  @Mock\n  NotificationService mockNotification;\n\n  @Mock\n  SequenceGenerator mockGenerator;\n\n  @InjectMocks\n  RecordService service;\n\n  @Test\n  public void testSaveRecord() {\n\n    Record record = new Record();\n    record.setName(\"Test Record\");\n\n    when(mockGenerator.getNext()).thenReturn(100L);\n    when(mockDao.saveRecord(record)).thenReturn(record);\n\n    Record savedRecord = service.saveRecord(record);\n\n    verify(mockGenerator, times(1)).getNext();\n    verify(mockDao, times(1)).saveRecord(any(Record.class));\n\n    assertEquals(\"Test Record\", savedRecord.getName());\n    assertEquals(100L, savedRecord.getId());\n  }\n}<\/code><\/pre>\n\n\n\n<h2>5. Conclusion<\/h2>\n\n\n\n<p>In this <strong>Mockito JUnit tutorial<\/strong>, we learned the basics of mocking and stubbing using the mockito framework. We learned to bootstrap the mocking process in JUnit 4 and 5 environments.<\/p>\n\n\n\n<p>Finally, we saw an example of a test using mockito and junit.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Spring-Boot-Examples\/tree\/master\/Testing-Libraries\">Sourcecode on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>In this mockito tutorial, learn the fundamentals of the mockito framework, and how to write JUnit tests along with mockito with an example.<\/p>\n","protected":false},"author":2,"featured_media":12214,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1224],"tags":[1471,1568],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/11\/Mockito.png",800,400,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/11\/Mockito.png",150,75,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/11\/Mockito.png",300,150,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/11\/Mockito.png",768,384,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/11\/Mockito.png",800,400,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/11\/Mockito.png",800,400,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/11\/Mockito.png",800,400,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/11\/Mockito.png",120,60,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"In this mockito tutorial, learn the fundamentals of the mockito framework, and how to write JUnit tests along with mockito with an example.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12215"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=12215"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12215\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/12214"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=12215"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=12215"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=12215"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}