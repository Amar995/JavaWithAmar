{"id":3703,"date":"2014-04-05T19:16:51","date_gmt":"2014-04-05T13:46:51","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=3703"},"modified":"2022-02-26T17:06:23","modified_gmt":"2022-02-26T11:36:23","slug":"functional-interface-tutorial","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/stream\/functional-interface-tutorial\/","title":{"rendered":"Functional Interfaces in Java"},"content":{"rendered":"\n<p>Introduced in Java 8, <strong>a functional interface is simply an interface that has exactly one abstract method<\/strong>. Learn more about functional interfaces in this tutorial.<\/p>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1   uagb-block-0a509471 \" \n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tdata-delay= \"800\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t<div class=\"uagb-toc__title-wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap\">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#1-what-is-a-functional-interface\">1. What is a Functional Interface?<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#11-only-one-abstract-method-is-allowed\">1.1. Only one abstract method is allowed<\/a><li class=\"uagb-toc__list\"><a href=\"#12-implemented-by-lambda-expressions\">1.2. Implemented by Lambda Expressions<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#2-functionalinterface-annotation\">2. @FunctionalInterface Annotation<\/a><li class=\"uagb-toc__list\"><a href=\"#3-functional-interfaces-in-jdk\">3. Functional Interfaces in JDK<\/a><li class=\"uagb-toc__list\"><a href=\"#4-demo\">4. Demo<\/a><li class=\"uagb-toc__list\"><a href=\"#5-conclusion\">5. Conclusion<\/a><\/li><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<h2 id=\"1-what-are-functional-interfaces\">1. What is a Functional Interface?<\/h2>\n\n\n\n<h3>1.1. Only one <code>abstract<\/code> method is allowed<\/h3>\n\n\n\n<p>Functional interfaces are new additions in Java 8. <strong>As a rule, a functional interface can contain exactly one abstract method.<\/strong> These functional interfaces are also called <strong>Single Abstract Method interfaces (SAM Interfaces)<\/strong>.<\/p>\n\n\n\n<p>Apart from one abstract method, a <strong>functional interface can also have the following methods that do not count<\/strong>\u00a0for defining it as a functional interface.<\/p>\n\n\n\n<ul><li><a href=\"https:\/\/howtodoinjava.com\/java8\/default-methods-in-java-8\/\">Default methods<\/a><\/li><li><a href=\"https:\/\/howtodoinjava.com\/java\/keywords\/java-static-keyword\/\">Static methods<\/a><\/li><li>Public methods inherited from the\u00a0<em>Object<\/em>\u00a0class<\/li><\/ul>\n\n\n\n<h3>1.2. Implemented by Lambda Expressions<\/h3>\n\n\n\n<p>In Java, <a href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\"><em>lambda expressions<\/em><\/a> can be used to represent an instance of a functional interface. For example, <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-comparator\/\">Comparator<\/a> interface is a functional interface. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@FunctionalInterface\npublic interface Comparator&lt;T&gt; {\n\tint compare(T o1, T o2);\n\tboolean equals(Object obj);\n\n\t\/\/and multiple default methods...\n}<\/code><\/pre>\n\n\n\n<p><em>Comparator<\/em> interface has only two abstract methods <code>compare()<\/code> and <code>equals()<\/code>. But <em>equals()<\/em> has been inherited from the <em>Object<\/em> class, so it is not counted. Other than these two methods, all other methods are <em>default methods<\/em>. So <em>Comparator<\/em> is qualified to be declared as a functional interface. <\/p>\n\n\n\n<p>Java program to implement <em>Comparator<\/em> using a lambda expression.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\/\/Compare by Id\r\nComparator&lt;Employee> compareById = Comparator.comparing(e -> e.getId());\n\nComparator&lt;Employee> compareByFirstName = Comparator.comparing(e -> e.getFirstName());<\/code><\/pre>\n\n\n\n<h2 id=\"2-functionalinterface-annotation\">2. @FunctionalInterface Annotation<\/h2>\n\n\n\n<p>Java 8 introduced the annotation <code>@FunctionalInterface<\/code> to mark an interface as a functional interface. The primary use of this annotation is <strong>for compiler-level errors when the interface violates the contracts of precisely one abstract method<\/strong>.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Note that <strong>using the annotation\u00a0<em>@FunctionalInterface<\/em>\u00a0is optional<\/strong>. <\/p><\/blockquote>\n\n\n\n<p>If the interface has one abstract method and does not have <em>@FunctionalInterface<\/em> annotation, the interface is still a functional interface, and it can be the target type for lambda expressions.<\/p>\n\n\n\n<p>The presence of the annotation protects us from inadvertently changing a functional interface into a non-functional interface, as the compiler will catch it.<\/p>\n\n\n\n<p>Let&#8217;s build our first functional interface. Note that methods in an interface are, by default, <em>abstract<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@FunctionalInterface\npublic interface MyFirstFunctionalInterface \n{\n    public void firstWork();\n}<\/code><\/pre>\n\n\n\n<p>Let&#8217;s try to add another abstract method:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">@FunctionalInterface\npublic interface MyFirstFunctionalInterface \n{\n    public void firstWork();\n    public void doSomeMoreWork();   \/\/error\n}<\/code><\/pre>\n\n\n\n<p>The above code will result in a compiler error:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Unexpected @FunctionalInterface annotation\n@FunctionalInterface ^ MyFirstFunctionalInterface is not a functional interface\nmultiple non-overriding abstract methods found in interface MyFirstFunctionalInterface<\/pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"673\" height=\"243\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Functional-Interface-Error.png\" alt=\"Functional-Interface-Error\" class=\"wp-image-3704\" srcset=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Functional-Interface-Error.png 673w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Functional-Interface-Error-300x108.png 300w, https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/04\/Functional-Interface-Error-672x243.png 672w\" sizes=\"(max-width: 673px) 100vw, 673px\" \/><\/figure><\/div>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Read More : <a href=\"https:\/\/howtodoinjava.com\/java\/stream\/generic-functional-interfaces\/\">Generic Functional Interfaces<\/a><\/p><\/blockquote>\n\n\n\n<h2 id=\"3-commonly-used-functional-interfaces\">3. Functional Interfaces in JDK<\/h2>\n\n\n\n<p>The following is a list of Java&#8217;s most commonly used functional interfaces.<\/p>\n\n\n\n<ul><li>Runnable: contains only the <em>run()<\/em> method.<\/li><li>Comparable: contains only the <em>compareTo()<\/em> method.<\/li><li>ActionListener:\u00a0contains only the <em>actionPerformed()<\/em> method.<\/li><li><em>Callable<\/em>:\u00a0contains only the <em>call()<\/em> method.<\/li><li><a href=\"https:\/\/howtodoinjava.com\/java8\/how-to-use-predicate-in-java-8\/\"><em>Predicate<\/em><\/a>: a boolean-valued function that takes an argument and returns\u00a0true\u00a0or\u00a0false.<\/li><li><em>BiPredicate<\/em>: a predicate with two arguments.<\/li><li><em>Consumer<\/em>: an operation that takes an argument, operates on it, and returns no result.<\/li><li><em>BiConsumer<\/em>: a consumer with two arguments.<\/li><li><em>Supplier<\/em>: a supplier that returns a value.<\/li><li><em>Function&lt;T, R><\/em>: \u00a0takes an argument of type\u00a0T\u00a0and returns a result of type\u00a0R.<\/li><li><em>BiFunction&lt;T, U, R><\/em>: takes two arguments of types\u00a0T\u00a0and\u00a0U\u00a0and returns a result of type\u00a0R.<\/li><\/ul>\n\n\n\n<h2 id=\"4-demo\">4. Demo<\/h2>\n\n\n\n<p>Let&#8217;s see a quick example of creating and using functional interfaces in Java.<\/p>\n\n\n\n<p>We are using a functional interface <em>Function<\/em> to create the formula for mathematical squares. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">Function&lt;Integer, Integer&gt; square = x -&gt; x * x;<\/code><\/pre>\n\n\n\n<p>The Function interface has one abstract method <code>apply()<\/code> that we have implemented above. we can execute the above method as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">System.out.println( square.apply(5) );  \/\/Prints 25<\/code><\/pre>\n\n\n\n<h2>5. Conclusion<\/h2>\n\n\n\n<p>In this tutorial, we learned to create and manage functional interfaces in Java. We learned that a <em>functional interface<\/em> has only one <em>abstract<\/em> method and they can be implemented by the lambda expressions.<\/p>\n\n\n\n<p>We also saw the JDK provided existing functional interfaces, and finally how to create an use a functional interface.<\/p>\n\n\n\n<p>Happy Learning !!<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default download\"><p><a href=\"https:\/\/github.com\/lokeshgupta1981\/Core-Java\/tree\/master\/src\/main\/java\/com\/howtodoinjava\/core\/streams\" target=\"_blank\" rel=\"noreferrer noopener\">Sourcecode on Github<\/a><\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Introduced in Java 8, a functional interface is simply an interface that has exactly one abstract method. Learn more about functional interfaces in this tutorial.<\/p>\n","protected":false},"author":2,"featured_media":20205,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1535],"tags":[579,1512],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/Java-Streams.jpg",1280,720,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/Java-Streams-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/Java-Streams-300x169.jpg",300,169,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/Java-Streams-768x432.jpg",768,432,true],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/Java-Streams-1024x576.jpg",1024,576,true],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/Java-Streams.jpg",1280,720,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/Java-Streams.jpg",1280,720,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2019\/03\/Java-Streams-120x120.jpg",120,120,true]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":15,"uagb_excerpt":"Introduced in Java 8, a functional interface is simply an interface that has exactly one abstract method. Learn more about functional interfaces in this tutorial.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3703"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=3703"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/3703\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/20205"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=3703"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=3703"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=3703"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}