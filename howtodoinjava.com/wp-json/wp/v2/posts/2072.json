{"id":2072,"date":"2013-05-15T08:56:06","date_gmt":"2013-05-15T03:26:06","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=2072"},"modified":"2020-12-26T00:43:55","modified_gmt":"2020-12-25T19:13:55","slug":"date-and-time-api-changes-in-java-8-lambda","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java8\/date-and-time-api-changes-in-java-8-lambda\/","title":{"rendered":"Java 8 &#8211; Date and Time Examples"},"content":{"rendered":"<p>A big part of developer community has been complaining about <strong>Date and Calendar classes<\/strong>. Reasons were many such as hard to understand, hard to use and not flexible. Date class has even become obsolete and java docs suggest to use <code>Calendar<\/code> class instead of <code>Date<\/code> class. And on top of all, <strong>Date comparison<\/strong> is buggy and I have also faced such issue in past.<\/p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-2075 aligncenter\" alt=\"Java 8 date api changes\" src=\"\/\/howtodoinjava.com\/wp-content\/uploads\/java-date-api.png\" width=\"250\" height=\"156\" \/><\/p>\n<p>Moving forward, JAVA 8 (<a href=\"https:\/\/howtodoinjava.com\/java8\/lambda-expressions\/\">Lambda<\/a>) is expected to release the new Date and Time APIs\/classes (<a title=\"jsr-310\" href=\"http:\/\/ww38.hgithub.com\/ThreeTen\/threeten\"><strong>JSR-310<\/strong><\/a>), also called as <strong>ThreeTen<\/strong>,  which will simply change the way you have been doing till date. This A key part of this is providing a new API that is dramatically easier to use and less error prone.<\/p>\n<p>It will provide some highly demanded features such as:<\/p>\n<ul>\n<li>All the key public classes are immutable and thread-safe<\/li>\n<li>Defined terminology and behavior that other areas in computing can adopt<\/li>\n<\/ul>\n<div class=\"noticeboxesde bluenoticebox\">I wrote this post on 15th May 2013. Now today on 18th Mar 2014, java 8 is finally released and available for early access. I have re-validated and verified all the outputs in post examples. They work like charm as they did in May last year. Only change encountered was in <code>TemporalAdjuster.java<\/code>. Previously it was a class, now it is a <strong><code>@FunctionalInterface<\/code><\/strong>. So, I have corrected the related example and used the class &#8220;<code>TemporalAdjusters.java<\/code>&#8220;.<\/div>\n<pre>Table of Contents\r\n\r\nNew classes to represent local date and timezone\r\nNew classes to represent timestamp and duration\r\nAdded utility classes over existing enums\r\nDate adjusters introduced\r\nBuilding dates will be easier\r\nNew class to simulate system\/machine clock\r\nTimezone handling related changes\r\nDate formatting changes\r\nReferences<\/pre>\n<h2>New classes to represent local date and timezone<\/h2>\n<p>The new classes intended to replace Date class are <code>LocalDate<\/code>, <code>LocalTime<\/code> and <code>LocalDateTime<\/code>.<\/p>\n<h4>LocalDate<\/h4>\n<p> The <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/LocalDate.html\">LocalDate<\/a> class represents a date. There is no representation of a time or time-zone.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nLocalDate localDate = LocalDate.now();\r\nSystem.out.println(localDate.toString());                \/\/2013-05-15\r\nSystem.out.println(localDate.getDayOfWeek().toString()); \/\/WEDNESDAY\r\nSystem.out.println(localDate.getDayOfMonth());           \/\/15\r\nSystem.out.println(localDate.getDayOfYear());            \/\/135\r\nSystem.out.println(localDate.isLeapYear());              \/\/false\r\nSystem.out.println(localDate.plusDays(12).toString());   \/\/2013-05-27\r\n<\/pre>\n<h4>LocalTime<\/h4>\n<p> The <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/LocalTime.html\">LocalTime<\/a> class represents a time. There is no representation of a date or time-zone.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/LocalTime localTime = LocalTime.now();     \/\/toString() in format 09:57:59.744\r\nLocalTime localTime = LocalTime.of(12, 20);\r\nSystem.out.println(localTime.toString());    \/\/12:20\r\nSystem.out.println(localTime.getHour());     \/\/12\r\nSystem.out.println(localTime.getMinute());   \/\/20\r\nSystem.out.println(localTime.getSecond());   \/\/0\r\nSystem.out.println(localTime.MIDNIGHT);      \/\/00:00\r\nSystem.out.println(localTime.NOON);          \/\/12:00\r\n<\/pre>\n<h4>LocalDateTime<\/h4>\n<p> The <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/LocalDateTime.html\">LocalDateTime<\/a> class represents a date-time. There is no representation of a time-zone.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nLocalDateTime localDateTime = LocalDateTime.now(); \r\nSystem.out.println(localDateTime.toString());      \/\/2013-05-15T10:01:14.911\r\nSystem.out.println(localDateTime.getDayOfMonth()); \/\/15\r\nSystem.out.println(localDateTime.getHour());       \/\/10\r\nSystem.out.println(localDateTime.getNano());       \/\/911000000\r\n<\/pre>\n<p>If you want to use the date functionality with zone information, then Lambda provide you extra 3 classes similar to above one i.e. <code>OffsetDate<\/code>, <code>OffsetTime<\/code> and <code>OffsetDateTime<\/code>. Timezone offset can be represented in &#8220;+05:30&#8221; or &#8220;Europe\/Paris&#8221; formats. This is done via using another class i.e. <code>ZoneId<\/code>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nOffsetDateTime offsetDateTime = OffsetDateTime.now();\r\nSystem.out.println(offsetDateTime.toString());            \t\/\/2013-05-15T10:10:37.257+05:30\r\n\r\noffsetDateTime = OffsetDateTime.now(ZoneId.of(&amp;quot;+05:30&amp;quot;));\r\nSystem.out.println(offsetDateTime.toString());            \t\/\/2013-05-15T10:10:37.258+05:30\r\n\r\noffsetDateTime = OffsetDateTime.now(ZoneId.of(&amp;quot;-06:30&amp;quot;));\r\nSystem.out.println(offsetDateTime.toString());            \t\/\/2013-05-14T22:10:37.258-06:30\r\n\r\nZonedDateTime zonedDateTime = \r\n\t\t\t\tZonedDateTime.now(ZoneId.of(&amp;quot;Europe\/Paris&amp;quot;));\r\nSystem.out.println(zonedDateTime.toString());     \t\t\t\/\/2013-05-15T06:45:45.290+02:00[Europe\/Paris]\r\n<\/pre>\n<h2>New classes to represent timestamp and duration<\/h2>\n<h4>Instant<\/h4>\n<p>For representing the specific timestamp ant any moment, the class needs to be used is <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/Instant.html\">Instant<\/a>. The <code>Instant<\/code> class represents an instant in time to an accuracy of nanoseconds. Operations on an <code>Instant<\/code> include comparison to another <code>Instant<\/code> and adding or subtracting a duration.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nInstant instant = Instant.now();\r\nSystem.out.println(instant.toString());                                 \/\/2013-05-15T05:20:08.145Z\r\nSystem.out.println(instant.plus(Duration.ofMillis(5000)).toString());   \/\/2013-05-15T05:20:13.145Z\r\nSystem.out.println(instant.minus(Duration.ofMillis(5000)).toString());  \/\/2013-05-15T05:20:03.145Z\r\nSystem.out.println(instant.minusSeconds(10).toString());\t\t\t\t\/\/2013-05-15T05:19:58.145Z\r\n<\/pre>\n<h4>Duration<\/h4>\n<p><a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/Duration.html\">Duration<\/a> class is a whole new concept brought first time in java language. It represents the time difference between two time stamps.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nDuration duration = Duration.ofMillis(5000);\r\nSystem.out.println(duration.toString());     \/\/PT5S\r\n\r\nduration = Duration.ofSeconds(60);\r\nSystem.out.println(duration.toString());     \/\/PT1M\r\n\r\nduration = Duration.ofMinutes(10);\r\nSystem.out.println(duration.toString());     \/\/PT10M\r\n\r\nduration = Duration.ofHours(2);\r\nSystem.out.println(duration.toString());     \/\/PT2H\r\n\r\nduration = Duration.between(Instant.now(), Instant.now().plus(Duration.ofMinutes(10)));\r\nSystem.out.println(duration.toString());  \/\/PT10M\r\n<\/pre>\n<p><code>Duration<\/code> deals with small unit of time such as milliseconds, seconds, minutes and hour. They are more suitable for interacting with application code. <\/p>\n<h4>Period<\/h4>\n<p>To interact with human, you need to get bigger durations which are presented with <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/Period.html\">Period<\/a> class.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nPeriod period = Period.ofDays(6);\r\nSystem.out.println(period.toString());    \/\/P6D\r\n\r\nperiod = Period.ofMonths(6);\r\nSystem.out.println(period.toString());    \/\/P6M\r\n\r\nperiod = Period.between(LocalDate.now(), \r\n\t\t\tLocalDate.now().plusDays(60));\r\nSystem.out.println(period.toString());   \/\/P1M29D\r\n<\/pre>\n<h2>Added utility classes over existing enums<\/h2>\n<p>The current Java SE platform uses int constants for months, day-of-week and am-pm etc. Now a lot of extra utility classes have been added which work on top of these enums. I am taking an example such a class <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/DayOfWeek.html\">DayOfWeek<\/a>. This class is a wrapper of day enums and can be used consistently with other classes also.<\/p>\n<h4>DayOfWeek<\/h4>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/day-of-week to represent, from 1 (Monday) to 7 (Sunday)\r\nSystem.out.println(DayOfWeek.of(2));        \t\t\t\/\/TUESDAY \r\n\r\nDayOfWeek day = DayOfWeek.FRIDAY;\r\nSystem.out.println(day.getValue());         \t\t\t\/\/5\r\n\r\nLocalDate localDate = LocalDate.now();\r\nSystem.out.println(localDate.with(DayOfWeek.MONDAY));  \/\/2013-05-13  i.e. when was monday in current week ?\r\n<\/pre>\n<p>Other such classes are  <code>Month<\/code>, <code>MonthDay<\/code>, <code>Year<\/code>, <code>YearMonth<\/code> and many more.<\/p>\n<h2>Date adjusters<\/h2>\n<p>Date adjusters are another beautiful and useful addition in date handling tools. It easily solves the problems like : How do you <em>find last day of the month<\/em>? Or the <em>next working day<\/em>? Or a week on Tuesday?<\/p>\n<p>Lets see in code.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nLocalDate date = LocalDate.of(2013, Month.MAY, 15);\t\t\t\t\t\t\/\/Today\r\n\t\t\r\nLocalDate endOfMonth = date.with(TemporalAdjusters.lastDayOfMonth());\r\nSystem.out.println(endOfMonth.toString()); \t\t\t\t\t\t\t\t\/\/2013-05-31\r\n\r\nLocalDate nextTue = date.with(TemporalAdjusters.next(DayOfWeek.TUESDAY));\r\nSystem.out.println(nextTue.toString());\t\t\t\t\t\t\t\t\t\/\/2013-05-21\r\n<\/pre>\n<h2>Creating date objects<\/h2>\n<p>Creating date objects now can be done using <a href=\"\/\/howtodoinjava.com\/design-patterns\/creational\/builder-pattern-in-java\/\">builder pattern<\/a> also. The builder pattern allows the object you want to be built up using individual parts. This is achieved using the methods prefixed by &#8220;at&#8221;.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/Builder pattern used to make date object\r\n OffsetDateTime date1 = Year.of(2013)\r\n\t\t\t\t\t\t.atMonth(Month.MAY).atDay(15)\r\n\t\t\t\t\t\t.atTime(0, 0)\r\n\t\t\t\t\t\t.atOffset(ZoneOffset.of(&amp;quot;+03:00&amp;quot;));\r\n System.out.println(date1);   \t\t\t\t\t\t\t\t\t\/\/2013-05-15T00:00+03:00\r\n\r\n\/\/factory method used to make date object\r\nOffsetDateTime date2 = OffsetDateTime.\r\n\t\t\t\t\t\tof(2013, 5, 15, 0, 0, 0, 0, ZoneOffset.of(&amp;quot;+03:00&amp;quot;));\r\nSystem.out.println(date2);\t\t\t\t\t\t\t\t\t\t\/\/2013-05-15T00:00+03:00\r\n<\/pre>\n<h2>New class to simulate system\/machine clock<\/h2>\n<p>A new class <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/Clock.html\">Clock<\/a> is proposed in new release. This <strong>simulates the system clock functionality<\/strong>. I loved this feature most of all others. The reason is while doing unit testing. you are often required to test a API in future date. For this we had been forwarding the system clock for next date, and then again restart the server and test the application.<\/p>\n<p>Now, no need to do this. Use <code>Clock<\/code> class to simulate this scenario.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nClock clock = Clock.systemDefaultZone();\r\nSystem.out.println(clock);\t\t\t\t\t\t\/\/SystemClock[Asia\/Calcutta]\r\nSystem.out.println(clock.instant().toString());\t\/\/2013-05-15T06:36:33.837Z\r\nSystem.out.println(clock.getZone());\t\t\t\/\/Asia\/Calcutta\r\n\r\nClock anotherClock = Clock.system(ZoneId.of(&amp;quot;Europe\/Tiraspol&amp;quot;));\r\nSystem.out.println(anotherClock);\t\t\t\t\t\t\/\/SystemClock[Europe\/Tiraspol]\r\nSystem.out.println(anotherClock.instant().toString());\t\/\/2013-05-15T06:36:33.857Z\r\nSystem.out.println(anotherClock.getZone());\t\t\t\t\/\/Europe\/Tiraspol\r\n\r\nClock forwardedClock  = Clock.tick(anotherClock, Duration.ofSeconds(600));\r\nSystem.out.println(forwardedClock.instant().toString());  \/\/2013-05-15T06:30Z\r\n<\/pre>\n<h2>Timezone Changes<\/h2>\n<p>Timezone related handling is done by 3 major classes. These are <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/ZoneOffset.html\">ZoneOffset<\/a>, <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/TimeZone.html\">TimeZone<\/a>, <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/time\/zone\/ZoneRules.html\">ZoneRules<\/a>.<\/p>\n<ul>\n<li>The <code>ZoneOffset<\/code> class represents a fixed offset from UTC in seconds. This is normally represented as a string of the format &#8220;\u00b1hh:mm&#8221;.<\/li>\n<li>The <code>TimeZone<\/code> class represents the identifier for a region where specified time zone rules are defined.<\/li>\n<li>The <code>ZoneRules<\/code> are the actual set of rules that define when the zone-offset changes.<\/li>\n<\/ul>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\n\/\/Zone rules\r\nSystem.out.println(ZoneRules.of(ZoneOffset.of(&amp;quot;+02:00&amp;quot;)).isDaylightSavings(Instant.now()));\r\nSystem.out.println(ZoneRules.of(ZoneOffset.of(&amp;quot;+02:00&amp;quot;)).isFixedOffset());\r\n<\/pre>\n<h2>Date Formatting<\/h2>\n<p>Date formatting is supported via two classes mainly i.e. <code>DateTimeFormatterBuilder<\/code> and <code>DateTimeFormatter<\/code>. <code>DateTimeFormatterBuilder<\/code> works on builder pattern to build custom patterns where as <code>DateTimeFormatter<\/code> provides necessary input in doing so.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nDateTimeFormatterBuilder formatterBuilder = new DateTimeFormatterBuilder();\r\nformatterBuilder.append(DateTimeFormatter.ISO_LOCAL_DATE_TIME)\r\n\t\t\t\t.appendLiteral(&amp;quot;-&amp;quot;)\r\n\t\t\t\t.appendZoneOrOffsetId();\r\nDateTimeFormatter formatter = formatterBuilder.toFormatter();\r\nSystem.out.println(formatter.format(ZonedDateTime.now()));\r\n<\/pre>\n<p>These are major changes which I was able to identify and worked on.<\/p>\n<h2>References<\/h2>\n<ul>\n<li><a title=\"download lambda\" href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/java\/javaOO\/lambdaexpressions.html\">https:\/\/docs.oracle.com\/javase\/tutorial\/java\/javaOO\/lambdaexpressions.html<\/a><\/li>\n<li><a title=\"date changes ref doc\" href=\"https:\/\/sourceforge.net\/projects\/threeten\/\">http:\/\/sourceforge.net\/apps\/mediawiki\/threeten\/index.php?title=User_Guide<\/a><\/li>\n<\/ul>\n<p><strong>Happy Learning !!<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>A big part of developer community has been complaining about Date and Calendar classes. Reasons were many such as hard to understand, hard to use and not flexible. Date class has even become obsolete and java docs suggest to use Calendar class instead of Date class. And on top of all, Date comparison is buggy &#8230; <a title=\"Java 8 &#8211; Date and Time Examples\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java8\/date-and-time-api-changes-in-java-8-lambda\/\" aria-label=\"More on Java 8 &#8211; Date and Time Examples\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":7845,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[18],"tags":[1409,1410,576],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/04\/DateTimeCalendar.png",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/04\/DateTimeCalendar-150x150.png",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/04\/DateTimeCalendar.png",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/04\/DateTimeCalendar.png",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/04\/DateTimeCalendar.png",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/04\/DateTimeCalendar.png",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/04\/DateTimeCalendar.png",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2017\/04\/DateTimeCalendar.png",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":2,"uagb_excerpt":"A big part of developer community has been complaining about Date and Calendar classes. Reasons were many such as hard to understand, hard to use and not flexible. Date class has even become obsolete and java docs suggest to use Calendar class instead of Date class. And on top of all, Date comparison is buggy&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/2072"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=2072"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/2072\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/7845"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=2072"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=2072"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=2072"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}