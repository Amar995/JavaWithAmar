{"id":10369,"date":"2018-05-17T17:14:29","date_gmt":"2018-05-17T11:44:29","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=10369"},"modified":"2022-01-25T01:59:52","modified_gmt":"2022-01-24T20:29:52","slug":"java-variables","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/java-variables\/","title":{"rendered":"Java Variables"},"content":{"rendered":"<p>In this Java tutorial, learn about the <strong>Java variables<\/strong> and <strong>types of variables<\/strong>. Also, look at the example of how to declare a variable in Java. We will also see some best practices for naming the variables in Java.<\/p>\n<blockquote><p>The Java programming language uses both &#8220;<strong>fields<\/strong>&#8221; and &#8220;<strong>variables<\/strong>&#8221; as part of its terminology. <strong>Fields refer to variables declared outside methods<\/strong>, and <strong>variables are referred to declarations inside methods<\/strong>, including method arguments.<\/p><\/blockquote>\n<h2>1. What is a Variable?<\/h2>\n<p>As the term suggests, a variable is <strong>whose value can vary during the runtime<\/strong>. In Java, a variable is a <strong>named reference to a memory area<\/strong> where the value of the variable is stored.<\/p>\n<figure id=\"attachment_11144\" aria-describedby=\"caption-attachment-11144\" style=\"width: 533px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" src=\"https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg\" alt=\"Java Variable Example\" width=\"543\" height=\"221\" class=\"size-full wp-image-11144\" \/><figcaption id=\"caption-attachment-11144\" class=\"wp-caption-text\">How a variable works<\/figcaption><\/figure>\n<h4>1.1. Java Variable Syntax<\/h4>\n<p>The given syntax explains <em>how to declare a variable in java<\/em>:<\/p>\n<blockquote><p>[data_type] [variable_name] = [variable_value];<\/p><\/blockquote>\n<ul>\n<li><strong>data_type<\/strong> &#8211; refer to type of information stored in memory area.<\/li>\n<li><strong>variable_name<\/strong> &#8211; refer to name of variable.<\/li>\n<li><strong>variable_value<\/strong> &#8211; refer to value to be stored in memory area.<\/li>\n<\/ul>\n<p>For example, the below statements are valid variable declarations in Java.<\/p>\n<pre class=\"brush: java; title: Example of variable declarations; notranslate\" title=\"Example of variable declarations\">\r\nint i = 10;         \/\/Variable of int type\r\n\r\nString str = &quot;howtodoinjava.com&quot;;   \/\/Variable of string type\r\n\r\nObject obj = new Object();      \/\/Variable of object type\r\n\r\nint[] scores = [1,2,3,4,5,6,7,8,9];         \/\/Variable of int type\r\n<\/pre>\n<h4>1.2. Java Variable Example<\/h4>\n<pre class=\"brush: java; title: Variable example; notranslate\" title=\"Variable example\">\r\nint i = 10;\r\nint j = 10;\r\n\r\nint sum = i + j;\r\n\r\nSystem.out.println( sum );  \/\/ Prints 20\r\n<\/pre>\n<h2>2. Widening and Narrowing<\/h2>\n<h4>2.1. Widening<\/h4>\n<p>When a small <a href=\"https:\/\/howtodoinjava.com\/java\/basics\/primitive-data-types-in-java\/\">primitive type<\/a> value is automatically accommodated in a bigger\/wider primitive data type, this is called the widening of the variable. In given example, <strong>int<\/strong> type variable is assigned to <strong>long<\/strong> type variable without any data loss or error.<\/p>\n<pre class=\"brush: java; title: Variable widening example; notranslate\" title=\"Variable widening example\">\r\nint i = 10;\r\nlong j = i;\r\n\r\nSystem.out.println( i );  \r\nSystem.out.println( j );  \r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n10\r\n10\r\n<\/pre>\n<h4>2.2. Narrowing<\/h4>\n<p>When a larger primitive type value is assigned in a smaller size primitive data type, this is called the narrowing of the variable. It can cause some data loss due to less number of bits available to store the data. It <strong>requires explicit type-casting<\/strong> to required data type.<\/p>\n<p>In given example, <strong>int<\/strong> type variable is assigned to <strong>byte<\/strong> type variable with data loss.<\/p>\n<pre class=\"brush: java; title: Variable narrowing example; notranslate\" title=\"Variable narrowing example\">\r\nint i=198;  \r\nbyte j=(byte)i;  \r\n\r\nSystem.out.println( i );  \r\nSystem.out.println( j );  \r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n198\r\n-58\r\n<\/pre>\n<h2>3. Types of Variables in Java<\/h2>\n<p>In Java, there are <strong><a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/java\/nutsandbolts\/variables.html\">four types of variables<\/a><\/strong>. These variables can be either of <strong>primitive types<\/strong>, <strong>class types<\/strong> or <strong><a href=\"https:\/\/howtodoinjava.com\/series\/java-arrays\/\">array types<\/a><\/strong>.<\/p>\n<p>All variables are divided based on <strong>scope of variables<\/strong> where they can be accessed.<\/p>\n<ol>\n<li>\n<h4>Instance variables<\/h4>\n<p> Variables declared (in class) without <code>static<\/code> keyword. Non-static fields are also known as instance variables because their values are <strong>unique to each instance of a class<\/strong>. They are also called <em>state variables<\/em>.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class VariableExample\r\n{\r\n    int counter = 20;         \/\/1 - Instance variable\r\n}\r\n<\/pre>\n<\/li>\n<li>\n<h4>Static variables<\/h4>\n<p> Also know as <em>class variables<\/em>. It is any field declared with the <code><a href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-static-keyword\/\">static<\/a><\/code> modifier. It means that there is <strong>exactly one copy of this variable in existence<\/strong>, regardless of how many times the class has been instantiated.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class VariableExample\r\n{\r\n    static float PI = 3.14f;    \/\/2 - Class variable\r\n}\r\n<\/pre>\n<p>A variable declared as <strong>&#8220;public static&#8221;<\/strong> can be treated as global variable in java.\n    <\/li>\n<li>\n<h4>Local variables<\/h4>\n<p> These are used inside methods as temporary variables exist during the method execution. The syntax for declaring a local variable is similar to declaring a field. Local variables are <strong>only visible to the methods<\/strong> in which they are declared; they are not accessible from the rest of the class.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class VariableExample\r\n{\r\n    public static void main( String[] args ) {\r\n\r\n        int age = 30;     \/\/3 - Local variable (inside method body)\r\n    }\r\n}\r\n<\/pre>\n<\/li>\n<li>\n<h4>Method arguments<\/h4>\n<p> An argument is a variable that is passed to a method when the method is called. Arguments are also <strong>only accessible inside the method that declares them<\/strong>, although a value is assigned to them when the method is called.<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\npublic class VariableExample\r\n{\r\n    public static void main( String[] args ) {\r\n\r\n        print( 40 );\r\n    }\r\n\r\n    public static void print ( int param ) {      \/\/4 - Method Argument\r\n\r\n        System.out.println ( param );\r\n    }\r\n}\r\n<\/pre>\n<\/li>\n<\/ol>\n<h2>4. Difference between Instance variables and Class Variables<\/h2>\n<ul>\n<li>Instance variables (<strong>non-static fields<\/strong>) are unique to each instance of a class.<\/li>\n<li>Class variables (<strong>static fields<\/strong>) are fields declared with the <code>static<\/code> modifier; there is exactly one copy of a class variable, regardless of how many times the class has been instantiated.<\/li>\n<li>To access instance variable, you MUST create a new instance of class. Class variables are accessible through class reference, and do not require to create object instance.\n<p>Take an example. We have a class <code>Data<\/code> which has one instance variable as well as one class variable.<\/p>\n<pre class=\"brush: java; title: Data.java; notranslate\" title=\"Data.java\">\r\npublic class Data \r\n{\r\n    int counter = 20;\r\n\r\n    static float PI = 3.14f;\r\n}\r\n<\/pre>\n<p>We can access both variables in a given way.<\/p>\n<pre class=\"brush: java; title: Main.java; notranslate\" title=\"Main.java\">\r\npublic class Main \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Data dataInstance = new Data();\r\n        \r\n        \/\/Need new instance\r\n\r\n        System.out.println( dataInstance.counter );    \/\/20\r\n        \r\n        \/\/Can access using class reference\r\n\r\n        System.out.println( Data.PI );                 \/\/3.14 \r\n    }\r\n}\r\n<\/pre>\n<\/li>\n<\/ul>\n<h2>5. Variable Naming Conventions in Java<\/h2>\n<p>There are a few rules and conventions related to <strong>how to define variable names<\/strong>.<\/p>\n<ol>\n<li>Java variable names are <strong>case sensitive<\/strong>. The variable name <code>employee<\/code> is not the same as <code>Employee<\/code> or <code>EMPLOYEE<\/code>.<\/li>\n<li>Java variable names <strong>must start with a letter<\/strong>, or the <code> $ <\/code> or <code> _ <\/code> character.<\/li>\n<li>After the first character in a Java variable name, the name <strong>can also contain numbers<\/strong>, <code> $ <\/code> or <code> _ <\/code> characters.<\/li>\n<li>Variable names <strong>cannot be reserved keywords<\/strong> in Java. For instance, the words <code>break<\/code><br \/>\n        or <code>continue<\/code> are reserved words in Java. Therefore you cannot name your variables to them.<\/li>\n<li>Variable names should written in <strong>lowercase<\/strong>. For instance, <code>variable<\/code> or <code>apple<\/code>.<\/li>\n<li>If variable names consist of multiple words, then follow <strong>camelcase<\/strong> notation. For instance, <code>deptName<\/code> or <code>firstName<\/code>.<\/li>\n<li>Static final fields (<em>constants<\/em>) should be named in all UPPERCASE, typically using an <code> _ <\/code> to separate the words in the name. For example <code>LOGGER<\/code> or <code>INTEREST_RATE<\/code>.<\/li>\n<\/ol>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this Java tutorial, learn about the Java variables and types of variables. Also, look at the example of how to declare a variable in Java. We will also see some best practices for naming the variables in Java. The Java programming language uses both &#8220;fields&#8221; and &#8220;variables&#8221; as part of its terminology. Fields refer &#8230; <a title=\"Java Variables\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/java-variables\/\" aria-label=\"More on Java Variables\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":11144,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[1165],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg",543,221,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg",150,61,false],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg",300,122,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg",543,221,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg",543,221,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg",543,221,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg",543,221,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2018\/05\/varaible-example.jpg",120,49,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":0,"uagb_excerpt":"In this Java tutorial, learn about the Java variables and types of variables. Also, look at the example of how to declare a variable in Java. We will also see some best practices for naming the variables in Java. The Java programming language uses both &#8220;fields&#8221; and &#8220;variables&#8221; as part of its terminology. Fields refer&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/10369"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=10369"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/10369\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/11144"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=10369"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=10369"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=10369"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}