{"id":12170,"date":"2018-11-19T16:04:45","date_gmt":"2018-11-19T10:34:45","guid":{"rendered":"https:\/\/howtodoinjava.com\/?p=12170"},"modified":"2020-08-22T00:21:30","modified_gmt":"2020-08-21T18:51:30","slug":"foreach-method-example","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java8\/foreach-method-example\/","title":{"rendered":"Java 8 forEach()"},"content":{"rendered":"<p>The <strong>Java forEach()<\/strong> method is a utility function to iterate over a collection such as (list, set or map) and <a href=\"https:\/\/howtodoinjava.com\/java\/stream\/java-streams-by-examples\/\">stream<\/a>. It is used to perform a given action on each the element of the collection.<\/p>\n<p>The <code>forEach()<\/code> method has been added in following places:<\/p>\n<ul>\n<li><strong><code>Iterable<\/code> interface<\/strong> &#8211; This makes <code>Iterable.forEach()<\/code> method available to all collection classes except <code>Map<\/code><\/li>\n<li><code><strong>Map<\/strong><\/code> interface &#8211; This makes <code>forEach()<\/code> operation available to all map classes.<\/li>\n<li><code><strong>Stream<\/strong><\/code> interface &#8211; This makes <code>forEach()<\/code> and <code>forEachOrdered()<\/code> operations available to all types of stream.<\/li>\n<\/ul>\n<h2>1. Iterable forEach()<\/h2>\n<h4>1.1. forEach() Method<\/h4>\n<p>The given code snippet shows the default implementation of <code><a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/lang\/Iterable.html#forEach-java.util.function.Consumer-\">forEach()<\/a><\/code> method in <a href=\"https:\/\/howtodoinjava.com\/java\/collections\/java-iterator\/\">Iterable<\/a> interface. <\/p>\n<p>Internally it uses the <a href=\"https:\/\/howtodoinjava.com\/java\/flow-control\/enhanced-for-each-loop-in-java\/\">enhanced for-loop<\/a>. So using the new for-loop will give the same effect and performance as <code>forEach()<\/code> method.<\/p>\n<pre class=\"brush: java; title: Iterable.java; notranslate\" title=\"Iterable.java\">\r\ndefault void forEach(Consumer&lt;? super T&gt; action) \r\n{\r\n    Objects.requireNonNull(action);\r\n    for (T t : this) {\r\n        action.accept(t);\r\n    }\r\n}\r\n<\/pre>\n<p>The <code>forEach()<\/code> method performs the given <code>action<\/code> for each element of the <code>Iterable<\/code> until all elements have been processed or the <code>action<\/code> throws an exception. <\/p>\n<h4>Example 1: Java program to iterate over a List using forEach()<\/h4>\n<pre class=\"brush: java; title: Using forEach() method; notranslate\" title=\"Using forEach() method\">\r\nList&lt;String&gt; names = Arrays.asList(&quot;Alex&quot;, &quot;Brian&quot;, &quot;Charles&quot;);\r\n\t\r\nnames.forEach(System.out::println);\r\n<\/pre>\n<p>Program Output:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nAlex\r\nBrian\r\nCharles\r\n<\/pre>\n<h4>1.2. Creating consumer action<\/h4>\n<p>In above example, the <code>action<\/code> represents an operation that accepts a single input argument and returns no result. It is an instance of <code>Consumer<\/code> interface.<\/p>\n<p>By creating the consumer action like this, we can specify <em>multiple statements<\/em> to be executed in a syntax similar to a method.<\/p>\n<pre class=\"brush: java; title: Creating consumer action; notranslate\" title=\"Creating consumer action\">\r\nList&lt;String&gt; names = Arrays.asList(&quot;Alex&quot;, &quot;Brian&quot;, &quot;Charles&quot;);\r\n\r\nConsumer&lt;String&gt; makeUpperCase = new Consumer&lt;String&gt;()\r\n{\r\n    @Override\r\n    public void accept(String t) \r\n    {\r\n    \tSystem.out.println(t.toUpperCase());\r\n    }\r\n};\r\n\r\nnames.forEach(makeUpperCase);\t\r\n<\/pre>\n<p>Program Output:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nALEX\r\nBRIAN\r\nCHARLES\r\n<\/pre>\n<h2>2. Map forEach()<\/h2>\n<h4>2.1. forEach() Method<\/h4>\n<p>This method performs the given <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/function\/BiConsumer.html\">BiConsumer<\/a> action for each <code>Entry<\/code> in this <code>Map<\/code> until all entries have been processed or the action throws an exception.<\/p>\n<pre class=\"brush: java; title: Map.java; notranslate\" title=\"Map.java\">\r\ndefault void forEach(BiConsumer&lt;? super K, ? super V&gt; action) {\r\n    Objects.requireNonNull(action);\r\n    for (Map.Entry&lt;K, V&gt; entry : entrySet()) {\r\n        K k;\r\n        V v;\r\n        try {\r\n            k = entry.getKey();\r\n            v = entry.getValue();\r\n        } catch(IllegalStateException ise) {\r\n            \/\/ this usually means the entry is no longer in the map.\r\n            throw new ConcurrentModificationException(ise);\r\n        }\r\n        action.accept(k, v);\r\n    }\r\n}\r\n<\/pre>\n<h4>Example 2: Java program to iterate over a Map using forEach()<\/h4>\n<pre class=\"brush: java; title: Using Map.forEach() method; notranslate\" title=\"Using Map.forEach() method\">\r\nMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();\r\n\r\nmap.put(&quot;A&quot;, &quot;Alex&quot;);\r\nmap.put(&quot;B&quot;, &quot;Brian&quot;);\r\nmap.put(&quot;C&quot;, &quot;Charles&quot;);\r\n\r\nmap.forEach((k, v) -&gt; \r\n\tSystem.out.println(&quot;Key = &quot; + k + &quot;, Value = &quot; + v));\r\n<\/pre>\n<p>Program Output:<\/p>\n<pre class=\"brush: java; title: ; notranslate\" title=\"\">\r\nKey = A, Value = Alex\r\nKey = B, Value = Brian\r\nKey = C, Value = Charles\r\n<\/pre>\n<p>We can also create a <em>custom BiConsumer action<\/em> which will take key-value pairs from <code>Map<\/code> and process each entry one at a time.<\/p>\n<pre class=\"brush: java; title: Create custom BiConsumer; notranslate\" title=\"Create custom BiConsumer\">\r\nBiConsumer&lt;String, Integer&gt; action = (a, b) -&gt; \r\n{ \r\n\t\/\/Process the entry here as per business\r\n    System.out.println(&quot;Key is : &quot; + a); \r\n    System.out.println(&quot;Value is : &quot; + b); \r\n}; \r\n\r\nMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\r\n    \r\nmap.put(&quot;A&quot;, 1);\r\nmap.put(&quot;B&quot;, 2);\r\nmap.put(&quot;C&quot;, 3);\r\n\r\nmap.forEach(action);\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\nKey is : A\r\nValue is : 1\r\n\r\nKey is : B\r\nValue is : 2\r\n\r\nKey is : C\r\nValue is : 3\r\n<\/pre>\n<h2>3. Stream forEach() and forEachOrdered()<\/h2>\n<p>In <code>Stream<\/code>, <code>forEach()<\/code> and <code>forEachOrdered()<\/code> are terminal operations. <\/p>\n<p>Similar to <code>Iterable<\/code>, stream <code>forEach()<\/code> method performs an action for each element of the stream. <\/p>\n<p>For <em>sequential streams<\/em>, the order of elements (during iteration) is same as the order in the stream source, so the output would be same whether we use <code>forEach()<\/code> or <code>forEachOrdered()<\/code>.<\/p>\n<p>while using <em>parallel streams<\/em>, use <code>forEachOrdered()<\/code> if order of the elements matter during the iteration. <code>forEach()<\/code> method does not gaurantee the element ordering to provide the advantages of parallelism.<\/p>\n<h4>Example 3: Java forEach() example to iterate over Stream<\/h4>\n<p>In this example, we are printing all the even numbers from a stream of numbers.<\/p>\n<pre class=\"brush: java; title: Java 8 forEach over stream elements; notranslate\" title=\"Java 8 forEach over stream elements\">\r\nList&lt;Integer&gt; numberList = Arrays.asList(1,2,3,4,5);\r\n    \r\nConsumer&lt;Integer&gt; action = System.out::println;\r\n\r\nnumberList.stream()\r\n\t.filter(n -&gt; n%2  == 0)\r\n\t.forEach( action );\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n2\r\n4\r\n<\/pre>\n<h4>Example 4: Java forEachOrdered() example to iterate over Stream<\/h4>\n<p>In this example, we are printing all the even numbers from a stream of numbers.<\/p>\n<pre class=\"brush: java; title: Java 8 forEachOrdered over stream elements; notranslate\" title=\"Java 8 forEachOrdered over stream elements\">\r\nList&lt;Integer&gt; numberList = Arrays.asList(1,2,3,4,5);\r\n    \r\nConsumer&lt;Integer&gt; action = System.out::println;\r\n\r\nnumberList.stream()\r\n\t.filter(n -&gt; n%2  == 0)\r\n\t.parallel()\r\n\t.forEachOrdered( action );\r\n<\/pre>\n<p>Program output.<\/p>\n<pre class=\"brush: java; title: Console; notranslate\" title=\"Console\">\r\n2\r\n4\r\n<\/pre>\n<p>Happy Learning !!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>The Java forEach is a utility method to iterate over a collection or stream and perform a certain action on each element of it.<\/p>\n","protected":false},"author":2,"featured_media":4758,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[18],"tags":[1409,1445],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",200,200,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2015\/06\/java-8.jpg",120,120,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":5,"uagb_excerpt":"The Java forEach is a utility method to iterate over a collection or stream and perform a certain action on each element of it.","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12170"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=12170"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/12170\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4758"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=12170"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=12170"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=12170"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}