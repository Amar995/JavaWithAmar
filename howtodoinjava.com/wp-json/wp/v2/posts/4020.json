{"id":4020,"date":"2014-07-09T12:43:48","date_gmt":"2014-07-09T07:13:48","guid":{"rendered":"http:\/\/howtodoinjava.com\/?p=4020"},"modified":"2022-01-29T23:27:07","modified_gmt":"2022-01-29T17:57:07","slug":"difference-between-32-bit-java-vs-64-bit-java","status":"publish","type":"post","link":"https:\/\/howtodoinjava.com\/java\/basics\/difference-between-32-bit-java-vs-64-bit-java\/","title":{"rendered":"Difference between 32-bit Java vs. 64-bit Java"},"content":{"rendered":"<p>In computer architecture, <a title=\"64-bit\" href=\"https:\/\/en.wikipedia.org\/wiki\/64-bit_computing\" target=\"_blank\" rel=\"noopener noreferrer\">64-bit computing<\/a> is the use of processors that have datapath widths, integer size, and memory addresses widths of 64 bits (eight octets\/bytes). Also, 64-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size. From the software perspective, 64-bit computing means the use of code with 64-bit virtual memory addresses. Similarly, <a title=\"32-bit\" href=\"https:\/\/en.wikipedia.org\/wiki\/32-bit\" target=\"_blank\" rel=\"noopener noreferrer\">32-bit computing<\/a>, CPU or 32-bit programming uses 32 bits (four octets\/bytes) for all above purposes.<\/p>\n<p>If you go to <a title=\"java download\" href=\"https:\/\/www.java.com\/en\/download\/manual.jsp\" target=\"_blank\" rel=\"noopener noreferrer\">java download page<\/a>, it list down various installation packages mentioning <strong>32-bit<\/strong> packages or <strong>64-bit<\/strong> packages for various platforms such as Linux or windows. Many times we worry that what package we are eligible to download and install in our systems so that our java code runs fine? In this post, I will try to put some light on these different terms and also I will try to answer some obvious questions.<\/p>\n<pre><strong>Discussion Points<\/strong>\r\n\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/difference-between-32-bit-java-vs-64-bit-java\/#32_bit\">Understanding 32-bit architecture in detail<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/difference-between-32-bit-java-vs-64-bit-java\/#64_bit\">How 64-bit architecture is different?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/difference-between-32-bit-java-vs-64-bit-java\/#which_java_version\">Which versions of java you should install on 32-bit\/64-bit machines?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/difference-between-32-bit-java-vs-64-bit-java\/#class_file_compatibility\">Can a .class file generated using a 32-bit java compiler be used on 64-bit java?<\/a>\r\n<a href=\"https:\/\/howtodoinjava.com\/java\/basics\/difference-between-32-bit-java-vs-64-bit-java\/#memory_allocation\">What's maximum amount of RAM that will be allocated to java on a 32-bit machine vs. 64-bit machine?<\/a>\r\n<\/pre>\n<p>You already read the basic difference between 64-bit and 32-bit computing\/architectures. Now let&#8217;s expand our understanding and go deeper into bits and bytes.<\/p>\n<p><a name=\"32_bit\"><\/a><\/p>\n<h2>Understanding 32-bit architecture in detail<\/h2>\n<p>As you may be aware of that <strong>in any 32-bit operating system, you are limited to 4096 MB (4 GB) of RAM<\/strong>. It is simple because the size of a 32-bit value will not allow any more references in memory.<\/p>\n<blockquote><p>2<sup>32<\/sup> = 4,294,967,296 i.e. roughly 4.29 GB<\/p><\/blockquote>\n<p>So, in a 32-bit system you can theoretically allocate up to 4GB of memory per process. What breaks this on Windows is how process address space is handled. <strong>Windows cuts the process address space in half<\/strong>. One half of it is reserved for the operating system (which a user process cannot use) and the other half for the user. It doesn\u2019t matter how much RAM is in the box, a 32-bit process can only use 2GB of RAM. What\u2019s even worse \u2013 this <strong>address space needs to be contiguous<\/strong>, so in practice you are most often <strong>left with just 1.5-1.8GB of heap on Windows machines<\/strong>.<\/p>\n<p>Tech savvy readers might know that modern chips support <strong><a title=\"Physical Address Extension\" href=\"https:\/\/en.wikipedia.org\/wiki\/Physical_Address_Extension\" target=\"_blank\" rel=\"noopener noreferrer\">PAE<\/a><\/strong>, a processor technology that allows the operating system to use a little bit more memory\u2014up to 64 GB, but it also requires special application support that most applications don&#8217;t have or necessarily need.<\/p>\n<p>The 4 GB limit for Windows, at least, is also a factor of licensing. The home versions of 32-bit Windows, while technically being able to support PAE, have a hard limit of 4 GB for licensing and driver compatibility reasons. I am pointing out &#8220;<em>driver compatibility reasons<\/em>&#8221; because some specific applications which highly use native files (e.g. anti-viruses) are built specifically for 32-bit\/64-bit machines and <strong>native files are not compatible on other machines<\/strong>.<\/p>\n<p>The other thing to keep remember is that your BIOS and other device chips in mother board such as video cards, also occupy some memory in same 4 GB space so actual memory available for use by your applications reduces further to around 1.5 GB only.<\/p>\n<p><a name=\"64_bit\"><\/a><\/p>\n<h2>How 64-bit architecture is different?<\/h2>\n<p>While 32 bits of information can only access 4 GB of RAM, a <strong>64-bit machine can access 17.2 BILLION GB of system memory<\/strong>, at least theoretically. So it must remove all the barriers of memory consumption from your system, right? But it does not.<\/p>\n<blockquote><p>Windows 64-bit Home editions are still limited to 16 GB of RAM [ all because of licensing reasons], but the Professional and Ultimate versions can use up to 192 GB of RAM at present due to various compatibility issues.<\/p><\/blockquote>\n<p>The per-process limit for RAM is also greatly increased\u2014on 64-bit Windows, instead of a 2 GB limit, <strong>each application can access upto 8 TB of virtual memory without any special configuration<\/strong> (besides it must be present in your system). It is a huge factor for choosing your next machine when you consider applications like video editing or virtual machines that may need to use enormous amounts of RAM.<\/p>\n<p>So now we have a good understanding of <strong>32-bit machines vs. 64-bit machines<\/strong>. Let&#8217;s focus on stuffs which are related mostly to java.<\/p>\n<p><a name=\"which_java_version\"><\/a><\/p>\n<h2>Which versions of java you should install on 32-bit\/64-bit machines?<\/h2>\n<p>Strictly speaking, on a 32-bit CPU architecture machine, you should install 32-bit java\/JRE. On the other hand, on a 64-bit CPU architecture machine, you are free to choose between 32-bit java\/JRE and 64-bit java\/JRE. Both will work just fine. In fact, on 64-bit machine <strong>decision of JRE version depends on other factors<\/strong> such as maximum memory needed to run your application on high load scenarios.<\/p>\n<p>Please note that high availability of memory doesn&#8217;t come for free. It does have a cost on runtime e.g.<\/p>\n<p><strong>1)<\/strong> 30-50% of more heap is required on 64-bit in comparison to 32-bit. Why? Mainly because of the memory layout in 64-bit architecture. First of all \u2013 object headers are 12 bytes on 64-bit JVM. Secondly, object references can be either 4 bytes or 8 bytes, depending on JVM flags and the size of the heap. This definitely adds some overhead compared to the 8 bytes on headers on 32-bit and 4 bytes on references.<\/p>\n<p><strong>2)<\/strong> Longer garbage collection pauses. Building up more heap means there is more work to be done by GC while cleaning it up from unused objects. What it means in real life is that you have to be extra cautious when building heaps larger than 12-16GB. Without fine tuning and measuring you can easily introduce full GC pauses spanning several minutes which can result in showstoppers.<\/p>\n<p><a name=\"class_file_compatibility\"><\/a><\/p>\n<h2>Can a .class file generated using a 32-bit java compiler be used on 64-bit java?<\/h2>\n<p><strong>Absolutely Yes. Java byte code is independent from 32-bit or 64-bit systems.<\/strong> That&#8217;s why it is said that the compiled java code shall be executable on &#8220;<strong><em>any<\/em><\/strong>&#8221; system. Remember that just the virtual machine is compiled for a special system architecture because of some native files it has in packaged bundle, and native files are never platform independent.<\/p>\n<p><strong><em>If so, then how 32-bit applications run on 64-bit systems?<\/em><\/strong> Answer is that 64-bit systems include a compatibility layer called <strong><a title=\"WoW64\" href=\"https:\/\/en.wikipedia.org\/wiki\/WoW64\" target=\"_blank\" rel=\"noopener noreferrer\">WoW64<\/a><\/strong>, which actually <strong>switches the processor back and forth between 32-bit and 64-bit modes<\/strong> depending on which thread needs to execute; making 32-bit software run smoothly even in the 64-bit environment.<\/p>\n<p><a name=\"memory_allocation\"><\/a><\/p>\n<h2>What&#8217;s maximum amount of RAM that will be allocated to java on a 32-bit machine vs. 64-bit machine?<\/h2>\n<p>As we learned already the limits allowed on both versions in previous discussion in this post. On 64-bit system, theoretically limit is very high for any configuration available today (<em>17.2 BILLION GB memory<\/em>). Still there are limitations imposed by vendors for various purposes, which mainly include licensing and compatibility with other native applications.<\/p>\n<p>Similarly, on 32-bit machine, limit is 4 GB, and about only 1.5 GB is actually available for user applications for reasons stated above i post.<\/p>\n<blockquote><p>There is a trick you can pull on 32-bit windows to reduce the kernel space and grow the user space. You can use the \/3GB parameter in your boot.ini. However, to actually use this opportunity, the JVM must be compiled\/linked using the \/<strong><a title=\"LARGEADDRESSAWARE\" href=\"https:\/\/www.ibm.com\/support\/pages\/java-sdk-documentation\" target=\"_blank\" rel=\"noopener noreferrer\">LARGEADDRESSAWARE<\/a><\/strong> switch.<\/p><\/blockquote>\n<p>This unfortunately is not the case, at least with the Hotspot JVM. Until the latest JDK releases the JVM is not compiled with this option. You are luckier if you are running on a jRockit on post-2006 versions. In this case you can enjoy up to 2.8-2.9 GB of heap size.<\/p>\n<p>That&#8217;s all for this topic. Please drop a comment if you something is not clear; or you simply disagree with me.<\/p>\n<p><strong>Happy Learning !!<\/strong><\/p>\n<p><strong>References:<\/strong><\/p>\n<ul>\n<li><a href=\"https:\/\/community.oracle.com\/tech\/developers\/discussion\/2497016\/latest-32-bit-java-7-compiled-with-largeaddressaware\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/community.oracle.com\/thread\/2497016?tstart=0<\/a><\/li>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/32-bit\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/en.wikipedia.org\/wiki\/32-bit<\/a><\/li>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/64-bit_computing\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/en.wikipedia.org\/wiki\/64-bit_computing<\/a><\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>In computer architecture, 64-bit computing is the use of processors that have datapath widths, integer size, and memory addresses widths of 64 bits (eight octets\/bytes). Also, 64-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size. From the software perspective, 64-bit computing means the use &#8230; <a title=\"Difference between 32-bit Java vs. 64-bit Java\" class=\"read-more\" href=\"https:\/\/howtodoinjava.com\/java\/basics\/difference-between-32-bit-java-vs-64-bit-java\/\" aria-label=\"More on Difference between 32-bit Java vs. 64-bit Java\">Read more<\/a><\/p>\n","protected":false},"author":2,"featured_media":4026,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[753],"tags":[309,620],"uagb_featured_image_src":{"full":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/64vs32bit.jpg",599,299,false],"thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/64vs32bit-150x150.jpg",150,150,true],"medium":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/64vs32bit-300x149.jpg",300,149,true],"medium_large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/64vs32bit.jpg",599,299,false],"large":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/64vs32bit.jpg",599,299,false],"1536x1536":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/64vs32bit.jpg",599,299,false],"2048x2048":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/64vs32bit.jpg",599,299,false],"yarpp-thumbnail":["https:\/\/howtodoinjava.com\/wp-content\/uploads\/2014\/07\/64vs32bit.jpg",120,60,false]},"uagb_author_info":{"display_name":"Lokesh Gupta","author_link":"https:\/\/howtodoinjava.com\/author\/lokeshgupta1981\/"},"uagb_comment_info":16,"uagb_excerpt":"In computer architecture, 64-bit computing is the use of processors that have datapath widths, integer size, and memory addresses widths of 64 bits (eight octets\/bytes). Also, 64-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size. From the software perspective, 64-bit computing means the use&hellip;","_links":{"self":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4020"}],"collection":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/comments?post=4020"}],"version-history":[{"count":0,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/posts\/4020\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media\/4026"}],"wp:attachment":[{"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/media?parent=4020"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/categories?post=4020"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/howtodoinjava.com\/wp-json\/wp\/v2\/tags?post=4020"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}